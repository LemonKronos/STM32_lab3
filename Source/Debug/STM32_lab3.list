
STM32_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002e98  08002e98  00012e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ebc  08002ebc  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002ebc  08002ebc  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ebc  08002ebc  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002ec4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000418  200000b0  08002f74  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  08002f74  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c145  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002232  00000000  00000000  0002c21e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab8  00000000  00000000  0002e450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009c0  00000000  00000000  0002ef08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b8b  00000000  00000000  0002f8c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cdc4  00000000  00000000  00047453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085e4f  00000000  00000000  00054217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000da066  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be0  00000000  00000000  000da0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e80 	.word	0x08002e80

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08002e80 	.word	0x08002e80

0800014c <display7SEG>:
    SEG5_Pin,
    SEG6_Pin
};


void display7SEG(uint8_t index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b03      	cmp	r3, #3
 800015a:	d873      	bhi.n	8000244 <display7SEG+0xf8>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	080001a9 	.word	0x080001a9
 800016c:	080001dd 	.word	0x080001dd
 8000170:	08000211 	.word	0x08000211
	case 0://SEG_0
		number7SEG(led_buffer[0]);
 8000174:	4b36      	ldr	r3, [pc, #216]	; (8000250 <display7SEG+0x104>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f8d9 	bl	8000330 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2108      	movs	r1, #8
 8000182:	4834      	ldr	r0, [pc, #208]	; (8000254 <display7SEG+0x108>)
 8000184:	f001 fd8d 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4831      	ldr	r0, [pc, #196]	; (8000254 <display7SEG+0x108>)
 800018e:	f001 fd88 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2120      	movs	r1, #32
 8000196:	482f      	ldr	r0, [pc, #188]	; (8000254 <display7SEG+0x108>)
 8000198:	f001 fd83 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	482c      	ldr	r0, [pc, #176]	; (8000254 <display7SEG+0x108>)
 80001a2:	f001 fd7e 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 80001a6:	e04e      	b.n	8000246 <display7SEG+0xfa>
	case 1://SEG_1
		number7SEG(led_buffer[1]);
 80001a8:	4b29      	ldr	r3, [pc, #164]	; (8000250 <display7SEG+0x104>)
 80001aa:	785b      	ldrb	r3, [r3, #1]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f8bf 	bl	8000330 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2108      	movs	r1, #8
 80001b6:	4827      	ldr	r0, [pc, #156]	; (8000254 <display7SEG+0x108>)
 80001b8:	f001 fd73 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	4824      	ldr	r0, [pc, #144]	; (8000254 <display7SEG+0x108>)
 80001c2:	f001 fd6e 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2120      	movs	r1, #32
 80001ca:	4822      	ldr	r0, [pc, #136]	; (8000254 <display7SEG+0x108>)
 80001cc:	f001 fd69 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2140      	movs	r1, #64	; 0x40
 80001d4:	481f      	ldr	r0, [pc, #124]	; (8000254 <display7SEG+0x108>)
 80001d6:	f001 fd64 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 80001da:	e034      	b.n	8000246 <display7SEG+0xfa>
	case 2://SEG_2
		number7SEG(led_buffer[2]);
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <display7SEG+0x104>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f8a5 	bl	8000330 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	481a      	ldr	r0, [pc, #104]	; (8000254 <display7SEG+0x108>)
 80001ec:	f001 fd59 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <display7SEG+0x108>)
 80001f6:	f001 fd54 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2120      	movs	r1, #32
 80001fe:	4815      	ldr	r0, [pc, #84]	; (8000254 <display7SEG+0x108>)
 8000200:	f001 fd4f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	4812      	ldr	r0, [pc, #72]	; (8000254 <display7SEG+0x108>)
 800020a:	f001 fd4a 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 800020e:	e01a      	b.n	8000246 <display7SEG+0xfa>
	case 3://SEG_3
		number7SEG(led_buffer[3]);
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <display7SEG+0x104>)
 8000212:	78db      	ldrb	r3, [r3, #3]
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f88b 	bl	8000330 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2108      	movs	r1, #8
 800021e:	480d      	ldr	r0, [pc, #52]	; (8000254 <display7SEG+0x108>)
 8000220:	f001 fd3f 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2110      	movs	r1, #16
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <display7SEG+0x108>)
 800022a:	f001 fd3a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2120      	movs	r1, #32
 8000232:	4808      	ldr	r0, [pc, #32]	; (8000254 <display7SEG+0x108>)
 8000234:	f001 fd35 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <display7SEG+0x108>)
 800023e:	f001 fd30 	bl	8001ca2 <HAL_GPIO_WritePin>
		break;
 8000242:	e000      	b.n	8000246 <display7SEG+0xfa>
	default:
		break;
 8000244:	bf00      	nop
	}
};
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	200002a0 	.word	0x200002a0
 8000254:	40010800 	.word	0x40010800

08000258 <update7SEG>:

void update7SEG(uint8_t index){
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	71fb      	strb	r3, [r7, #7]
	if(index == 0){
 8000262:	79fb      	ldrb	r3, [r7, #7]
 8000264:	2b00      	cmp	r3, #0
 8000266:	d11f      	bne.n	80002a8 <update7SEG+0x50>
		led_buffer[0] = counter[index] / 10;
 8000268:	79fb      	ldrb	r3, [r7, #7]
 800026a:	4a23      	ldr	r2, [pc, #140]	; (80002f8 <update7SEG+0xa0>)
 800026c:	5cd3      	ldrb	r3, [r2, r3]
 800026e:	4a23      	ldr	r2, [pc, #140]	; (80002fc <update7SEG+0xa4>)
 8000270:	fba2 2303 	umull	r2, r3, r2, r3
 8000274:	08db      	lsrs	r3, r3, #3
 8000276:	b2da      	uxtb	r2, r3
 8000278:	4b21      	ldr	r3, [pc, #132]	; (8000300 <update7SEG+0xa8>)
 800027a:	701a      	strb	r2, [r3, #0]
		if(led_buffer[0] == 0) led_buffer[0] = 10;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <update7SEG+0xa8>)
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	2b00      	cmp	r3, #0
 8000282:	d102      	bne.n	800028a <update7SEG+0x32>
 8000284:	4b1e      	ldr	r3, [pc, #120]	; (8000300 <update7SEG+0xa8>)
 8000286:	220a      	movs	r2, #10
 8000288:	701a      	strb	r2, [r3, #0]
		led_buffer[1] = counter[index] % 10;
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4a1a      	ldr	r2, [pc, #104]	; (80002f8 <update7SEG+0xa0>)
 800028e:	5cd2      	ldrb	r2, [r2, r3]
 8000290:	4b1a      	ldr	r3, [pc, #104]	; (80002fc <update7SEG+0xa4>)
 8000292:	fba3 1302 	umull	r1, r3, r3, r2
 8000296:	08d9      	lsrs	r1, r3, #3
 8000298:	460b      	mov	r3, r1
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	440b      	add	r3, r1
 800029e:	005b      	lsls	r3, r3, #1
 80002a0:	1ad3      	subs	r3, r2, r3
 80002a2:	b2da      	uxtb	r2, r3
 80002a4:	4b16      	ldr	r3, [pc, #88]	; (8000300 <update7SEG+0xa8>)
 80002a6:	705a      	strb	r2, [r3, #1]
	}
	if(index == 1){
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b01      	cmp	r3, #1
 80002ac:	d11f      	bne.n	80002ee <update7SEG+0x96>
		led_buffer[2] = counter[index] / 10;
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	4a11      	ldr	r2, [pc, #68]	; (80002f8 <update7SEG+0xa0>)
 80002b2:	5cd3      	ldrb	r3, [r2, r3]
 80002b4:	4a11      	ldr	r2, [pc, #68]	; (80002fc <update7SEG+0xa4>)
 80002b6:	fba2 2303 	umull	r2, r3, r2, r3
 80002ba:	08db      	lsrs	r3, r3, #3
 80002bc:	b2da      	uxtb	r2, r3
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <update7SEG+0xa8>)
 80002c0:	709a      	strb	r2, [r3, #2]
		if(led_buffer[2] == 0) led_buffer[2] = 10;
 80002c2:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <update7SEG+0xa8>)
 80002c4:	789b      	ldrb	r3, [r3, #2]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d102      	bne.n	80002d0 <update7SEG+0x78>
 80002ca:	4b0d      	ldr	r3, [pc, #52]	; (8000300 <update7SEG+0xa8>)
 80002cc:	220a      	movs	r2, #10
 80002ce:	709a      	strb	r2, [r3, #2]
		led_buffer[3] = counter[index] % 10;
 80002d0:	79fb      	ldrb	r3, [r7, #7]
 80002d2:	4a09      	ldr	r2, [pc, #36]	; (80002f8 <update7SEG+0xa0>)
 80002d4:	5cd2      	ldrb	r2, [r2, r3]
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <update7SEG+0xa4>)
 80002d8:	fba3 1302 	umull	r1, r3, r3, r2
 80002dc:	08d9      	lsrs	r1, r3, #3
 80002de:	460b      	mov	r3, r1
 80002e0:	009b      	lsls	r3, r3, #2
 80002e2:	440b      	add	r3, r1
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	1ad3      	subs	r3, r2, r3
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b05      	ldr	r3, [pc, #20]	; (8000300 <update7SEG+0xa8>)
 80002ec:	70da      	strb	r2, [r3, #3]
	}
};
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000434 	.word	0x20000434
 80002fc:	cccccccd 	.word	0xcccccccd
 8000300:	200002a0 	.word	0x200002a0

08000304 <countDown7SEG>:

void countDown7SEG(uint8_t index){
 8000304:	b580      	push	{r7, lr}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4603      	mov	r3, r0
 800030c:	71fb      	strb	r3, [r7, #7]
	counter[index]--;
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	4a06      	ldr	r2, [pc, #24]	; (800032c <countDown7SEG+0x28>)
 8000312:	5cd2      	ldrb	r2, [r2, r3]
 8000314:	3a01      	subs	r2, #1
 8000316:	b2d1      	uxtb	r1, r2
 8000318:	4a04      	ldr	r2, [pc, #16]	; (800032c <countDown7SEG+0x28>)
 800031a:	54d1      	strb	r1, [r2, r3]
	update7SEG(index);
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	4618      	mov	r0, r3
 8000320:	f7ff ff9a 	bl	8000258 <update7SEG>
};
 8000324:	bf00      	nop
 8000326:	3708      	adds	r7, #8
 8000328:	46bd      	mov	sp, r7
 800032a:	bd80      	pop	{r7, pc}
 800032c:	20000434 	.word	0x20000434

08000330 <number7SEG>:

void number7SEG(uint8_t number){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	71fb      	strb	r3, [r7, #7]
	switch(number) {
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	2b0a      	cmp	r3, #10
 800033e:	f200 828d 	bhi.w	800085c <number7SEG+0x52c>
 8000342:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <number7SEG+0x18>)
 8000344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000348:	080003e7 	.word	0x080003e7
 800034c:	08000459 	.word	0x08000459
 8000350:	080004cb 	.word	0x080004cb
 8000354:	0800053d 	.word	0x0800053d
 8000358:	080005b9 	.word	0x080005b9
 800035c:	0800062b 	.word	0x0800062b
 8000360:	0800069d 	.word	0x0800069d
 8000364:	0800070f 	.word	0x0800070f
 8000368:	08000781 	.word	0x08000781
 800036c:	080007e3 	.word	0x080007e3
 8000370:	08000375 	.word	0x08000375
	    case 10: // ALL OFF
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000374:	4b8e      	ldr	r3, [pc, #568]	; (80005b0 <number7SEG+0x280>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a8e      	ldr	r2, [pc, #568]	; (80005b4 <number7SEG+0x284>)
 800037a:	8811      	ldrh	r1, [r2, #0]
 800037c:	2201      	movs	r2, #1
 800037e:	4618      	mov	r0, r3
 8000380:	f001 fc8f 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000384:	4b8a      	ldr	r3, [pc, #552]	; (80005b0 <number7SEG+0x280>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4a8a      	ldr	r2, [pc, #552]	; (80005b4 <number7SEG+0x284>)
 800038a:	8851      	ldrh	r1, [r2, #2]
 800038c:	2201      	movs	r2, #1
 800038e:	4618      	mov	r0, r3
 8000390:	f001 fc87 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 8000394:	4b86      	ldr	r3, [pc, #536]	; (80005b0 <number7SEG+0x280>)
 8000396:	689b      	ldr	r3, [r3, #8]
 8000398:	4a86      	ldr	r2, [pc, #536]	; (80005b4 <number7SEG+0x284>)
 800039a:	8891      	ldrh	r1, [r2, #4]
 800039c:	2201      	movs	r2, #1
 800039e:	4618      	mov	r0, r3
 80003a0:	f001 fc7f 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 80003a4:	4b82      	ldr	r3, [pc, #520]	; (80005b0 <number7SEG+0x280>)
 80003a6:	68db      	ldr	r3, [r3, #12]
 80003a8:	4a82      	ldr	r2, [pc, #520]	; (80005b4 <number7SEG+0x284>)
 80003aa:	88d1      	ldrh	r1, [r2, #6]
 80003ac:	2201      	movs	r2, #1
 80003ae:	4618      	mov	r0, r3
 80003b0:	f001 fc77 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 80003b4:	4b7e      	ldr	r3, [pc, #504]	; (80005b0 <number7SEG+0x280>)
 80003b6:	691b      	ldr	r3, [r3, #16]
 80003b8:	4a7e      	ldr	r2, [pc, #504]	; (80005b4 <number7SEG+0x284>)
 80003ba:	8911      	ldrh	r1, [r2, #8]
 80003bc:	2201      	movs	r2, #1
 80003be:	4618      	mov	r0, r3
 80003c0:	f001 fc6f 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 80003c4:	4b7a      	ldr	r3, [pc, #488]	; (80005b0 <number7SEG+0x280>)
 80003c6:	695b      	ldr	r3, [r3, #20]
 80003c8:	4a7a      	ldr	r2, [pc, #488]	; (80005b4 <number7SEG+0x284>)
 80003ca:	8951      	ldrh	r1, [r2, #10]
 80003cc:	2201      	movs	r2, #1
 80003ce:	4618      	mov	r0, r3
 80003d0:	f001 fc67 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 80003d4:	4b76      	ldr	r3, [pc, #472]	; (80005b0 <number7SEG+0x280>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a76      	ldr	r2, [pc, #472]	; (80005b4 <number7SEG+0x284>)
 80003da:	8991      	ldrh	r1, [r2, #12]
 80003dc:	2201      	movs	r2, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f001 fc5f 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 80003e4:	e273      	b.n	80008ce <number7SEG+0x59e>
	    case 0:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80003e6:	4b72      	ldr	r3, [pc, #456]	; (80005b0 <number7SEG+0x280>)
 80003e8:	681b      	ldr	r3, [r3, #0]
 80003ea:	4a72      	ldr	r2, [pc, #456]	; (80005b4 <number7SEG+0x284>)
 80003ec:	8811      	ldrh	r1, [r2, #0]
 80003ee:	2200      	movs	r2, #0
 80003f0:	4618      	mov	r0, r3
 80003f2:	f001 fc56 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80003f6:	4b6e      	ldr	r3, [pc, #440]	; (80005b0 <number7SEG+0x280>)
 80003f8:	685b      	ldr	r3, [r3, #4]
 80003fa:	4a6e      	ldr	r2, [pc, #440]	; (80005b4 <number7SEG+0x284>)
 80003fc:	8851      	ldrh	r1, [r2, #2]
 80003fe:	2200      	movs	r2, #0
 8000400:	4618      	mov	r0, r3
 8000402:	f001 fc4e 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000406:	4b6a      	ldr	r3, [pc, #424]	; (80005b0 <number7SEG+0x280>)
 8000408:	689b      	ldr	r3, [r3, #8]
 800040a:	4a6a      	ldr	r2, [pc, #424]	; (80005b4 <number7SEG+0x284>)
 800040c:	8891      	ldrh	r1, [r2, #4]
 800040e:	2200      	movs	r2, #0
 8000410:	4618      	mov	r0, r3
 8000412:	f001 fc46 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000416:	4b66      	ldr	r3, [pc, #408]	; (80005b0 <number7SEG+0x280>)
 8000418:	68db      	ldr	r3, [r3, #12]
 800041a:	4a66      	ldr	r2, [pc, #408]	; (80005b4 <number7SEG+0x284>)
 800041c:	88d1      	ldrh	r1, [r2, #6]
 800041e:	2200      	movs	r2, #0
 8000420:	4618      	mov	r0, r3
 8000422:	f001 fc3e 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 8000426:	4b62      	ldr	r3, [pc, #392]	; (80005b0 <number7SEG+0x280>)
 8000428:	691b      	ldr	r3, [r3, #16]
 800042a:	4a62      	ldr	r2, [pc, #392]	; (80005b4 <number7SEG+0x284>)
 800042c:	8911      	ldrh	r1, [r2, #8]
 800042e:	2200      	movs	r2, #0
 8000430:	4618      	mov	r0, r3
 8000432:	f001 fc36 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000436:	4b5e      	ldr	r3, [pc, #376]	; (80005b0 <number7SEG+0x280>)
 8000438:	695b      	ldr	r3, [r3, #20]
 800043a:	4a5e      	ldr	r2, [pc, #376]	; (80005b4 <number7SEG+0x284>)
 800043c:	8951      	ldrh	r1, [r2, #10]
 800043e:	2200      	movs	r2, #0
 8000440:	4618      	mov	r0, r3
 8000442:	f001 fc2e 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 8000446:	4b5a      	ldr	r3, [pc, #360]	; (80005b0 <number7SEG+0x280>)
 8000448:	699b      	ldr	r3, [r3, #24]
 800044a:	4a5a      	ldr	r2, [pc, #360]	; (80005b4 <number7SEG+0x284>)
 800044c:	8991      	ldrh	r1, [r2, #12]
 800044e:	2201      	movs	r2, #1
 8000450:	4618      	mov	r0, r3
 8000452:	f001 fc26 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 8000456:	e23a      	b.n	80008ce <number7SEG+0x59e>
	    case 1:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000458:	4b55      	ldr	r3, [pc, #340]	; (80005b0 <number7SEG+0x280>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	4a55      	ldr	r2, [pc, #340]	; (80005b4 <number7SEG+0x284>)
 800045e:	8811      	ldrh	r1, [r2, #0]
 8000460:	2201      	movs	r2, #1
 8000462:	4618      	mov	r0, r3
 8000464:	f001 fc1d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000468:	4b51      	ldr	r3, [pc, #324]	; (80005b0 <number7SEG+0x280>)
 800046a:	685b      	ldr	r3, [r3, #4]
 800046c:	4a51      	ldr	r2, [pc, #324]	; (80005b4 <number7SEG+0x284>)
 800046e:	8851      	ldrh	r1, [r2, #2]
 8000470:	2200      	movs	r2, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fc15 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000478:	4b4d      	ldr	r3, [pc, #308]	; (80005b0 <number7SEG+0x280>)
 800047a:	689b      	ldr	r3, [r3, #8]
 800047c:	4a4d      	ldr	r2, [pc, #308]	; (80005b4 <number7SEG+0x284>)
 800047e:	8891      	ldrh	r1, [r2, #4]
 8000480:	2200      	movs	r2, #0
 8000482:	4618      	mov	r0, r3
 8000484:	f001 fc0d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000488:	4b49      	ldr	r3, [pc, #292]	; (80005b0 <number7SEG+0x280>)
 800048a:	68db      	ldr	r3, [r3, #12]
 800048c:	4a49      	ldr	r2, [pc, #292]	; (80005b4 <number7SEG+0x284>)
 800048e:	88d1      	ldrh	r1, [r2, #6]
 8000490:	2201      	movs	r2, #1
 8000492:	4618      	mov	r0, r3
 8000494:	f001 fc05 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000498:	4b45      	ldr	r3, [pc, #276]	; (80005b0 <number7SEG+0x280>)
 800049a:	691b      	ldr	r3, [r3, #16]
 800049c:	4a45      	ldr	r2, [pc, #276]	; (80005b4 <number7SEG+0x284>)
 800049e:	8911      	ldrh	r1, [r2, #8]
 80004a0:	2201      	movs	r2, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f001 fbfd 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 80004a8:	4b41      	ldr	r3, [pc, #260]	; (80005b0 <number7SEG+0x280>)
 80004aa:	695b      	ldr	r3, [r3, #20]
 80004ac:	4a41      	ldr	r2, [pc, #260]	; (80005b4 <number7SEG+0x284>)
 80004ae:	8951      	ldrh	r1, [r2, #10]
 80004b0:	2201      	movs	r2, #1
 80004b2:	4618      	mov	r0, r3
 80004b4:	f001 fbf5 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 80004b8:	4b3d      	ldr	r3, [pc, #244]	; (80005b0 <number7SEG+0x280>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a3d      	ldr	r2, [pc, #244]	; (80005b4 <number7SEG+0x284>)
 80004be:	8991      	ldrh	r1, [r2, #12]
 80004c0:	2201      	movs	r2, #1
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fbed 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 80004c8:	e201      	b.n	80008ce <number7SEG+0x59e>
	    case 2:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80004ca:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <number7SEG+0x280>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	4a39      	ldr	r2, [pc, #228]	; (80005b4 <number7SEG+0x284>)
 80004d0:	8811      	ldrh	r1, [r2, #0]
 80004d2:	2200      	movs	r2, #0
 80004d4:	4618      	mov	r0, r3
 80004d6:	f001 fbe4 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80004da:	4b35      	ldr	r3, [pc, #212]	; (80005b0 <number7SEG+0x280>)
 80004dc:	685b      	ldr	r3, [r3, #4]
 80004de:	4a35      	ldr	r2, [pc, #212]	; (80005b4 <number7SEG+0x284>)
 80004e0:	8851      	ldrh	r1, [r2, #2]
 80004e2:	2200      	movs	r2, #0
 80004e4:	4618      	mov	r0, r3
 80004e6:	f001 fbdc 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 80004ea:	4b31      	ldr	r3, [pc, #196]	; (80005b0 <number7SEG+0x280>)
 80004ec:	689b      	ldr	r3, [r3, #8]
 80004ee:	4a31      	ldr	r2, [pc, #196]	; (80005b4 <number7SEG+0x284>)
 80004f0:	8891      	ldrh	r1, [r2, #4]
 80004f2:	2201      	movs	r2, #1
 80004f4:	4618      	mov	r0, r3
 80004f6:	f001 fbd4 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80004fa:	4b2d      	ldr	r3, [pc, #180]	; (80005b0 <number7SEG+0x280>)
 80004fc:	68db      	ldr	r3, [r3, #12]
 80004fe:	4a2d      	ldr	r2, [pc, #180]	; (80005b4 <number7SEG+0x284>)
 8000500:	88d1      	ldrh	r1, [r2, #6]
 8000502:	2200      	movs	r2, #0
 8000504:	4618      	mov	r0, r3
 8000506:	f001 fbcc 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 800050a:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <number7SEG+0x280>)
 800050c:	691b      	ldr	r3, [r3, #16]
 800050e:	4a29      	ldr	r2, [pc, #164]	; (80005b4 <number7SEG+0x284>)
 8000510:	8911      	ldrh	r1, [r2, #8]
 8000512:	2200      	movs	r2, #0
 8000514:	4618      	mov	r0, r3
 8000516:	f001 fbc4 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 800051a:	4b25      	ldr	r3, [pc, #148]	; (80005b0 <number7SEG+0x280>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a25      	ldr	r2, [pc, #148]	; (80005b4 <number7SEG+0x284>)
 8000520:	8951      	ldrh	r1, [r2, #10]
 8000522:	2201      	movs	r2, #1
 8000524:	4618      	mov	r0, r3
 8000526:	f001 fbbc 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 800052a:	4b21      	ldr	r3, [pc, #132]	; (80005b0 <number7SEG+0x280>)
 800052c:	699b      	ldr	r3, [r3, #24]
 800052e:	4a21      	ldr	r2, [pc, #132]	; (80005b4 <number7SEG+0x284>)
 8000530:	8991      	ldrh	r1, [r2, #12]
 8000532:	2200      	movs	r2, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f001 fbb4 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 800053a:	e1c8      	b.n	80008ce <number7SEG+0x59e>
	    case 3:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 800053c:	4b1c      	ldr	r3, [pc, #112]	; (80005b0 <number7SEG+0x280>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	4a1c      	ldr	r2, [pc, #112]	; (80005b4 <number7SEG+0x284>)
 8000542:	8811      	ldrh	r1, [r2, #0]
 8000544:	2200      	movs	r2, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f001 fbab 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 800054c:	4b18      	ldr	r3, [pc, #96]	; (80005b0 <number7SEG+0x280>)
 800054e:	685b      	ldr	r3, [r3, #4]
 8000550:	4a18      	ldr	r2, [pc, #96]	; (80005b4 <number7SEG+0x284>)
 8000552:	8851      	ldrh	r1, [r2, #2]
 8000554:	2200      	movs	r2, #0
 8000556:	4618      	mov	r0, r3
 8000558:	f001 fba3 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 800055c:	4b14      	ldr	r3, [pc, #80]	; (80005b0 <number7SEG+0x280>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	4a14      	ldr	r2, [pc, #80]	; (80005b4 <number7SEG+0x284>)
 8000562:	8891      	ldrh	r1, [r2, #4]
 8000564:	2200      	movs	r2, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f001 fb9b 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 800056c:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <number7SEG+0x280>)
 800056e:	68db      	ldr	r3, [r3, #12]
 8000570:	4a10      	ldr	r2, [pc, #64]	; (80005b4 <number7SEG+0x284>)
 8000572:	88d1      	ldrh	r1, [r2, #6]
 8000574:	2200      	movs	r2, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f001 fb93 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800057c:	4b0c      	ldr	r3, [pc, #48]	; (80005b0 <number7SEG+0x280>)
 800057e:	691b      	ldr	r3, [r3, #16]
 8000580:	4a0c      	ldr	r2, [pc, #48]	; (80005b4 <number7SEG+0x284>)
 8000582:	8911      	ldrh	r1, [r2, #8]
 8000584:	2201      	movs	r2, #1
 8000586:	4618      	mov	r0, r3
 8000588:	f001 fb8b 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 800058c:	4b08      	ldr	r3, [pc, #32]	; (80005b0 <number7SEG+0x280>)
 800058e:	695b      	ldr	r3, [r3, #20]
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <number7SEG+0x284>)
 8000592:	8951      	ldrh	r1, [r2, #10]
 8000594:	2201      	movs	r2, #1
 8000596:	4618      	mov	r0, r3
 8000598:	f001 fb83 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 800059c:	4b04      	ldr	r3, [pc, #16]	; (80005b0 <number7SEG+0x280>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <number7SEG+0x284>)
 80005a2:	8991      	ldrh	r1, [r2, #12]
 80005a4:	2200      	movs	r2, #0
 80005a6:	4618      	mov	r0, r3
 80005a8:	f001 fb7b 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 80005ac:	e18f      	b.n	80008ce <number7SEG+0x59e>
 80005ae:	bf00      	nop
 80005b0:	20000000 	.word	0x20000000
 80005b4:	2000001c 	.word	0x2000001c
	    case 4:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 80005b8:	4ba6      	ldr	r3, [pc, #664]	; (8000854 <number7SEG+0x524>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4aa6      	ldr	r2, [pc, #664]	; (8000858 <number7SEG+0x528>)
 80005be:	8811      	ldrh	r1, [r2, #0]
 80005c0:	2201      	movs	r2, #1
 80005c2:	4618      	mov	r0, r3
 80005c4:	f001 fb6d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80005c8:	4ba2      	ldr	r3, [pc, #648]	; (8000854 <number7SEG+0x524>)
 80005ca:	685b      	ldr	r3, [r3, #4]
 80005cc:	4aa2      	ldr	r2, [pc, #648]	; (8000858 <number7SEG+0x528>)
 80005ce:	8851      	ldrh	r1, [r2, #2]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fb65 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80005d8:	4b9e      	ldr	r3, [pc, #632]	; (8000854 <number7SEG+0x524>)
 80005da:	689b      	ldr	r3, [r3, #8]
 80005dc:	4a9e      	ldr	r2, [pc, #632]	; (8000858 <number7SEG+0x528>)
 80005de:	8891      	ldrh	r1, [r2, #4]
 80005e0:	2200      	movs	r2, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fb5d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 80005e8:	4b9a      	ldr	r3, [pc, #616]	; (8000854 <number7SEG+0x524>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a9a      	ldr	r2, [pc, #616]	; (8000858 <number7SEG+0x528>)
 80005ee:	88d1      	ldrh	r1, [r2, #6]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fb55 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 80005f8:	4b96      	ldr	r3, [pc, #600]	; (8000854 <number7SEG+0x524>)
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	4a96      	ldr	r2, [pc, #600]	; (8000858 <number7SEG+0x528>)
 80005fe:	8911      	ldrh	r1, [r2, #8]
 8000600:	2201      	movs	r2, #1
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fb4d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000608:	4b92      	ldr	r3, [pc, #584]	; (8000854 <number7SEG+0x524>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a92      	ldr	r2, [pc, #584]	; (8000858 <number7SEG+0x528>)
 800060e:	8951      	ldrh	r1, [r2, #10]
 8000610:	2200      	movs	r2, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f001 fb45 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000618:	4b8e      	ldr	r3, [pc, #568]	; (8000854 <number7SEG+0x524>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a8e      	ldr	r2, [pc, #568]	; (8000858 <number7SEG+0x528>)
 800061e:	8991      	ldrh	r1, [r2, #12]
 8000620:	2200      	movs	r2, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f001 fb3d 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 8000628:	e151      	b.n	80008ce <number7SEG+0x59e>
	    case 5:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 800062a:	4b8a      	ldr	r3, [pc, #552]	; (8000854 <number7SEG+0x524>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a8a      	ldr	r2, [pc, #552]	; (8000858 <number7SEG+0x528>)
 8000630:	8811      	ldrh	r1, [r2, #0]
 8000632:	2200      	movs	r2, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f001 fb34 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 800063a:	4b86      	ldr	r3, [pc, #536]	; (8000854 <number7SEG+0x524>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	4a86      	ldr	r2, [pc, #536]	; (8000858 <number7SEG+0x528>)
 8000640:	8851      	ldrh	r1, [r2, #2]
 8000642:	2201      	movs	r2, #1
 8000644:	4618      	mov	r0, r3
 8000646:	f001 fb2c 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 800064a:	4b82      	ldr	r3, [pc, #520]	; (8000854 <number7SEG+0x524>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	4a82      	ldr	r2, [pc, #520]	; (8000858 <number7SEG+0x528>)
 8000650:	8891      	ldrh	r1, [r2, #4]
 8000652:	2200      	movs	r2, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f001 fb24 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 800065a:	4b7e      	ldr	r3, [pc, #504]	; (8000854 <number7SEG+0x524>)
 800065c:	68db      	ldr	r3, [r3, #12]
 800065e:	4a7e      	ldr	r2, [pc, #504]	; (8000858 <number7SEG+0x528>)
 8000660:	88d1      	ldrh	r1, [r2, #6]
 8000662:	2200      	movs	r2, #0
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fb1c 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800066a:	4b7a      	ldr	r3, [pc, #488]	; (8000854 <number7SEG+0x524>)
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	4a7a      	ldr	r2, [pc, #488]	; (8000858 <number7SEG+0x528>)
 8000670:	8911      	ldrh	r1, [r2, #8]
 8000672:	2201      	movs	r2, #1
 8000674:	4618      	mov	r0, r3
 8000676:	f001 fb14 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 800067a:	4b76      	ldr	r3, [pc, #472]	; (8000854 <number7SEG+0x524>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	4a76      	ldr	r2, [pc, #472]	; (8000858 <number7SEG+0x528>)
 8000680:	8951      	ldrh	r1, [r2, #10]
 8000682:	2200      	movs	r2, #0
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fb0c 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 800068a:	4b72      	ldr	r3, [pc, #456]	; (8000854 <number7SEG+0x524>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	4a72      	ldr	r2, [pc, #456]	; (8000858 <number7SEG+0x528>)
 8000690:	8991      	ldrh	r1, [r2, #12]
 8000692:	2200      	movs	r2, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fb04 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 800069a:	e118      	b.n	80008ce <number7SEG+0x59e>
	    case 6:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 800069c:	4b6d      	ldr	r3, [pc, #436]	; (8000854 <number7SEG+0x524>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a6d      	ldr	r2, [pc, #436]	; (8000858 <number7SEG+0x528>)
 80006a2:	8811      	ldrh	r1, [r2, #0]
 80006a4:	2200      	movs	r2, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f001 fafb 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 80006ac:	4b69      	ldr	r3, [pc, #420]	; (8000854 <number7SEG+0x524>)
 80006ae:	685b      	ldr	r3, [r3, #4]
 80006b0:	4a69      	ldr	r2, [pc, #420]	; (8000858 <number7SEG+0x528>)
 80006b2:	8851      	ldrh	r1, [r2, #2]
 80006b4:	2201      	movs	r2, #1
 80006b6:	4618      	mov	r0, r3
 80006b8:	f001 faf3 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80006bc:	4b65      	ldr	r3, [pc, #404]	; (8000854 <number7SEG+0x524>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	4a65      	ldr	r2, [pc, #404]	; (8000858 <number7SEG+0x528>)
 80006c2:	8891      	ldrh	r1, [r2, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 faeb 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80006cc:	4b61      	ldr	r3, [pc, #388]	; (8000854 <number7SEG+0x524>)
 80006ce:	68db      	ldr	r3, [r3, #12]
 80006d0:	4a61      	ldr	r2, [pc, #388]	; (8000858 <number7SEG+0x528>)
 80006d2:	88d1      	ldrh	r1, [r2, #6]
 80006d4:	2200      	movs	r2, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f001 fae3 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80006dc:	4b5d      	ldr	r3, [pc, #372]	; (8000854 <number7SEG+0x524>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4a5d      	ldr	r2, [pc, #372]	; (8000858 <number7SEG+0x528>)
 80006e2:	8911      	ldrh	r1, [r2, #8]
 80006e4:	2200      	movs	r2, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fadb 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80006ec:	4b59      	ldr	r3, [pc, #356]	; (8000854 <number7SEG+0x524>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	4a59      	ldr	r2, [pc, #356]	; (8000858 <number7SEG+0x528>)
 80006f2:	8951      	ldrh	r1, [r2, #10]
 80006f4:	2200      	movs	r2, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fad3 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80006fc:	4b55      	ldr	r3, [pc, #340]	; (8000854 <number7SEG+0x524>)
 80006fe:	699b      	ldr	r3, [r3, #24]
 8000700:	4a55      	ldr	r2, [pc, #340]	; (8000858 <number7SEG+0x528>)
 8000702:	8991      	ldrh	r1, [r2, #12]
 8000704:	2200      	movs	r2, #0
 8000706:	4618      	mov	r0, r3
 8000708:	f001 facb 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 800070c:	e0df      	b.n	80008ce <number7SEG+0x59e>
	    case 7:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 800070e:	4b51      	ldr	r3, [pc, #324]	; (8000854 <number7SEG+0x524>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	4a51      	ldr	r2, [pc, #324]	; (8000858 <number7SEG+0x528>)
 8000714:	8811      	ldrh	r1, [r2, #0]
 8000716:	2200      	movs	r2, #0
 8000718:	4618      	mov	r0, r3
 800071a:	f001 fac2 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 800071e:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <number7SEG+0x524>)
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	4a4d      	ldr	r2, [pc, #308]	; (8000858 <number7SEG+0x528>)
 8000724:	8851      	ldrh	r1, [r2, #2]
 8000726:	2200      	movs	r2, #0
 8000728:	4618      	mov	r0, r3
 800072a:	f001 faba 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 800072e:	4b49      	ldr	r3, [pc, #292]	; (8000854 <number7SEG+0x524>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	4a49      	ldr	r2, [pc, #292]	; (8000858 <number7SEG+0x528>)
 8000734:	8891      	ldrh	r1, [r2, #4]
 8000736:	2200      	movs	r2, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fab2 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 800073e:	4b45      	ldr	r3, [pc, #276]	; (8000854 <number7SEG+0x524>)
 8000740:	68db      	ldr	r3, [r3, #12]
 8000742:	4a45      	ldr	r2, [pc, #276]	; (8000858 <number7SEG+0x528>)
 8000744:	88d1      	ldrh	r1, [r2, #6]
 8000746:	2201      	movs	r2, #1
 8000748:	4618      	mov	r0, r3
 800074a:	f001 faaa 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <number7SEG+0x524>)
 8000750:	691b      	ldr	r3, [r3, #16]
 8000752:	4a41      	ldr	r2, [pc, #260]	; (8000858 <number7SEG+0x528>)
 8000754:	8911      	ldrh	r1, [r2, #8]
 8000756:	2201      	movs	r2, #1
 8000758:	4618      	mov	r0, r3
 800075a:	f001 faa2 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 800075e:	4b3d      	ldr	r3, [pc, #244]	; (8000854 <number7SEG+0x524>)
 8000760:	695b      	ldr	r3, [r3, #20]
 8000762:	4a3d      	ldr	r2, [pc, #244]	; (8000858 <number7SEG+0x528>)
 8000764:	8951      	ldrh	r1, [r2, #10]
 8000766:	2201      	movs	r2, #1
 8000768:	4618      	mov	r0, r3
 800076a:	f001 fa9a 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 800076e:	4b39      	ldr	r3, [pc, #228]	; (8000854 <number7SEG+0x524>)
 8000770:	699b      	ldr	r3, [r3, #24]
 8000772:	4a39      	ldr	r2, [pc, #228]	; (8000858 <number7SEG+0x528>)
 8000774:	8991      	ldrh	r1, [r2, #12]
 8000776:	2201      	movs	r2, #1
 8000778:	4618      	mov	r0, r3
 800077a:	f001 fa92 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 800077e:	e0a6      	b.n	80008ce <number7SEG+0x59e>
	    case 8:
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000780:	4b34      	ldr	r3, [pc, #208]	; (8000854 <number7SEG+0x524>)
 8000782:	685b      	ldr	r3, [r3, #4]
 8000784:	4a34      	ldr	r2, [pc, #208]	; (8000858 <number7SEG+0x528>)
 8000786:	8851      	ldrh	r1, [r2, #2]
 8000788:	2200      	movs	r2, #0
 800078a:	4618      	mov	r0, r3
 800078c:	f001 fa89 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000790:	4b30      	ldr	r3, [pc, #192]	; (8000854 <number7SEG+0x524>)
 8000792:	689b      	ldr	r3, [r3, #8]
 8000794:	4a30      	ldr	r2, [pc, #192]	; (8000858 <number7SEG+0x528>)
 8000796:	8891      	ldrh	r1, [r2, #4]
 8000798:	2200      	movs	r2, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fa81 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80007a0:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <number7SEG+0x524>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a2c      	ldr	r2, [pc, #176]	; (8000858 <number7SEG+0x528>)
 80007a6:	88d1      	ldrh	r1, [r2, #6]
 80007a8:	2200      	movs	r2, #0
 80007aa:	4618      	mov	r0, r3
 80007ac:	f001 fa79 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <number7SEG+0x524>)
 80007b2:	691b      	ldr	r3, [r3, #16]
 80007b4:	4a28      	ldr	r2, [pc, #160]	; (8000858 <number7SEG+0x528>)
 80007b6:	8911      	ldrh	r1, [r2, #8]
 80007b8:	2200      	movs	r2, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fa71 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <number7SEG+0x524>)
 80007c2:	695b      	ldr	r3, [r3, #20]
 80007c4:	4a24      	ldr	r2, [pc, #144]	; (8000858 <number7SEG+0x528>)
 80007c6:	8951      	ldrh	r1, [r2, #10]
 80007c8:	2200      	movs	r2, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f001 fa69 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80007d0:	4b20      	ldr	r3, [pc, #128]	; (8000854 <number7SEG+0x524>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a20      	ldr	r2, [pc, #128]	; (8000858 <number7SEG+0x528>)
 80007d6:	8991      	ldrh	r1, [r2, #12]
 80007d8:	2200      	movs	r2, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f001 fa61 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 80007e0:	e075      	b.n	80008ce <number7SEG+0x59e>
	    case 9:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <number7SEG+0x524>)
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	4a1c      	ldr	r2, [pc, #112]	; (8000858 <number7SEG+0x528>)
 80007e8:	8811      	ldrh	r1, [r2, #0]
 80007ea:	2200      	movs	r2, #0
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fa58 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80007f2:	4b18      	ldr	r3, [pc, #96]	; (8000854 <number7SEG+0x524>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <number7SEG+0x528>)
 80007f8:	8851      	ldrh	r1, [r2, #2]
 80007fa:	2200      	movs	r2, #0
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fa50 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000802:	4b14      	ldr	r3, [pc, #80]	; (8000854 <number7SEG+0x524>)
 8000804:	689b      	ldr	r3, [r3, #8]
 8000806:	4a14      	ldr	r2, [pc, #80]	; (8000858 <number7SEG+0x528>)
 8000808:	8891      	ldrh	r1, [r2, #4]
 800080a:	2200      	movs	r2, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f001 fa48 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <number7SEG+0x524>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <number7SEG+0x528>)
 8000818:	88d1      	ldrh	r1, [r2, #6]
 800081a:	2200      	movs	r2, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f001 fa40 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <number7SEG+0x524>)
 8000824:	691b      	ldr	r3, [r3, #16]
 8000826:	4a0c      	ldr	r2, [pc, #48]	; (8000858 <number7SEG+0x528>)
 8000828:	8911      	ldrh	r1, [r2, #8]
 800082a:	2201      	movs	r2, #1
 800082c:	4618      	mov	r0, r3
 800082e:	f001 fa38 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <number7SEG+0x524>)
 8000834:	695b      	ldr	r3, [r3, #20]
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <number7SEG+0x528>)
 8000838:	8951      	ldrh	r1, [r2, #10]
 800083a:	2200      	movs	r2, #0
 800083c:	4618      	mov	r0, r3
 800083e:	f001 fa30 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <number7SEG+0x524>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a04      	ldr	r2, [pc, #16]	; (8000858 <number7SEG+0x528>)
 8000848:	8991      	ldrh	r1, [r2, #12]
 800084a:	2200      	movs	r2, #0
 800084c:	4618      	mov	r0, r3
 800084e:	f001 fa28 	bl	8001ca2 <HAL_GPIO_WritePin>
	        break;
 8000852:	e03c      	b.n	80008ce <number7SEG+0x59e>
 8000854:	20000000 	.word	0x20000000
 8000858:	2000001c 	.word	0x2000001c
	    default:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <number7SEG+0x5a8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a1e      	ldr	r2, [pc, #120]	; (80008dc <number7SEG+0x5ac>)
 8000862:	8811      	ldrh	r1, [r2, #0]
 8000864:	2201      	movs	r2, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fa1b 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 800086c:	4b1a      	ldr	r3, [pc, #104]	; (80008d8 <number7SEG+0x5a8>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	4a1a      	ldr	r2, [pc, #104]	; (80008dc <number7SEG+0x5ac>)
 8000872:	8851      	ldrh	r1, [r2, #2]
 8000874:	2201      	movs	r2, #1
 8000876:	4618      	mov	r0, r3
 8000878:	f001 fa13 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 800087c:	4b16      	ldr	r3, [pc, #88]	; (80008d8 <number7SEG+0x5a8>)
 800087e:	689b      	ldr	r3, [r3, #8]
 8000880:	4a16      	ldr	r2, [pc, #88]	; (80008dc <number7SEG+0x5ac>)
 8000882:	8891      	ldrh	r1, [r2, #4]
 8000884:	2201      	movs	r2, #1
 8000886:	4618      	mov	r0, r3
 8000888:	f001 fa0b 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <number7SEG+0x5a8>)
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	4a12      	ldr	r2, [pc, #72]	; (80008dc <number7SEG+0x5ac>)
 8000892:	88d1      	ldrh	r1, [r2, #6]
 8000894:	2201      	movs	r2, #1
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fa03 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800089c:	4b0e      	ldr	r3, [pc, #56]	; (80008d8 <number7SEG+0x5a8>)
 800089e:	691b      	ldr	r3, [r3, #16]
 80008a0:	4a0e      	ldr	r2, [pc, #56]	; (80008dc <number7SEG+0x5ac>)
 80008a2:	8911      	ldrh	r1, [r2, #8]
 80008a4:	2201      	movs	r2, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f001 f9fb 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 80008ac:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <number7SEG+0x5a8>)
 80008ae:	695b      	ldr	r3, [r3, #20]
 80008b0:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <number7SEG+0x5ac>)
 80008b2:	8951      	ldrh	r1, [r2, #10]
 80008b4:	2201      	movs	r2, #1
 80008b6:	4618      	mov	r0, r3
 80008b8:	f001 f9f3 	bl	8001ca2 <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <number7SEG+0x5a8>)
 80008be:	699b      	ldr	r3, [r3, #24]
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <number7SEG+0x5ac>)
 80008c2:	8991      	ldrh	r1, [r2, #12]
 80008c4:	2200      	movs	r2, #0
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 f9eb 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
};
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20000000 	.word	0x20000000
 80008dc:	2000001c 	.word	0x2000001c

080008e0 <fsm_run>:
#include "display7seg.h"
#include "software_timer.h"

extern traffic_way main_traffic, side_traffic;

void fsm_run(machine_state mode){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 80008ea:	79fb      	ldrb	r3, [r7, #7]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d844      	bhi.n	800097a <fsm_run+0x9a>
 80008f0:	a201      	add	r2, pc, #4	; (adr r2, 80008f8 <fsm_run+0x18>)
 80008f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f6:	bf00      	nop
 80008f8:	08000909 	.word	0x08000909
 80008fc:	0800097b 	.word	0x0800097b
 8000900:	0800097b 	.word	0x0800097b
 8000904:	0800097b 	.word	0x0800097b
	case mode1:// run normally
		fsm_traffic(&t_mode_main, &main_traffic, &timer_flag[6], 0);
 8000908:	2300      	movs	r3, #0
 800090a:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <fsm_run+0xa8>)
 800090c:	491f      	ldr	r1, [pc, #124]	; (800098c <fsm_run+0xac>)
 800090e:	4820      	ldr	r0, [pc, #128]	; (8000990 <fsm_run+0xb0>)
 8000910:	f000 fd88 	bl	8001424 <fsm_traffic>
		fsm_traffic(&t_mode_side, &side_traffic, &timer_flag[7], 1);
 8000914:	2301      	movs	r3, #1
 8000916:	4a1f      	ldr	r2, [pc, #124]	; (8000994 <fsm_run+0xb4>)
 8000918:	491f      	ldr	r1, [pc, #124]	; (8000998 <fsm_run+0xb8>)
 800091a:	4820      	ldr	r0, [pc, #128]	; (800099c <fsm_run+0xbc>)
 800091c:	f000 fd82 	bl	8001424 <fsm_traffic>
		if(timer_flag[4] == 1){
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <fsm_run+0xc0>)
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	2b01      	cmp	r3, #1
 8000926:	d10f      	bne.n	8000948 <fsm_run+0x68>
			HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 8000928:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092c:	481d      	ldr	r0, [pc, #116]	; (80009a4 <fsm_run+0xc4>)
 800092e:	f001 f9d0 	bl	8001cd2 <HAL_GPIO_TogglePin>
			countDown7SEG(0);
 8000932:	2000      	movs	r0, #0
 8000934:	f7ff fce6 	bl	8000304 <countDown7SEG>
			countDown7SEG(1);
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fce3 	bl	8000304 <countDown7SEG>
			set_timer(1000, &timer_flag[4]);
 800093e:	491a      	ldr	r1, [pc, #104]	; (80009a8 <fsm_run+0xc8>)
 8000940:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000944:	f000 fb50 	bl	8000fe8 <set_timer>
		}
		if(timer_flag[5] == 1){
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <fsm_run+0xc0>)
 800094a:	795b      	ldrb	r3, [r3, #5]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d116      	bne.n	800097e <fsm_run+0x9e>
			if(led_index >= MAX_LED) led_index = 0;
 8000950:	4b16      	ldr	r3, [pc, #88]	; (80009ac <fsm_run+0xcc>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d902      	bls.n	800095e <fsm_run+0x7e>
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <fsm_run+0xcc>)
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
			display7SEG(led_index++);
 800095e:	4b13      	ldr	r3, [pc, #76]	; (80009ac <fsm_run+0xcc>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	1c5a      	adds	r2, r3, #1
 8000964:	b2d1      	uxtb	r1, r2
 8000966:	4a11      	ldr	r2, [pc, #68]	; (80009ac <fsm_run+0xcc>)
 8000968:	7011      	strb	r1, [r2, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f7ff fbee 	bl	800014c <display7SEG>
			set_timer(100, &timer_flag[5]);
 8000970:	490f      	ldr	r1, [pc, #60]	; (80009b0 <fsm_run+0xd0>)
 8000972:	2064      	movs	r0, #100	; 0x64
 8000974:	f000 fb38 	bl	8000fe8 <set_timer>
		}
		break;
 8000978:	e001      	b.n	800097e <fsm_run+0x9e>
	case mode4:

		break;
	default:

		break;
 800097a:	bf00      	nop
 800097c:	e000      	b.n	8000980 <fsm_run+0xa0>
		break;
 800097e:	bf00      	nop
	}
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200000da 	.word	0x200000da
 800098c:	2000002c 	.word	0x2000002c
 8000990:	20000100 	.word	0x20000100
 8000994:	200000db 	.word	0x200000db
 8000998:	20000034 	.word	0x20000034
 800099c:	20000040 	.word	0x20000040
 80009a0:	200000d4 	.word	0x200000d4
 80009a4:	40010c00 	.word	0x40010c00
 80009a8:	200000d8 	.word	0x200000d8
 80009ac:	200000dc 	.word	0x200000dc
 80009b0:	200000d9 	.word	0x200000d9

080009b4 <p_clockSet>:

#define P_CLOCK
#ifdef P_CLOCK
  int p_flag = 0;
  int p_dur  = 0;
  void p_clockSet(int dur){
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
	  p_flag = 0;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <p_clockSet+0x2c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
	  p_dur = dur / 10;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a07      	ldr	r2, [pc, #28]	; (80009e4 <p_clockSet+0x30>)
 80009c6:	fb82 1203 	smull	r1, r2, r2, r3
 80009ca:	1092      	asrs	r2, r2, #2
 80009cc:	17db      	asrs	r3, r3, #31
 80009ce:	1ad3      	subs	r3, r2, r3
 80009d0:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <p_clockSet+0x34>)
 80009d2:	6013      	str	r3, [r2, #0]

  }
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	200000cc 	.word	0x200000cc
 80009e4:	66666667 	.word	0x66666667
 80009e8:	200000d0 	.word	0x200000d0

080009ec <p_clockRun>:
  void p_clockRun(){
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
	  p_dur--;
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <p_clockRun+0x24>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	3b01      	subs	r3, #1
 80009f6:	4a06      	ldr	r2, [pc, #24]	; (8000a10 <p_clockRun+0x24>)
 80009f8:	6013      	str	r3, [r2, #0]
	  if(p_dur == 0) p_flag = 1;
 80009fa:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <p_clockRun+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d102      	bne.n	8000a08 <p_clockRun+0x1c>
 8000a02:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <p_clockRun+0x28>)
 8000a04:	2201      	movs	r2, #1
 8000a06:	601a      	str	r2, [r3, #0]
  }
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bc80      	pop	{r7}
 8000a0e:	4770      	bx	lr
 8000a10:	200000d0 	.word	0x200000d0
 8000a14:	200000cc 	.word	0x200000cc

08000a18 <fsm_for_input_processing>:
    BUTTON_PRESSED_MORE_THAN_1_SECOND
};

enum ButtonState buttonState = BUTTON_RELEASED;

void fsm_for_input_processing(void) {
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    switch (buttonState) {
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <fsm_for_input_processing+0x78>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	d024      	beq.n	8000a6e <fsm_for_input_processing+0x56>
 8000a24:	2b02      	cmp	r3, #2
 8000a26:	dc31      	bgt.n	8000a8c <fsm_for_input_processing+0x74>
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <fsm_for_input_processing+0x1a>
 8000a2c:	2b01      	cmp	r3, #1
 8000a2e:	d00a      	beq.n	8000a46 <fsm_for_input_processing+0x2e>
                buttonState = BUTTON_RELEASED;
            }
            // TODO: Add further functionality here
            break;
    }
}
 8000a30:	e02c      	b.n	8000a8c <fsm_for_input_processing+0x74>
            if (is_button_press(0)) {
 8000a32:	2000      	movs	r0, #0
 8000a34:	f000 f920 	bl	8000c78 <is_button_press>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d021      	beq.n	8000a82 <fsm_for_input_processing+0x6a>
                buttonState = BUTTON_PRESSED;
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <fsm_for_input_processing+0x78>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	701a      	strb	r2, [r3, #0]
            break;
 8000a44:	e01d      	b.n	8000a82 <fsm_for_input_processing+0x6a>
            if (!is_button_press(0)) {
 8000a46:	2000      	movs	r0, #0
 8000a48:	f000 f916 	bl	8000c78 <is_button_press>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d103      	bne.n	8000a5a <fsm_for_input_processing+0x42>
                buttonState = BUTTON_RELEASED;
 8000a52:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <fsm_for_input_processing+0x78>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
            break;
 8000a58:	e015      	b.n	8000a86 <fsm_for_input_processing+0x6e>
                if (is_button_hold(0)) {
 8000a5a:	2000      	movs	r0, #0
 8000a5c:	f000 f926 	bl	8000cac <is_button_hold>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d00f      	beq.n	8000a86 <fsm_for_input_processing+0x6e>
                    buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 8000a66:	4b0a      	ldr	r3, [pc, #40]	; (8000a90 <fsm_for_input_processing+0x78>)
 8000a68:	2202      	movs	r2, #2
 8000a6a:	701a      	strb	r2, [r3, #0]
            break;
 8000a6c:	e00b      	b.n	8000a86 <fsm_for_input_processing+0x6e>
            if (!is_button_press(0)) {
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f000 f902 	bl	8000c78 <is_button_press>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d107      	bne.n	8000a8a <fsm_for_input_processing+0x72>
                buttonState = BUTTON_RELEASED;
 8000a7a:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <fsm_for_input_processing+0x78>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
            break;
 8000a80:	e003      	b.n	8000a8a <fsm_for_input_processing+0x72>
            break;
 8000a82:	bf00      	nop
 8000a84:	e002      	b.n	8000a8c <fsm_for_input_processing+0x74>
            break;
 8000a86:	bf00      	nop
 8000a88:	e000      	b.n	8000a8c <fsm_for_input_processing+0x74>
            break;
 8000a8a:	bf00      	nop
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	200000de 	.word	0x200000de

08000a94 <button_pin_read>:
static GPIO_PinState debounceButtonBuffer2[NUMBER_OF_BUTTONS];
//counter
static uint16_t counterForButtonHold[NUMBER_OF_BUTTONS];
static uint16_t counterForButtonRelease[NUMBER_OF_BUTTONS];

GPIO_PinState button_pin_read(uint8_t index){//this is no good
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d012      	beq.n	8000aca <button_pin_read+0x36>
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	dc16      	bgt.n	8000ad6 <button_pin_read+0x42>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <button_pin_read+0x1e>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d006      	beq.n	8000abe <button_pin_read+0x2a>
		break;
	case 2:
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
		break;
	default:
		break;
 8000ab0:	e011      	b.n	8000ad6 <button_pin_read+0x42>
		return HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000ab2:	2101      	movs	r1, #1
 8000ab4:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <button_pin_read+0x50>)
 8000ab6:	f001 f8dd 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000aba:	4603      	mov	r3, r0
 8000abc:	e00d      	b.n	8000ada <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000abe:	2102      	movs	r1, #2
 8000ac0:	4808      	ldr	r0, [pc, #32]	; (8000ae4 <button_pin_read+0x50>)
 8000ac2:	f001 f8d7 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	e007      	b.n	8000ada <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000aca:	2104      	movs	r1, #4
 8000acc:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <button_pin_read+0x50>)
 8000ace:	f001 f8d1 	bl	8001c74 <HAL_GPIO_ReadPin>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	e001      	b.n	8000ada <button_pin_read+0x46>
		break;
 8000ad6:	bf00      	nop
	}
	return SET;
 8000ad8:	2301      	movs	r3, #1
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40010800 	.word	0x40010800

08000ae8 <button_reading>:

void button_reading() {
 8000ae8:	b590      	push	{r4, r7, lr}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	71fb      	strb	r3, [r7, #7]
 8000af2:	e0a3      	b.n	8000c3c <button_reading+0x154>
    	//DEBOUNCE
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000af4:	79fa      	ldrb	r2, [r7, #7]
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	4955      	ldr	r1, [pc, #340]	; (8000c50 <button_reading+0x168>)
 8000afa:	5c89      	ldrb	r1, [r1, r2]
 8000afc:	4a55      	ldr	r2, [pc, #340]	; (8000c54 <button_reading+0x16c>)
 8000afe:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = button_pin_read(i);
 8000b00:	79fc      	ldrb	r4, [r7, #7]
 8000b02:	79fb      	ldrb	r3, [r7, #7]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff ffc5 	bl	8000a94 <button_pin_read>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	4b50      	ldr	r3, [pc, #320]	; (8000c50 <button_reading+0x168>)
 8000b10:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <button_reading+0x168>)
 8000b16:	5cd2      	ldrb	r2, [r2, r3]
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	494e      	ldr	r1, [pc, #312]	; (8000c54 <button_reading+0x16c>)
 8000b1c:	5ccb      	ldrb	r3, [r1, r3]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d105      	bne.n	8000b2e <button_reading+0x46>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8000b22:	79fa      	ldrb	r2, [r7, #7]
 8000b24:	79fb      	ldrb	r3, [r7, #7]
 8000b26:	494a      	ldr	r1, [pc, #296]	; (8000c50 <button_reading+0x168>)
 8000b28:	5c89      	ldrb	r1, [r1, r2]
 8000b2a:	4a4b      	ldr	r2, [pc, #300]	; (8000c58 <button_reading+0x170>)
 8000b2c:	54d1      	strb	r1, [r2, r3]

        //UPDATE COUNTER
        if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	4a49      	ldr	r2, [pc, #292]	; (8000c58 <button_reading+0x170>)
 8000b32:	5cd3      	ldrb	r3, [r2, r3]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d113      	bne.n	8000b60 <button_reading+0x78>
        	counterForButtonRelease[i] = 0;
 8000b38:	79fb      	ldrb	r3, [r7, #7]
 8000b3a:	4a48      	ldr	r2, [pc, #288]	; (8000c5c <button_reading+0x174>)
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonHold[i] < HOLD_TIME) counterForButtonHold[i]++;
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	4a46      	ldr	r2, [pc, #280]	; (8000c60 <button_reading+0x178>)
 8000b46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b4a:	2b63      	cmp	r3, #99	; 0x63
 8000b4c:	d808      	bhi.n	8000b60 <button_reading+0x78>
 8000b4e:	79fb      	ldrb	r3, [r7, #7]
 8000b50:	4a43      	ldr	r2, [pc, #268]	; (8000c60 <button_reading+0x178>)
 8000b52:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b56:	3201      	adds	r2, #1
 8000b58:	b291      	uxth	r1, r2
 8000b5a:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <button_reading+0x178>)
 8000b5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        if(buttonBuffer[i] == BUTTON_IS_RELEASED){
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	4a3d      	ldr	r2, [pc, #244]	; (8000c58 <button_reading+0x170>)
 8000b64:	5cd3      	ldrb	r3, [r2, r3]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d113      	bne.n	8000b92 <button_reading+0xaa>
        	counterForButtonHold[i] = 0;
 8000b6a:	79fb      	ldrb	r3, [r7, #7]
 8000b6c:	4a3c      	ldr	r2, [pc, #240]	; (8000c60 <button_reading+0x178>)
 8000b6e:	2100      	movs	r1, #0
 8000b70:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonRelease[i] < RELEASE_TIME) counterForButtonRelease[i]++;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	4a39      	ldr	r2, [pc, #228]	; (8000c5c <button_reading+0x174>)
 8000b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b7c:	2b07      	cmp	r3, #7
 8000b7e:	d808      	bhi.n	8000b92 <button_reading+0xaa>
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a36      	ldr	r2, [pc, #216]	; (8000c5c <button_reading+0x174>)
 8000b84:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b88:	3201      	adds	r2, #1
 8000b8a:	b291      	uxth	r1, r2
 8000b8c:	4a33      	ldr	r2, [pc, #204]	; (8000c5c <button_reading+0x174>)
 8000b8e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        //RECOGNIZE
        if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	4a30      	ldr	r2, [pc, #192]	; (8000c58 <button_reading+0x170>)
 8000b96:	5cd3      	ldrb	r3, [r2, r3]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d125      	bne.n	8000be8 <button_reading+0x100>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){//Press or Hold
 8000b9c:	79fb      	ldrb	r3, [r7, #7]
 8000b9e:	4a2f      	ldr	r2, [pc, #188]	; (8000c5c <button_reading+0x174>)
 8000ba0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba4:	2b07      	cmp	r3, #7
 8000ba6:	d90f      	bls.n	8000bc8 <button_reading+0xe0>
        		if(counterForButtonHold[i] < HOLD_TIME){//Press
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	4a2d      	ldr	r2, [pc, #180]	; (8000c60 <button_reading+0x178>)
 8000bac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bb0:	2b63      	cmp	r3, #99	; 0x63
 8000bb2:	d804      	bhi.n	8000bbe <button_reading+0xd6>
        			flagForButtonPress[i] = 1;
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a2b      	ldr	r2, [pc, #172]	; (8000c64 <button_reading+0x17c>)
 8000bb8:	2101      	movs	r1, #1
 8000bba:	54d1      	strb	r1, [r2, r3]
 8000bbc:	e024      	b.n	8000c08 <button_reading+0x120>
        		}
        		else{//Hold
        			flagForButtonHold[i] = 1;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
 8000bc0:	4a29      	ldr	r2, [pc, #164]	; (8000c68 <button_reading+0x180>)
 8000bc2:	2101      	movs	r1, #1
 8000bc4:	54d1      	strb	r1, [r2, r3]
 8000bc6:	e01f      	b.n	8000c08 <button_reading+0x120>
        		}
        	}
        	else{//Double Tap or Tap Hold
        		if(counterForButtonHold[i] < HOLD_TIME){//Double Tap
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a25      	ldr	r2, [pc, #148]	; (8000c60 <button_reading+0x178>)
 8000bcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd0:	2b63      	cmp	r3, #99	; 0x63
 8000bd2:	d804      	bhi.n	8000bde <button_reading+0xf6>
        			flagForButtonDoubleTap[i] = 1;
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <button_reading+0x184>)
 8000bd8:	2101      	movs	r1, #1
 8000bda:	54d1      	strb	r1, [r2, r3]
 8000bdc:	e014      	b.n	8000c08 <button_reading+0x120>
        		}
        		else{//Tap Hold
        			flagForButtonTapHold[i] = 1;
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <button_reading+0x188>)
 8000be2:	2101      	movs	r1, #1
 8000be4:	54d1      	strb	r1, [r2, r3]
 8000be6:	e00f      	b.n	8000c08 <button_reading+0x120>
        		}
        	}
        }
        else{//button idle
        	flagForButtonPress[i] = 0;
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	4a1e      	ldr	r2, [pc, #120]	; (8000c64 <button_reading+0x17c>)
 8000bec:	2100      	movs	r1, #0
 8000bee:	54d1      	strb	r1, [r2, r3]
        	flagForButtonHold[i] = 0;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4a1d      	ldr	r2, [pc, #116]	; (8000c68 <button_reading+0x180>)
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	54d1      	strb	r1, [r2, r3]
        	flagForButtonDoubleTap[i] = 0;
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <button_reading+0x184>)
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	54d1      	strb	r1, [r2, r3]
        	flagForButtonTapHold[i] = 0;
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	4a1b      	ldr	r2, [pc, #108]	; (8000c70 <button_reading+0x188>)
 8000c04:	2100      	movs	r1, #0
 8000c06:	54d1      	strb	r1, [r2, r3]
        }
#ifdef UNIT_TEST
        if(i == 0) test_button = 0;
 8000c08:	79fb      	ldrb	r3, [r7, #7]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d102      	bne.n	8000c14 <button_reading+0x12c>
 8000c0e:	4b19      	ldr	r3, [pc, #100]	; (8000c74 <button_reading+0x18c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	701a      	strb	r2, [r3, #0]
        test_button = test_button | !buttonBuffer[i];
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	4a10      	ldr	r2, [pc, #64]	; (8000c58 <button_reading+0x170>)
 8000c18:	5cd3      	ldrb	r3, [r2, r3]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	bf0c      	ite	eq
 8000c1e:	2301      	moveq	r3, #1
 8000c20:	2300      	movne	r3, #0
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	b25a      	sxtb	r2, r3
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <button_reading+0x18c>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	b25b      	sxtb	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b25b      	sxtb	r3, r3
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b10      	ldr	r3, [pc, #64]	; (8000c74 <button_reading+0x18c>)
 8000c34:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++) {
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	71fb      	strb	r3, [r7, #7]
 8000c3c:	79fb      	ldrb	r3, [r7, #7]
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	f67f af58 	bls.w	8000af4 <button_reading+0xc>
#endif
    }
}
 8000c44:	bf00      	nop
 8000c46:	bf00      	nop
 8000c48:	370c      	adds	r7, #12
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd90      	pop	{r4, r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000e4 	.word	0x200000e4
 8000c54:	200000e8 	.word	0x200000e8
 8000c58:	200000e0 	.word	0x200000e0
 8000c5c:	200000f4 	.word	0x200000f4
 8000c60:	200000ec 	.word	0x200000ec
 8000c64:	20000438 	.word	0x20000438
 8000c68:	20000430 	.word	0x20000430
 8000c6c:	2000010c 	.word	0x2000010c
 8000c70:	20000468 	.word	0x20000468
 8000c74:	200000df 	.word	0x200000df

08000c78 <is_button_press>:

unsigned char is_button_press(unsigned char index) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	71fb      	strb	r3, [r7, #7]
    if (index >= NUMBER_OF_BUTTONS)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d901      	bls.n	8000c8c <is_button_press+0x14>
        return 0;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	e007      	b.n	8000c9c <is_button_press+0x24>
    return (flagForButtonPress[index] == 1);
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	4a06      	ldr	r2, [pc, #24]	; (8000ca8 <is_button_press+0x30>)
 8000c90:	5cd3      	ldrb	r3, [r2, r3]
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bc80      	pop	{r7}
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	20000438 	.word	0x20000438

08000cac <is_button_hold>:

unsigned char is_button_hold(unsigned char index) {
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
    if (index >= NUMBER_OF_BUTTONS)
 8000cb6:	79fb      	ldrb	r3, [r7, #7]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d901      	bls.n	8000cc0 <is_button_hold+0x14>
        return 0;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	e007      	b.n	8000cd0 <is_button_hold+0x24>
    return (flagForButtonHold[index] == 1);
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	4a06      	ldr	r2, [pc, #24]	; (8000cdc <is_button_hold+0x30>)
 8000cc4:	5cd3      	ldrb	r3, [r2, r3]
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	bf0c      	ite	eq
 8000cca:	2301      	moveq	r3, #1
 8000ccc:	2300      	movne	r3, #0
 8000cce:	b2db      	uxtb	r3, r3
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	20000430 	.word	0x20000430

08000ce0 <unit_test_button_read>:
        return 0;
    return (flagForButtonTapHold[index] == 1);
}

#ifdef UNIT_TEST
void unit_test_button_read(){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
	if(test_button == 1) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, RESET);
 8000ce4:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <unit_test_button_read+0x30>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d105      	bne.n	8000cf8 <unit_test_button_read+0x18>
 8000cec:	2200      	movs	r2, #0
 8000cee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf2:	4808      	ldr	r0, [pc, #32]	; (8000d14 <unit_test_button_read+0x34>)
 8000cf4:	f000 ffd5 	bl	8001ca2 <HAL_GPIO_WritePin>
	if(test_button == 0) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, SET);
 8000cf8:	4b05      	ldr	r3, [pc, #20]	; (8000d10 <unit_test_button_read+0x30>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d105      	bne.n	8000d0c <unit_test_button_read+0x2c>
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	4803      	ldr	r0, [pc, #12]	; (8000d14 <unit_test_button_read+0x34>)
 8000d08:	f000 ffcb 	bl	8001ca2 <HAL_GPIO_WritePin>
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	200000df 	.word	0x200000df
 8000d14:	40010800 	.word	0x40010800

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fcc0 	bl	80016a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f872 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 f8f8 	bl	8000f18 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000d28:	f000 f8aa 	bl	8000e80 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000d2c:	4829      	ldr	r0, [pc, #164]	; (8000dd4 <main+0xbc>)
 8000d2e:	f001 fc15 	bl	800255c <HAL_TIM_Base_Start_IT>

//#define P_CLOCK
#ifdef P_CLOCK
  p_clockSet(1000);
 8000d32:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d36:	f7ff fe3d 	bl	80009b4 <p_clockSet>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_timer(1000, &timer_flag[0]);
 8000d3a:	4927      	ldr	r1, [pc, #156]	; (8000dd8 <main+0xc0>)
 8000d3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d40:	f000 f952 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[1]);
 8000d44:	4925      	ldr	r1, [pc, #148]	; (8000ddc <main+0xc4>)
 8000d46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d4a:	f000 f94d 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[2]);
 8000d4e:	4924      	ldr	r1, [pc, #144]	; (8000de0 <main+0xc8>)
 8000d50:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d54:	f000 f948 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[3]);
 8000d58:	4922      	ldr	r1, [pc, #136]	; (8000de4 <main+0xcc>)
 8000d5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5e:	f000 f943 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[4]);
 8000d62:	4921      	ldr	r1, [pc, #132]	; (8000de8 <main+0xd0>)
 8000d64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d68:	f000 f93e 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[5]);
 8000d6c:	491f      	ldr	r1, [pc, #124]	; (8000dec <main+0xd4>)
 8000d6e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d72:	f000 f939 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[6]);
 8000d76:	491e      	ldr	r1, [pc, #120]	; (8000df0 <main+0xd8>)
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f000 f934 	bl	8000fe8 <set_timer>
  set_timer(1000, &timer_flag[7]);
 8000d80:	491c      	ldr	r1, [pc, #112]	; (8000df4 <main+0xdc>)
 8000d82:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d86:	f000 f92f 	bl	8000fe8 <set_timer>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  timer_run();
 8000d8a:	f000 fa49 	bl	8001220 <timer_run>
	  // UNIT TEST
#ifdef P_CLOCK
	  if(p_flag == 1){
 8000d8e:	4b1a      	ldr	r3, [pc, #104]	; (8000df8 <main+0xe0>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	2b01      	cmp	r3, #1
 8000d94:	d112      	bne.n	8000dbc <main+0xa4>
		  HAL_GPIO_TogglePin(TEST_Timer_GPIO_Port, TEST_Timer_Pin);
 8000d96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d9a:	4818      	ldr	r0, [pc, #96]	; (8000dfc <main+0xe4>)
 8000d9c:	f000 ff99 	bl	8001cd2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(TEST_Button_GPIO_Port, TEST_Button_Pin);
 8000da0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da4:	4815      	ldr	r0, [pc, #84]	; (8000dfc <main+0xe4>)
 8000da6:	f000 ff94 	bl	8001cd2 <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
 8000daa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dae:	4814      	ldr	r0, [pc, #80]	; (8000e00 <main+0xe8>)
 8000db0:	f000 ff8f 	bl	8001cd2 <HAL_GPIO_TogglePin>
		  p_clockSet(1000);
 8000db4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000db8:	f7ff fdfc 	bl	80009b4 <p_clockSet>
	  }
#endif

	  unit_test_software_timer();
 8000dbc:	f000 fa58 	bl	8001270 <unit_test_software_timer>
//	  unit_test_7seg();
	  unit_test_button_read();
 8000dc0:	f7ff ff8e 	bl	8000ce0 <unit_test_button_read>

	  // FSM
	  fsm_for_input_processing();
 8000dc4:	f7ff fe28 	bl	8000a18 <fsm_for_input_processing>
	  fsm_run(m_mode);
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <main+0xec>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fd87 	bl	80008e0 <fsm_run>
	  timer_run();
 8000dd2:	e7da      	b.n	8000d8a <main+0x72>
 8000dd4:	2000046c 	.word	0x2000046c
 8000dd8:	200000d4 	.word	0x200000d4
 8000ddc:	200000d5 	.word	0x200000d5
 8000de0:	200000d6 	.word	0x200000d6
 8000de4:	200000d7 	.word	0x200000d7
 8000de8:	200000d8 	.word	0x200000d8
 8000dec:	200000d9 	.word	0x200000d9
 8000df0:	200000da 	.word	0x200000da
 8000df4:	200000db 	.word	0x200000db
 8000df8:	200000cc 	.word	0x200000cc
 8000dfc:	40010800 	.word	0x40010800
 8000e00:	40010c00 	.word	0x40010c00
 8000e04:	200000dd 	.word	0x200000dd

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	; 0x40
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	2228      	movs	r2, #40	; 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 ff66 	bl	8002ce8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e32:	2310      	movs	r3, #16
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3a:	f107 0318 	add.w	r3, r7, #24
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f000 ff60 	bl	8001d04 <HAL_RCC_OscConfig>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000e4a:	f000 f8c7 	bl	8000fdc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e4e:	230f      	movs	r3, #15
 8000e50:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e52:	2300      	movs	r3, #0
 8000e54:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e56:	2300      	movs	r3, #0
 8000e58:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e62:	1d3b      	adds	r3, r7, #4
 8000e64:	2100      	movs	r1, #0
 8000e66:	4618      	mov	r0, r3
 8000e68:	f001 f9cc 	bl	8002204 <HAL_RCC_ClockConfig>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d001      	beq.n	8000e76 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e72:	f000 f8b3 	bl	8000fdc <Error_Handler>
  }
}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	; 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
	...

08000e80 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e94:	463b      	mov	r3, r7
 8000e96:	2200      	movs	r2, #0
 8000e98:	601a      	str	r2, [r3, #0]
 8000e9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e9c:	4b1d      	ldr	r3, [pc, #116]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000e9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000ea4:	4b1b      	ldr	r3, [pc, #108]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ea6:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000eaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000eb2:	4b18      	ldr	r3, [pc, #96]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eb4:	2209      	movs	r2, #9
 8000eb6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb8:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ec6:	f001 faf9 	bl	80024bc <HAL_TIM_Base_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ed0:	f000 f884 	bl	8000fdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ed4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ed8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480c      	ldr	r0, [pc, #48]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000ee2:	f001 fc77 	bl	80027d4 <HAL_TIM_ConfigClockSource>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000eec:	f000 f876 	bl	8000fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ef8:	463b      	mov	r3, r7
 8000efa:	4619      	mov	r1, r3
 8000efc:	4805      	ldr	r0, [pc, #20]	; (8000f14 <MX_TIM2_Init+0x94>)
 8000efe:	f001 fe4f 	bl	8002ba0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000f08:	f000 f868 	bl	8000fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f0c:	bf00      	nop
 8000f0e:	3718      	adds	r7, #24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000046c 	.word	0x2000046c

08000f18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	f107 0308 	add.w	r3, r7, #8
 8000f22:	2200      	movs	r2, #0
 8000f24:	601a      	str	r2, [r3, #0]
 8000f26:	605a      	str	r2, [r3, #4]
 8000f28:	609a      	str	r2, [r3, #8]
 8000f2a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2c:	4b28      	ldr	r3, [pc, #160]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	4a27      	ldr	r2, [pc, #156]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f32:	f043 0304 	orr.w	r3, r3, #4
 8000f36:	6193      	str	r3, [r2, #24]
 8000f38:	4b25      	ldr	r3, [pc, #148]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f3a:	699b      	ldr	r3, [r3, #24]
 8000f3c:	f003 0304 	and.w	r3, r3, #4
 8000f40:	607b      	str	r3, [r7, #4]
 8000f42:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b22      	ldr	r3, [pc, #136]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a21      	ldr	r2, [pc, #132]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b1f      	ldr	r3, [pc, #124]	; (8000fd0 <MX_GPIO_Init+0xb8>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000f62:	481c      	ldr	r0, [pc, #112]	; (8000fd4 <MX_GPIO_Init+0xbc>)
 8000f64:	f000 fe9d 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|TEST_Pin
 8000f68:	2200      	movs	r2, #0
 8000f6a:	f248 013f 	movw	r1, #32831	; 0x803f
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <MX_GPIO_Init+0xc0>)
 8000f70:	f000 fe97 	bl	8001ca2 <HAL_GPIO_WritePin>
                          |LED1_R_Pin|LED1_Y_Pin|LED1_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000f74:	2307      	movs	r3, #7
 8000f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f80:	f107 0308 	add.w	r3, r7, #8
 8000f84:	4619      	mov	r1, r3
 8000f86:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <MX_GPIO_Init+0xbc>)
 8000f88:	f000 fcfa 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin TEST_Timer_Pin
                           TEST_Button_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000f8c:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000f90:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f92:	2301      	movs	r3, #1
 8000f94:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0308 	add.w	r3, r7, #8
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <MX_GPIO_Init+0xbc>)
 8000fa6:	f000 fceb 	bl	8001980 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_R_Pin LED0_Y_Pin LED0_G_Pin TEST_Pin
                           LED1_R_Pin LED1_Y_Pin LED1_G_Pin */
  GPIO_InitStruct.Pin = LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|TEST_Pin
 8000faa:	f248 033f 	movw	r3, #32831	; 0x803f
 8000fae:	60bb      	str	r3, [r7, #8]
                          |LED1_R_Pin|LED1_Y_Pin|LED1_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb8:	2302      	movs	r3, #2
 8000fba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fbc:	f107 0308 	add.w	r3, r7, #8
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_GPIO_Init+0xc0>)
 8000fc4:	f000 fcdc 	bl	8001980 <HAL_GPIO_Init>

}
 8000fc8:	bf00      	nop
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	40021000 	.word	0x40021000
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00

08000fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe4:	e7fe      	b.n	8000fe4 <Error_Handler+0x8>
	...

08000fe8 <set_timer>:
#include "stdlib.h"
#include "global.h"

uint8_t  currentTimerSlotWheel1 = 0, currentTimerSlotWheel2 = 0;

void set_timer(uint32_t duration, uint8_t* timer_flag){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b084      	sub	sp, #16
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
	*timer_flag = 0;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	701a      	strb	r2, [r3, #0]
	Timer* newTimer = (Timer*)malloc(sizeof(Timer));
 8000ff8:	200c      	movs	r0, #12
 8000ffa:	f001 fe65 	bl	8002cc8 <malloc>
 8000ffe:	4603      	mov	r3, r0
 8001000:	60fb      	str	r3, [r7, #12]
	if (newTimer == NULL) return;
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d049      	beq.n	800109c <set_timer+0xb4>
	newTimer->duration = duration;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	b29a      	uxth	r2, r3
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	801a      	strh	r2, [r3, #0]
	newTimer->timer_flag = timer_flag;
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	605a      	str	r2, [r3, #4]
	if(duration / TIMER_CYCLE >= WHEEL1){// assign to wheel 2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800101c:	d320      	bcc.n	8001060 <set_timer+0x78>
		uint8_t newTimerSlot = (currentTimerSlotWheel2 + (duration / TIMER_CYCLE) / WHEEL1) % WHEEL2;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <set_timer+0xbc>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	4619      	mov	r1, r3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a20      	ldr	r2, [pc, #128]	; (80010a8 <set_timer+0xc0>)
 8001028:	fba2 2303 	umull	r2, r3, r2, r3
 800102c:	099b      	lsrs	r3, r3, #6
 800102e:	4419      	add	r1, r3
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <set_timer+0xc4>)
 8001032:	fba3 2301 	umull	r2, r3, r3, r1
 8001036:	099a      	lsrs	r2, r3, #6
 8001038:	4613      	mov	r3, r2
 800103a:	005b      	lsls	r3, r3, #1
 800103c:	4413      	add	r3, r2
 800103e:	015a      	lsls	r2, r3, #5
 8001040:	4413      	add	r3, r2
 8001042:	1aca      	subs	r2, r1, r3
 8001044:	4613      	mov	r3, r2
 8001046:	72bb      	strb	r3, [r7, #10]
		newTimer->next = timerWheel2[newTimerSlot];
 8001048:	7abb      	ldrb	r3, [r7, #10]
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <set_timer+0xc8>)
 800104c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	609a      	str	r2, [r3, #8]
		timerWheel2[newTimerSlot] = newTimer;
 8001054:	7abb      	ldrb	r3, [r7, #10]
 8001056:	4916      	ldr	r1, [pc, #88]	; (80010b0 <set_timer+0xc8>)
 8001058:	68fa      	ldr	r2, [r7, #12]
 800105a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800105e:	e01e      	b.n	800109e <set_timer+0xb6>
	}
	else{// assign to wheel 1
		uint8_t newTimerSlot = (currentTimerSlotWheel1 + duration / TIMER_CYCLE) % WHEEL1;
 8001060:	4b14      	ldr	r3, [pc, #80]	; (80010b4 <set_timer+0xcc>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <set_timer+0xd0>)
 800106a:	fba2 2303 	umull	r2, r3, r2, r3
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	18ca      	adds	r2, r1, r3
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <set_timer+0xd4>)
 8001074:	fba3 1302 	umull	r1, r3, r3, r2
 8001078:	095b      	lsrs	r3, r3, #5
 800107a:	2164      	movs	r1, #100	; 0x64
 800107c:	fb01 f303 	mul.w	r3, r1, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	72fb      	strb	r3, [r7, #11]
		newTimer->next = timerWheel1[newTimerSlot];
 8001084:	7afb      	ldrb	r3, [r7, #11]
 8001086:	4a0e      	ldr	r2, [pc, #56]	; (80010c0 <set_timer+0xd8>)
 8001088:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	609a      	str	r2, [r3, #8]
		timerWheel1[newTimerSlot] = newTimer;
 8001090:	7afb      	ldrb	r3, [r7, #11]
 8001092:	490b      	ldr	r1, [pc, #44]	; (80010c0 <set_timer+0xd8>)
 8001094:	68fa      	ldr	r2, [r7, #12]
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800109a:	e000      	b.n	800109e <set_timer+0xb6>
	if (newTimer == NULL) return;
 800109c:	bf00      	nop
	}
}
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200000fb 	.word	0x200000fb
 80010a8:	10624dd3 	.word	0x10624dd3
 80010ac:	a57eb503 	.word	0xa57eb503
 80010b0:	200002a4 	.word	0x200002a4
 80010b4:	200000fa 	.word	0x200000fa
 80010b8:	cccccccd 	.word	0xcccccccd
 80010bc:	51eb851f 	.word	0x51eb851f
 80010c0:	20000110 	.word	0x20000110

080010c4 <timer_tick>:

void timer_tick(){
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0
    if (currentTimerSlotWheel1 == 0){
 80010ca:	4b4d      	ldr	r3, [pc, #308]	; (8001200 <timer_tick+0x13c>)
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d162      	bne.n	8001198 <timer_tick+0xd4>
        Timer* processTimer = timerWheel2[currentTimerSlotWheel2];
 80010d2:	4b4c      	ldr	r3, [pc, #304]	; (8001204 <timer_tick+0x140>)
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	461a      	mov	r2, r3
 80010d8:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <timer_tick+0x144>)
 80010da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010de:	617b      	str	r3, [r7, #20]
        while (processTimer != NULL){
 80010e0:	e03d      	b.n	800115e <timer_tick+0x9a>
            uint8_t newTimerSlot = (processTimer->duration / TIMER_CYCLE) % WHEEL1;
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4a49      	ldr	r2, [pc, #292]	; (800120c <timer_tick+0x148>)
 80010e8:	fba2 2303 	umull	r2, r3, r2, r3
 80010ec:	08db      	lsrs	r3, r3, #3
 80010ee:	b29b      	uxth	r3, r3
 80010f0:	4a47      	ldr	r2, [pc, #284]	; (8001210 <timer_tick+0x14c>)
 80010f2:	fba2 1203 	umull	r1, r2, r2, r3
 80010f6:	0952      	lsrs	r2, r2, #5
 80010f8:	2164      	movs	r1, #100	; 0x64
 80010fa:	fb01 f202 	mul.w	r2, r1, r2
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	b29b      	uxth	r3, r3
 8001102:	73fb      	strb	r3, [r7, #15]
            Timer* newTimer = (Timer*)malloc(sizeof(Timer));
 8001104:	200c      	movs	r0, #12
 8001106:	f001 fddf 	bl	8002cc8 <malloc>
 800110a:	4603      	mov	r3, r0
 800110c:	60bb      	str	r3, [r7, #8]
            if (newTimer == NULL) return;
 800110e:	68bb      	ldr	r3, [r7, #8]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d070      	beq.n	80011f6 <timer_tick+0x132>
            newTimer->duration = processTimer->duration % (WHEEL1 * TIMER_CYCLE);
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <timer_tick+0x150>)
 800111a:	fba2 1203 	umull	r1, r2, r2, r3
 800111e:	0992      	lsrs	r2, r2, #6
 8001120:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001124:	fb01 f202 	mul.w	r2, r1, r2
 8001128:	1a9b      	subs	r3, r3, r2
 800112a:	b29a      	uxth	r2, r3
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	801a      	strh	r2, [r3, #0]
            newTimer->timer_flag = processTimer->timer_flag;
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	605a      	str	r2, [r3, #4]
            newTimer->next = timerWheel1[newTimerSlot];
 8001138:	7bfb      	ldrb	r3, [r7, #15]
 800113a:	4a37      	ldr	r2, [pc, #220]	; (8001218 <timer_tick+0x154>)
 800113c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	609a      	str	r2, [r3, #8]
            timerWheel1[newTimerSlot] = newTimer;
 8001144:	7bfb      	ldrb	r3, [r7, #15]
 8001146:	4934      	ldr	r1, [pc, #208]	; (8001218 <timer_tick+0x154>)
 8001148:	68ba      	ldr	r2, [r7, #8]
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            Timer* temp = processTimer;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	607b      	str	r3, [r7, #4]
            processTimer = processTimer->next;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	689b      	ldr	r3, [r3, #8]
 8001156:	617b      	str	r3, [r7, #20]
            free(temp);
 8001158:	6878      	ldr	r0, [r7, #4]
 800115a:	f001 fdbd 	bl	8002cd8 <free>
        while (processTimer != NULL){
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1be      	bne.n	80010e2 <timer_tick+0x1e>
        }
        timerWheel2[currentTimerSlotWheel2] = NULL;
 8001164:	4b27      	ldr	r3, [pc, #156]	; (8001204 <timer_tick+0x140>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	4b27      	ldr	r3, [pc, #156]	; (8001208 <timer_tick+0x144>)
 800116c:	2200      	movs	r2, #0
 800116e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        currentTimerSlotWheel2 = (currentTimerSlotWheel2 + 1) % WHEEL2;
 8001172:	4b24      	ldr	r3, [pc, #144]	; (8001204 <timer_tick+0x140>)
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	1c5a      	adds	r2, r3, #1
 8001178:	4b28      	ldr	r3, [pc, #160]	; (800121c <timer_tick+0x158>)
 800117a:	fb83 1302 	smull	r1, r3, r3, r2
 800117e:	4413      	add	r3, r2
 8001180:	1199      	asrs	r1, r3, #6
 8001182:	17d3      	asrs	r3, r2, #31
 8001184:	1ac9      	subs	r1, r1, r3
 8001186:	460b      	mov	r3, r1
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	440b      	add	r3, r1
 800118c:	0159      	lsls	r1, r3, #5
 800118e:	440b      	add	r3, r1
 8001190:	1ad1      	subs	r1, r2, r3
 8001192:	b2ca      	uxtb	r2, r1
 8001194:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <timer_tick+0x140>)
 8001196:	701a      	strb	r2, [r3, #0]
    }

    Timer* processTimer = timerWheel1[currentTimerSlotWheel1];
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <timer_tick+0x13c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	461a      	mov	r2, r3
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <timer_tick+0x154>)
 80011a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011a4:	613b      	str	r3, [r7, #16]
    while (processTimer != NULL) {
 80011a6:	e00b      	b.n	80011c0 <timer_tick+0xfc>
        *(processTimer->timer_flag) = 1;
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
        Timer* temp = processTimer;
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	603b      	str	r3, [r7, #0]
        processTimer = processTimer->next;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	613b      	str	r3, [r7, #16]
        free(temp);
 80011ba:	6838      	ldr	r0, [r7, #0]
 80011bc:	f001 fd8c 	bl	8002cd8 <free>
    while (processTimer != NULL) {
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <timer_tick+0xe4>
    }
    timerWheel1[currentTimerSlotWheel1] = NULL;
 80011c6:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <timer_tick+0x13c>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4b12      	ldr	r3, [pc, #72]	; (8001218 <timer_tick+0x154>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    currentTimerSlotWheel1 = (currentTimerSlotWheel1 + 1) % WHEEL1;
 80011d4:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <timer_tick+0x13c>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	3301      	adds	r3, #1
 80011da:	4a0d      	ldr	r2, [pc, #52]	; (8001210 <timer_tick+0x14c>)
 80011dc:	fb82 1203 	smull	r1, r2, r2, r3
 80011e0:	1151      	asrs	r1, r2, #5
 80011e2:	17da      	asrs	r2, r3, #31
 80011e4:	1a8a      	subs	r2, r1, r2
 80011e6:	2164      	movs	r1, #100	; 0x64
 80011e8:	fb01 f202 	mul.w	r2, r1, r2
 80011ec:	1a9a      	subs	r2, r3, r2
 80011ee:	b2d2      	uxtb	r2, r2
 80011f0:	4b03      	ldr	r3, [pc, #12]	; (8001200 <timer_tick+0x13c>)
 80011f2:	701a      	strb	r2, [r3, #0]
 80011f4:	e000      	b.n	80011f8 <timer_tick+0x134>
            if (newTimer == NULL) return;
 80011f6:	bf00      	nop
}
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	200000fa 	.word	0x200000fa
 8001204:	200000fb 	.word	0x200000fb
 8001208:	200002a4 	.word	0x200002a4
 800120c:	cccccccd 	.word	0xcccccccd
 8001210:	51eb851f 	.word	0x51eb851f
 8001214:	10624dd3 	.word	0x10624dd3
 8001218:	20000110 	.word	0x20000110
 800121c:	a57eb503 	.word	0xa57eb503

08001220 <timer_run>:

void timer_run(){
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
	if(flagInterrupt == 1){
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <timer_run+0x24>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	2b01      	cmp	r3, #1
 800122a:	d108      	bne.n	800123e <timer_run+0x1e>
		flagInterrupt = 0;
 800122c:	4b05      	ldr	r3, [pc, #20]	; (8001244 <timer_run+0x24>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]
		timer_tick();
 8001232:	f7ff ff47 	bl	80010c4 <timer_tick>
		button_reading();
 8001236:	f7ff fc57 	bl	8000ae8 <button_reading>
#ifdef P_CLOCK
		p_clockRun();
 800123a:	f7ff fbd7 	bl	80009ec <p_clockRun>
#endif
	}
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000436 	.word	0x20000436

08001248 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ){
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001258:	d102      	bne.n	8001260 <HAL_TIM_PeriodElapsedCallback+0x18>
		flagInterrupt = 1;
 800125a:	4b04      	ldr	r3, [pc, #16]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x24>)
 800125c:	2201      	movs	r2, #1
 800125e:	701a      	strb	r2, [r3, #0]
	}
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	bc80      	pop	{r7}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	20000436 	.word	0x20000436

08001270 <unit_test_software_timer>:

void unit_test_software_timer(){
 8001270:	b580      	push	{r7, lr}
 8001272:	af00      	add	r7, sp, #0
	if(timer_flag[0] == 1){
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <unit_test_software_timer+0x24>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d109      	bne.n	8001290 <unit_test_software_timer+0x20>
		HAL_GPIO_TogglePin(TEST_Timer_GPIO_Port, TEST_Timer_Pin);
 800127c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001280:	4805      	ldr	r0, [pc, #20]	; (8001298 <unit_test_software_timer+0x28>)
 8001282:	f000 fd26 	bl	8001cd2 <HAL_GPIO_TogglePin>
		set_timer(1000, &timer_flag[0]);
 8001286:	4903      	ldr	r1, [pc, #12]	; (8001294 <unit_test_software_timer+0x24>)
 8001288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800128c:	f7ff feac 	bl	8000fe8 <set_timer>
//	}
//	if(timer_flag[2] >= 1){
//			HAL_GPIO_TogglePin(TEST_GPIO_Port, TEST_Pin);
//			set_timer(1000, &timer_flag[2]);
//		}
}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200000d4 	.word	0x200000d4
 8001298:	40010800 	.word	0x40010800

0800129c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80012a2:	4b15      	ldr	r3, [pc, #84]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	4a14      	ldr	r2, [pc, #80]	; (80012f8 <HAL_MspInit+0x5c>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6193      	str	r3, [r2, #24]
 80012ae:	4b12      	ldr	r3, [pc, #72]	; (80012f8 <HAL_MspInit+0x5c>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ba:	4b0f      	ldr	r3, [pc, #60]	; (80012f8 <HAL_MspInit+0x5c>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a0e      	ldr	r2, [pc, #56]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <HAL_MspInit+0x5c>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ce:	607b      	str	r3, [r7, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80012d2:	4b0a      	ldr	r3, [pc, #40]	; (80012fc <HAL_MspInit+0x60>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	60fb      	str	r3, [r7, #12]
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80012e6:	60fb      	str	r3, [r7, #12]
 80012e8:	4a04      	ldr	r2, [pc, #16]	; (80012fc <HAL_MspInit+0x60>)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr
 80012f8:	40021000 	.word	0x40021000
 80012fc:	40010000 	.word	0x40010000

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001310:	d113      	bne.n	800133a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001312:	4b0c      	ldr	r3, [pc, #48]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	4a0b      	ldr	r2, [pc, #44]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001318:	f043 0301 	orr.w	r3, r3, #1
 800131c:	61d3      	str	r3, [r2, #28]
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_TIM_Base_MspInit+0x44>)
 8001320:	69db      	ldr	r3, [r3, #28]
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	201c      	movs	r0, #28
 8001330:	f000 faef 	bl	8001912 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001334:	201c      	movs	r0, #28
 8001336:	f000 fb08 	bl	800194a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000

08001348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800134c:	e7fe      	b.n	800134c <NMI_Handler+0x4>

0800134e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001352:	e7fe      	b.n	8001352 <HardFault_Handler+0x4>

08001354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001358:	e7fe      	b.n	8001358 <MemManage_Handler+0x4>

0800135a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800135a:	b480      	push	{r7}
 800135c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800135e:	e7fe      	b.n	800135e <BusFault_Handler+0x4>

08001360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001364:	e7fe      	b.n	8001364 <UsageFault_Handler+0x4>

08001366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800136a:	bf00      	nop
 800136c:	46bd      	mov	sp, r7
 800136e:	bc80      	pop	{r7}
 8001370:	4770      	bx	lr

08001372 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001376:	bf00      	nop
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr

0800138a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800138e:	f000 f9cd 	bl	800172c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001392:	bf00      	nop
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800139c:	4802      	ldr	r0, [pc, #8]	; (80013a8 <TIM2_IRQHandler+0x10>)
 800139e:	f001 f929 	bl	80025f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000046c 	.word	0x2000046c

080013ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013b4:	4a14      	ldr	r2, [pc, #80]	; (8001408 <_sbrk+0x5c>)
 80013b6:	4b15      	ldr	r3, [pc, #84]	; (800140c <_sbrk+0x60>)
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c0:	4b13      	ldr	r3, [pc, #76]	; (8001410 <_sbrk+0x64>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d102      	bne.n	80013ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013c8:	4b11      	ldr	r3, [pc, #68]	; (8001410 <_sbrk+0x64>)
 80013ca:	4a12      	ldr	r2, [pc, #72]	; (8001414 <_sbrk+0x68>)
 80013cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013ce:	4b10      	ldr	r3, [pc, #64]	; (8001410 <_sbrk+0x64>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	4413      	add	r3, r2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	429a      	cmp	r2, r3
 80013da:	d207      	bcs.n	80013ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013dc:	f001 fc4a 	bl	8002c74 <__errno>
 80013e0:	4603      	mov	r3, r0
 80013e2:	220c      	movs	r2, #12
 80013e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013e6:	f04f 33ff 	mov.w	r3, #4294967295
 80013ea:	e009      	b.n	8001400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013ec:	4b08      	ldr	r3, [pc, #32]	; (8001410 <_sbrk+0x64>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013f2:	4b07      	ldr	r3, [pc, #28]	; (8001410 <_sbrk+0x64>)
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4413      	add	r3, r2
 80013fa:	4a05      	ldr	r2, [pc, #20]	; (8001410 <_sbrk+0x64>)
 80013fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013fe:	68fb      	ldr	r3, [r7, #12]
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	20002800 	.word	0x20002800
 800140c:	00000400 	.word	0x00000400
 8001410:	200000fc 	.word	0x200000fc
 8001414:	200004c8 	.word	0x200004c8

08001418 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	bc80      	pop	{r7}
 8001422:	4770      	bx	lr

08001424 <fsm_traffic>:
//#define UNIT_TEST

traffic_mode	t_mode_main = RED,
				t_mode_side = GREEN;

void fsm_traffic(traffic_mode* mode, traffic_way* Tway, uint8_t* timer_flag, uint8_t index){
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
 8001430:	70fb      	strb	r3, [r7, #3]
	switch(*mode){
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	2b02      	cmp	r3, #2
 8001438:	d04c      	beq.n	80014d4 <fsm_traffic+0xb0>
 800143a:	2b02      	cmp	r3, #2
 800143c:	dc6d      	bgt.n	800151a <fsm_traffic+0xf6>
 800143e:	2b00      	cmp	r3, #0
 8001440:	d002      	beq.n	8001448 <fsm_traffic+0x24>
 8001442:	2b01      	cmp	r3, #1
 8001444:	d023      	beq.n	800148e <fsm_traffic+0x6a>
			update7SEG(index);
		}
		break;
	default:

		break;
 8001446:	e068      	b.n	800151a <fsm_traffic+0xf6>
		if(*timer_flag == 1){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	2b01      	cmp	r3, #1
 800144e:	d166      	bne.n	800151e <fsm_traffic+0xfa>
			lit_green(Tway->way);
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	4618      	mov	r0, r3
 8001456:	f000 f8cd 	bl	80015f4 <lit_green>
			set_timer(Tway->green *SEC, timer_flag);
 800145a:	68bb      	ldr	r3, [r7, #8]
 800145c:	791b      	ldrb	r3, [r3, #4]
 800145e:	461a      	mov	r2, r3
 8001460:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001464:	fb03 f302 	mul.w	r3, r3, r2
 8001468:	6879      	ldr	r1, [r7, #4]
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fdbc 	bl	8000fe8 <set_timer>
			counter[index] = Tway->green + 1;
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	791a      	ldrb	r2, [r3, #4]
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	3201      	adds	r2, #1
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	4a2d      	ldr	r2, [pc, #180]	; (8001530 <fsm_traffic+0x10c>)
 800147c:	54d1      	strb	r1, [r2, r3]
			*mode = GREEN;
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2202      	movs	r2, #2
 8001482:	701a      	strb	r2, [r3, #0]
			update7SEG(index);
 8001484:	78fb      	ldrb	r3, [r7, #3]
 8001486:	4618      	mov	r0, r3
 8001488:	f7fe fee6 	bl	8000258 <update7SEG>
		break;
 800148c:	e047      	b.n	800151e <fsm_traffic+0xfa>
		if(*timer_flag == 1){
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d145      	bne.n	8001522 <fsm_traffic+0xfe>
			lit_red(Tway->way);
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	4618      	mov	r0, r3
 800149c:	f000 f84a 	bl	8001534 <lit_red>
			set_timer(Tway->red *SEC, timer_flag);
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	789b      	ldrb	r3, [r3, #2]
 80014a4:	461a      	mov	r2, r3
 80014a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014aa:	fb03 f302 	mul.w	r3, r3, r2
 80014ae:	6879      	ldr	r1, [r7, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fd99 	bl	8000fe8 <set_timer>
			counter[index] = Tway->red + 1;
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	789a      	ldrb	r2, [r3, #2]
 80014ba:	78fb      	ldrb	r3, [r7, #3]
 80014bc:	3201      	adds	r2, #1
 80014be:	b2d1      	uxtb	r1, r2
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <fsm_traffic+0x10c>)
 80014c2:	54d1      	strb	r1, [r2, r3]
			*mode = RED;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	2200      	movs	r2, #0
 80014c8:	701a      	strb	r2, [r3, #0]
			update7SEG(index);
 80014ca:	78fb      	ldrb	r3, [r7, #3]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7fe fec3 	bl	8000258 <update7SEG>
		break;
 80014d2:	e026      	b.n	8001522 <fsm_traffic+0xfe>
		if(*timer_flag == 1){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d124      	bne.n	8001526 <fsm_traffic+0x102>
			lit_yellow(Tway->way);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f000 f857 	bl	8001594 <lit_yellow>
			set_timer(Tway->yellow *SEC, timer_flag);
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	78db      	ldrb	r3, [r3, #3]
 80014ea:	461a      	mov	r2, r3
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	fb03 f302 	mul.w	r3, r3, r2
 80014f4:	6879      	ldr	r1, [r7, #4]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff fd76 	bl	8000fe8 <set_timer>
			counter[index] = Tway->yellow + 1;
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	78da      	ldrb	r2, [r3, #3]
 8001500:	78fb      	ldrb	r3, [r7, #3]
 8001502:	3201      	adds	r2, #1
 8001504:	b2d1      	uxtb	r1, r2
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <fsm_traffic+0x10c>)
 8001508:	54d1      	strb	r1, [r2, r3]
			*mode = YELLOW;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2201      	movs	r2, #1
 800150e:	701a      	strb	r2, [r3, #0]
			update7SEG(index);
 8001510:	78fb      	ldrb	r3, [r7, #3]
 8001512:	4618      	mov	r0, r3
 8001514:	f7fe fea0 	bl	8000258 <update7SEG>
		break;
 8001518:	e005      	b.n	8001526 <fsm_traffic+0x102>
		break;
 800151a:	bf00      	nop
 800151c:	e004      	b.n	8001528 <fsm_traffic+0x104>
		break;
 800151e:	bf00      	nop
 8001520:	e002      	b.n	8001528 <fsm_traffic+0x104>
		break;
 8001522:	bf00      	nop
 8001524:	e000      	b.n	8001528 <fsm_traffic+0x104>
		break;
 8001526:	bf00      	nop
	}
}
 8001528:	bf00      	nop
 800152a:	3710      	adds	r7, #16
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000434 	.word	0x20000434

08001534 <lit_red>:

void lit_red(whichWay way){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d10e      	bne.n	8001562 <lit_red+0x2e>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, RESET);
 8001544:	2200      	movs	r2, #0
 8001546:	2101      	movs	r1, #1
 8001548:	4811      	ldr	r0, [pc, #68]	; (8001590 <lit_red+0x5c>)
 800154a:	f000 fbaa 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 800154e:	2201      	movs	r2, #1
 8001550:	2102      	movs	r1, #2
 8001552:	480f      	ldr	r0, [pc, #60]	; (8001590 <lit_red+0x5c>)
 8001554:	f000 fba5 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2104      	movs	r1, #4
 800155c:	480c      	ldr	r0, [pc, #48]	; (8001590 <lit_red+0x5c>)
 800155e:	f000 fba0 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d10e      	bne.n	8001586 <lit_red+0x52>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, RESET);
 8001568:	2200      	movs	r2, #0
 800156a:	2108      	movs	r1, #8
 800156c:	4808      	ldr	r0, [pc, #32]	; (8001590 <lit_red+0x5c>)
 800156e:	f000 fb98 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 8001572:	2201      	movs	r2, #1
 8001574:	2110      	movs	r1, #16
 8001576:	4806      	ldr	r0, [pc, #24]	; (8001590 <lit_red+0x5c>)
 8001578:	f000 fb93 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 800157c:	2201      	movs	r2, #1
 800157e:	2120      	movs	r1, #32
 8001580:	4803      	ldr	r0, [pc, #12]	; (8001590 <lit_red+0x5c>)
 8001582:	f000 fb8e 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40010c00 	.word	0x40010c00

08001594 <lit_yellow>:

void lit_yellow(whichWay way){
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d10e      	bne.n	80015c2 <lit_yellow+0x2e>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2102      	movs	r1, #2
 80015a8:	4811      	ldr	r0, [pc, #68]	; (80015f0 <lit_yellow+0x5c>)
 80015aa:	f000 fb7a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 80015ae:	2201      	movs	r2, #1
 80015b0:	2104      	movs	r1, #4
 80015b2:	480f      	ldr	r0, [pc, #60]	; (80015f0 <lit_yellow+0x5c>)
 80015b4:	f000 fb75 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 80015b8:	2201      	movs	r2, #1
 80015ba:	2101      	movs	r1, #1
 80015bc:	480c      	ldr	r0, [pc, #48]	; (80015f0 <lit_yellow+0x5c>)
 80015be:	f000 fb70 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d10e      	bne.n	80015e6 <lit_yellow+0x52>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, RESET);
 80015c8:	2200      	movs	r2, #0
 80015ca:	2110      	movs	r1, #16
 80015cc:	4808      	ldr	r0, [pc, #32]	; (80015f0 <lit_yellow+0x5c>)
 80015ce:	f000 fb68 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 80015d2:	2201      	movs	r2, #1
 80015d4:	2120      	movs	r1, #32
 80015d6:	4806      	ldr	r0, [pc, #24]	; (80015f0 <lit_yellow+0x5c>)
 80015d8:	f000 fb63 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 80015dc:	2201      	movs	r2, #1
 80015de:	2108      	movs	r1, #8
 80015e0:	4803      	ldr	r0, [pc, #12]	; (80015f0 <lit_yellow+0x5c>)
 80015e2:	f000 fb5e 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40010c00 	.word	0x40010c00

080015f4 <lit_green>:

void lit_green(whichWay way){
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b082      	sub	sp, #8
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d10e      	bne.n	8001622 <lit_green+0x2e>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	2104      	movs	r1, #4
 8001608:	4811      	ldr	r0, [pc, #68]	; (8001650 <lit_green+0x5c>)
 800160a:	f000 fb4a 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 800160e:	2201      	movs	r2, #1
 8001610:	2101      	movs	r1, #1
 8001612:	480f      	ldr	r0, [pc, #60]	; (8001650 <lit_green+0x5c>)
 8001614:	f000 fb45 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 8001618:	2201      	movs	r2, #1
 800161a:	2102      	movs	r1, #2
 800161c:	480c      	ldr	r0, [pc, #48]	; (8001650 <lit_green+0x5c>)
 800161e:	f000 fb40 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d10e      	bne.n	8001646 <lit_green+0x52>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, RESET);
 8001628:	2200      	movs	r2, #0
 800162a:	2120      	movs	r1, #32
 800162c:	4808      	ldr	r0, [pc, #32]	; (8001650 <lit_green+0x5c>)
 800162e:	f000 fb38 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 8001632:	2201      	movs	r2, #1
 8001634:	2108      	movs	r1, #8
 8001636:	4806      	ldr	r0, [pc, #24]	; (8001650 <lit_green+0x5c>)
 8001638:	f000 fb33 	bl	8001ca2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2110      	movs	r1, #16
 8001640:	4803      	ldr	r0, [pc, #12]	; (8001650 <lit_green+0x5c>)
 8001642:	f000 fb2e 	bl	8001ca2 <HAL_GPIO_WritePin>
	}
}
 8001646:	bf00      	nop
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40010c00 	.word	0x40010c00

08001654 <Reset_Handler>:
 8001654:	f7ff fee0 	bl	8001418 <SystemInit>
 8001658:	480b      	ldr	r0, [pc, #44]	; (8001688 <LoopFillZerobss+0xe>)
 800165a:	490c      	ldr	r1, [pc, #48]	; (800168c <LoopFillZerobss+0x12>)
 800165c:	4a0c      	ldr	r2, [pc, #48]	; (8001690 <LoopFillZerobss+0x16>)
 800165e:	2300      	movs	r3, #0
 8001660:	e002      	b.n	8001668 <LoopCopyDataInit>

08001662 <CopyDataInit>:
 8001662:	58d4      	ldr	r4, [r2, r3]
 8001664:	50c4      	str	r4, [r0, r3]
 8001666:	3304      	adds	r3, #4

08001668 <LoopCopyDataInit>:
 8001668:	18c4      	adds	r4, r0, r3
 800166a:	428c      	cmp	r4, r1
 800166c:	d3f9      	bcc.n	8001662 <CopyDataInit>
 800166e:	4a09      	ldr	r2, [pc, #36]	; (8001694 <LoopFillZerobss+0x1a>)
 8001670:	4c09      	ldr	r4, [pc, #36]	; (8001698 <LoopFillZerobss+0x1e>)
 8001672:	2300      	movs	r3, #0
 8001674:	e001      	b.n	800167a <LoopFillZerobss>

08001676 <FillZerobss>:
 8001676:	6013      	str	r3, [r2, #0]
 8001678:	3204      	adds	r2, #4

0800167a <LoopFillZerobss>:
 800167a:	42a2      	cmp	r2, r4
 800167c:	d3fb      	bcc.n	8001676 <FillZerobss>
 800167e:	f001 faff 	bl	8002c80 <__libc_init_array>
 8001682:	f7ff fb49 	bl	8000d18 <main>
 8001686:	4770      	bx	lr
 8001688:	20000000 	.word	0x20000000
 800168c:	200000b0 	.word	0x200000b0
 8001690:	08002ec4 	.word	0x08002ec4
 8001694:	200000b0 	.word	0x200000b0
 8001698:	200004c8 	.word	0x200004c8

0800169c <ADC1_2_IRQHandler>:
 800169c:	e7fe      	b.n	800169c <ADC1_2_IRQHandler>
	...

080016a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016a4:	4b08      	ldr	r3, [pc, #32]	; (80016c8 <HAL_Init+0x28>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a07      	ldr	r2, [pc, #28]	; (80016c8 <HAL_Init+0x28>)
 80016aa:	f043 0310 	orr.w	r3, r3, #16
 80016ae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 f923 	bl	80018fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b6:	200f      	movs	r0, #15
 80016b8:	f000 f808 	bl	80016cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016bc:	f7ff fdee 	bl	800129c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40022000 	.word	0x40022000

080016cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <HAL_InitTick+0x54>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <HAL_InitTick+0x58>)
 80016da:	781b      	ldrb	r3, [r3, #0]
 80016dc:	4619      	mov	r1, r3
 80016de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80016e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f93b 	bl	8001966 <HAL_SYSTICK_Config>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e00e      	b.n	8001718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2b0f      	cmp	r3, #15
 80016fe:	d80a      	bhi.n	8001716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001700:	2200      	movs	r2, #0
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	f04f 30ff 	mov.w	r0, #4294967295
 8001708:	f000 f903 	bl	8001912 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800170c:	4a06      	ldr	r2, [pc, #24]	; (8001728 <HAL_InitTick+0x5c>)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
 8001714:	e000      	b.n	8001718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
}
 8001718:	4618      	mov	r0, r3
 800171a:	3708      	adds	r7, #8
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000003c 	.word	0x2000003c
 8001724:	20000048 	.word	0x20000048
 8001728:	20000044 	.word	0x20000044

0800172c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001730:	4b05      	ldr	r3, [pc, #20]	; (8001748 <HAL_IncTick+0x1c>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	461a      	mov	r2, r3
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <HAL_IncTick+0x20>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4413      	add	r3, r2
 800173c:	4a03      	ldr	r2, [pc, #12]	; (800174c <HAL_IncTick+0x20>)
 800173e:	6013      	str	r3, [r2, #0]
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bc80      	pop	{r7}
 8001746:	4770      	bx	lr
 8001748:	20000048 	.word	0x20000048
 800174c:	200004b4 	.word	0x200004b4

08001750 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return uwTick;
 8001754:	4b02      	ldr	r3, [pc, #8]	; (8001760 <HAL_GetTick+0x10>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr
 8001760:	200004b4 	.word	0x200004b4

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4906      	ldr	r1, [pc, #24]	; (80017fc <__NVIC_EnableIRQ+0x34>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bc80      	pop	{r7}
 80017fa:	4770      	bx	lr
 80017fc:	e000e100 	.word	0xe000e100

08001800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
 8001806:	4603      	mov	r3, r0
 8001808:	6039      	str	r1, [r7, #0]
 800180a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	2b00      	cmp	r3, #0
 8001812:	db0a      	blt.n	800182a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	b2da      	uxtb	r2, r3
 8001818:	490c      	ldr	r1, [pc, #48]	; (800184c <__NVIC_SetPriority+0x4c>)
 800181a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181e:	0112      	lsls	r2, r2, #4
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	440b      	add	r3, r1
 8001824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001828:	e00a      	b.n	8001840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	b2da      	uxtb	r2, r3
 800182e:	4908      	ldr	r1, [pc, #32]	; (8001850 <__NVIC_SetPriority+0x50>)
 8001830:	79fb      	ldrb	r3, [r7, #7]
 8001832:	f003 030f 	and.w	r3, r3, #15
 8001836:	3b04      	subs	r3, #4
 8001838:	0112      	lsls	r2, r2, #4
 800183a:	b2d2      	uxtb	r2, r2
 800183c:	440b      	add	r3, r1
 800183e:	761a      	strb	r2, [r3, #24]
}
 8001840:	bf00      	nop
 8001842:	370c      	adds	r7, #12
 8001844:	46bd      	mov	sp, r7
 8001846:	bc80      	pop	{r7}
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000e100 	.word	0xe000e100
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001854:	b480      	push	{r7}
 8001856:	b089      	sub	sp, #36	; 0x24
 8001858:	af00      	add	r7, sp, #0
 800185a:	60f8      	str	r0, [r7, #12]
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f003 0307 	and.w	r3, r3, #7
 8001866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f1c3 0307 	rsb	r3, r3, #7
 800186e:	2b04      	cmp	r3, #4
 8001870:	bf28      	it	cs
 8001872:	2304      	movcs	r3, #4
 8001874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	3304      	adds	r3, #4
 800187a:	2b06      	cmp	r3, #6
 800187c:	d902      	bls.n	8001884 <NVIC_EncodePriority+0x30>
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	3b03      	subs	r3, #3
 8001882:	e000      	b.n	8001886 <NVIC_EncodePriority+0x32>
 8001884:	2300      	movs	r3, #0
 8001886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001888:	f04f 32ff 	mov.w	r2, #4294967295
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43da      	mvns	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	401a      	ands	r2, r3
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800189c:	f04f 31ff 	mov.w	r1, #4294967295
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	fa01 f303 	lsl.w	r3, r1, r3
 80018a6:	43d9      	mvns	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	4313      	orrs	r3, r2
         );
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3724      	adds	r7, #36	; 0x24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr

080018b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	3b01      	subs	r3, #1
 80018c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018c8:	d301      	bcc.n	80018ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ca:	2301      	movs	r3, #1
 80018cc:	e00f      	b.n	80018ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <SysTick_Config+0x40>)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018d6:	210f      	movs	r1, #15
 80018d8:	f04f 30ff 	mov.w	r0, #4294967295
 80018dc:	f7ff ff90 	bl	8001800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e0:	4b05      	ldr	r3, [pc, #20]	; (80018f8 <SysTick_Config+0x40>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018e6:	4b04      	ldr	r3, [pc, #16]	; (80018f8 <SysTick_Config+0x40>)
 80018e8:	2207      	movs	r2, #7
 80018ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3708      	adds	r7, #8
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	e000e010 	.word	0xe000e010

080018fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ff2d 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 800190a:	bf00      	nop
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001912:	b580      	push	{r7, lr}
 8001914:	b086      	sub	sp, #24
 8001916:	af00      	add	r7, sp, #0
 8001918:	4603      	mov	r3, r0
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	607a      	str	r2, [r7, #4]
 800191e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001924:	f7ff ff42 	bl	80017ac <__NVIC_GetPriorityGrouping>
 8001928:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	6978      	ldr	r0, [r7, #20]
 8001930:	f7ff ff90 	bl	8001854 <NVIC_EncodePriority>
 8001934:	4602      	mov	r2, r0
 8001936:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193a:	4611      	mov	r1, r2
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff5f 	bl	8001800 <__NVIC_SetPriority>
}
 8001942:	bf00      	nop
 8001944:	3718      	adds	r7, #24
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	4603      	mov	r3, r0
 8001952:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff35 	bl	80017c8 <__NVIC_EnableIRQ>
}
 800195e:	bf00      	nop
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b082      	sub	sp, #8
 800196a:	af00      	add	r7, sp, #0
 800196c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ffa2 	bl	80018b8 <SysTick_Config>
 8001974:	4603      	mov	r3, r0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
	...

08001980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001980:	b480      	push	{r7}
 8001982:	b08b      	sub	sp, #44	; 0x2c
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001992:	e148      	b.n	8001c26 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001994:	2201      	movs	r2, #1
 8001996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	f040 8137 	bne.w	8001c20 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4aa3      	ldr	r2, [pc, #652]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d05e      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019bc:	4aa1      	ldr	r2, [pc, #644]	; (8001c44 <HAL_GPIO_Init+0x2c4>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d875      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019c2:	4aa1      	ldr	r2, [pc, #644]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d058      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019c8:	4a9f      	ldr	r2, [pc, #636]	; (8001c48 <HAL_GPIO_Init+0x2c8>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d86f      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019ce:	4a9f      	ldr	r2, [pc, #636]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d052      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019d4:	4a9d      	ldr	r2, [pc, #628]	; (8001c4c <HAL_GPIO_Init+0x2cc>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d869      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019da:	4a9d      	ldr	r2, [pc, #628]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d04c      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019e0:	4a9b      	ldr	r2, [pc, #620]	; (8001c50 <HAL_GPIO_Init+0x2d0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d863      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019e6:	4a9b      	ldr	r2, [pc, #620]	; (8001c54 <HAL_GPIO_Init+0x2d4>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d046      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
 80019ec:	4a99      	ldr	r2, [pc, #612]	; (8001c54 <HAL_GPIO_Init+0x2d4>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d85d      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019f2:	2b12      	cmp	r3, #18
 80019f4:	d82a      	bhi.n	8001a4c <HAL_GPIO_Init+0xcc>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d859      	bhi.n	8001aae <HAL_GPIO_Init+0x12e>
 80019fa:	a201      	add	r2, pc, #4	; (adr r2, 8001a00 <HAL_GPIO_Init+0x80>)
 80019fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a00:	08001a7b 	.word	0x08001a7b
 8001a04:	08001a55 	.word	0x08001a55
 8001a08:	08001a67 	.word	0x08001a67
 8001a0c:	08001aa9 	.word	0x08001aa9
 8001a10:	08001aaf 	.word	0x08001aaf
 8001a14:	08001aaf 	.word	0x08001aaf
 8001a18:	08001aaf 	.word	0x08001aaf
 8001a1c:	08001aaf 	.word	0x08001aaf
 8001a20:	08001aaf 	.word	0x08001aaf
 8001a24:	08001aaf 	.word	0x08001aaf
 8001a28:	08001aaf 	.word	0x08001aaf
 8001a2c:	08001aaf 	.word	0x08001aaf
 8001a30:	08001aaf 	.word	0x08001aaf
 8001a34:	08001aaf 	.word	0x08001aaf
 8001a38:	08001aaf 	.word	0x08001aaf
 8001a3c:	08001aaf 	.word	0x08001aaf
 8001a40:	08001aaf 	.word	0x08001aaf
 8001a44:	08001a5d 	.word	0x08001a5d
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	4a82      	ldr	r2, [pc, #520]	; (8001c58 <HAL_GPIO_Init+0x2d8>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a52:	e02c      	b.n	8001aae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	623b      	str	r3, [r7, #32]
          break;
 8001a5a:	e029      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	3304      	adds	r3, #4
 8001a62:	623b      	str	r3, [r7, #32]
          break;
 8001a64:	e024      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	3308      	adds	r3, #8
 8001a6c:	623b      	str	r3, [r7, #32]
          break;
 8001a6e:	e01f      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	330c      	adds	r3, #12
 8001a76:	623b      	str	r3, [r7, #32]
          break;
 8001a78:	e01a      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d102      	bne.n	8001a88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a82:	2304      	movs	r3, #4
 8001a84:	623b      	str	r3, [r7, #32]
          break;
 8001a86:	e013      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	689b      	ldr	r3, [r3, #8]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d105      	bne.n	8001a9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a90:	2308      	movs	r3, #8
 8001a92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	69fa      	ldr	r2, [r7, #28]
 8001a98:	611a      	str	r2, [r3, #16]
          break;
 8001a9a:	e009      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a9c:	2308      	movs	r3, #8
 8001a9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	615a      	str	r2, [r3, #20]
          break;
 8001aa6:	e003      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
          break;
 8001aac:	e000      	b.n	8001ab0 <HAL_GPIO_Init+0x130>
          break;
 8001aae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab0:	69bb      	ldr	r3, [r7, #24]
 8001ab2:	2bff      	cmp	r3, #255	; 0xff
 8001ab4:	d801      	bhi.n	8001aba <HAL_GPIO_Init+0x13a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	e001      	b.n	8001abe <HAL_GPIO_Init+0x13e>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	3304      	adds	r3, #4
 8001abe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2bff      	cmp	r3, #255	; 0xff
 8001ac4:	d802      	bhi.n	8001acc <HAL_GPIO_Init+0x14c>
 8001ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	e002      	b.n	8001ad2 <HAL_GPIO_Init+0x152>
 8001acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ace:	3b08      	subs	r3, #8
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	210f      	movs	r1, #15
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	401a      	ands	r2, r3
 8001ae4:	6a39      	ldr	r1, [r7, #32]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aec:	431a      	orrs	r2, r3
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af2:	683b      	ldr	r3, [r7, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	f000 8090 	beq.w	8001c20 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b00:	4b56      	ldr	r3, [pc, #344]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	4a55      	ldr	r2, [pc, #340]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6193      	str	r3, [r2, #24]
 8001b0c:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_GPIO_Init+0x2dc>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60bb      	str	r3, [r7, #8]
 8001b16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b18:	4a51      	ldr	r2, [pc, #324]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1c:	089b      	lsrs	r3, r3, #2
 8001b1e:	3302      	adds	r3, #2
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	f003 0303 	and.w	r3, r3, #3
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	220f      	movs	r2, #15
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a49      	ldr	r2, [pc, #292]	; (8001c64 <HAL_GPIO_Init+0x2e4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d00d      	beq.n	8001b60 <HAL_GPIO_Init+0x1e0>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a48      	ldr	r2, [pc, #288]	; (8001c68 <HAL_GPIO_Init+0x2e8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d007      	beq.n	8001b5c <HAL_GPIO_Init+0x1dc>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a47      	ldr	r2, [pc, #284]	; (8001c6c <HAL_GPIO_Init+0x2ec>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d101      	bne.n	8001b58 <HAL_GPIO_Init+0x1d8>
 8001b54:	2302      	movs	r3, #2
 8001b56:	e004      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b58:	2303      	movs	r3, #3
 8001b5a:	e002      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_GPIO_Init+0x1e2>
 8001b60:	2300      	movs	r3, #0
 8001b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b64:	f002 0203 	and.w	r2, r2, #3
 8001b68:	0092      	lsls	r2, r2, #2
 8001b6a:	4093      	lsls	r3, r2
 8001b6c:	68fa      	ldr	r2, [r7, #12]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b72:	493b      	ldr	r1, [pc, #236]	; (8001c60 <HAL_GPIO_Init+0x2e0>)
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001b8c:	4b38      	ldr	r3, [pc, #224]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b8e:	689a      	ldr	r2, [r3, #8]
 8001b90:	4937      	ldr	r1, [pc, #220]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	4313      	orrs	r3, r2
 8001b96:	608b      	str	r3, [r1, #8]
 8001b98:	e006      	b.n	8001ba8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001b9a:	4b35      	ldr	r3, [pc, #212]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	4933      	ldr	r1, [pc, #204]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d006      	beq.n	8001bc2 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001bb4:	4b2e      	ldr	r3, [pc, #184]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bb6:	68da      	ldr	r2, [r3, #12]
 8001bb8:	492d      	ldr	r1, [pc, #180]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	60cb      	str	r3, [r1, #12]
 8001bc0:	e006      	b.n	8001bd0 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bc4:	68da      	ldr	r2, [r3, #12]
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4929      	ldr	r1, [pc, #164]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bcc:	4013      	ands	r3, r2
 8001bce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d006      	beq.n	8001bea <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bdc:	4b24      	ldr	r3, [pc, #144]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4923      	ldr	r1, [pc, #140]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e006      	b.n	8001bf8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bea:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bec:	685a      	ldr	r2, [r3, #4]
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	43db      	mvns	r3, r3
 8001bf2:	491f      	ldr	r1, [pc, #124]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d006      	beq.n	8001c12 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	4919      	ldr	r1, [pc, #100]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	600b      	str	r3, [r1, #0]
 8001c10:	e006      	b.n	8001c20 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c12:	4b17      	ldr	r3, [pc, #92]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69bb      	ldr	r3, [r7, #24]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	4915      	ldr	r1, [pc, #84]	; (8001c70 <HAL_GPIO_Init+0x2f0>)
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	3301      	adds	r3, #1
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f aeaf 	bne.w	8001994 <HAL_GPIO_Init+0x14>
  }
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	372c      	adds	r7, #44	; 0x2c
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	10320000 	.word	0x10320000
 8001c48:	10310000 	.word	0x10310000
 8001c4c:	10220000 	.word	0x10220000
 8001c50:	10210000 	.word	0x10210000
 8001c54:	10120000 	.word	0x10120000
 8001c58:	10110000 	.word	0x10110000
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40010000 	.word	0x40010000
 8001c64:	40010800 	.word	0x40010800
 8001c68:	40010c00 	.word	0x40010c00
 8001c6c:	40011000 	.word	0x40011000
 8001c70:	40010400 	.word	0x40010400

08001c74 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	887b      	ldrh	r3, [r7, #2]
 8001c86:	4013      	ands	r3, r2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d002      	beq.n	8001c92 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	73fb      	strb	r3, [r7, #15]
 8001c90:	e001      	b.n	8001c96 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c92:	2300      	movs	r3, #0
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	460b      	mov	r3, r1
 8001cac:	807b      	strh	r3, [r7, #2]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cb2:	787b      	ldrb	r3, [r7, #1]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cb8:	887a      	ldrh	r2, [r7, #2]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cc0:	887b      	ldrh	r3, [r7, #2]
 8001cc2:	041a      	lsls	r2, r3, #16
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	611a      	str	r2, [r3, #16]
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ce4:	887a      	ldrh	r2, [r7, #2]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	041a      	lsls	r2, r3, #16
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	887b      	ldrh	r3, [r7, #2]
 8001cf2:	400b      	ands	r3, r1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	611a      	str	r2, [r3, #16]
}
 8001cfa:	bf00      	nop
 8001cfc:	3714      	adds	r7, #20
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e26c      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 8087 	beq.w	8001e32 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d24:	4b92      	ldr	r3, [pc, #584]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 030c 	and.w	r3, r3, #12
 8001d2c:	2b04      	cmp	r3, #4
 8001d2e:	d00c      	beq.n	8001d4a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d30:	4b8f      	ldr	r3, [pc, #572]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d112      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
 8001d3c:	4b8c      	ldr	r3, [pc, #560]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d48:	d10b      	bne.n	8001d62 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	4b89      	ldr	r3, [pc, #548]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d06c      	beq.n	8001e30 <HAL_RCC_OscConfig+0x12c>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d168      	bne.n	8001e30 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d5e:	2301      	movs	r3, #1
 8001d60:	e246      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6a:	d106      	bne.n	8001d7a <HAL_RCC_OscConfig+0x76>
 8001d6c:	4b80      	ldr	r3, [pc, #512]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a7f      	ldr	r2, [pc, #508]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d76:	6013      	str	r3, [r2, #0]
 8001d78:	e02e      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10c      	bne.n	8001d9c <HAL_RCC_OscConfig+0x98>
 8001d82:	4b7b      	ldr	r3, [pc, #492]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a7a      	ldr	r2, [pc, #488]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d8c:	6013      	str	r3, [r2, #0]
 8001d8e:	4b78      	ldr	r3, [pc, #480]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a77      	ldr	r2, [pc, #476]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	e01d      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0xbc>
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a71      	ldr	r2, [pc, #452]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b6f      	ldr	r3, [pc, #444]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001db8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e00b      	b.n	8001dd8 <HAL_RCC_OscConfig+0xd4>
 8001dc0:	4b6b      	ldr	r3, [pc, #428]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a6a      	ldr	r2, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dca:	6013      	str	r3, [r2, #0]
 8001dcc:	4b68      	ldr	r3, [pc, #416]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a67      	ldr	r2, [pc, #412]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dd6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d013      	beq.n	8001e08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de0:	f7ff fcb6 	bl	8001750 <HAL_GetTick>
 8001de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001de8:	f7ff fcb2 	bl	8001750 <HAL_GetTick>
 8001dec:	4602      	mov	r2, r0
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b64      	cmp	r3, #100	; 0x64
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e1fa      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfa:	4b5d      	ldr	r3, [pc, #372]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0f0      	beq.n	8001de8 <HAL_RCC_OscConfig+0xe4>
 8001e06:	e014      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7ff fca2 	bl	8001750 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fc9e 	bl	8001750 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1e6      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e22:	4b53      	ldr	r3, [pc, #332]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x10c>
 8001e2e:	e000      	b.n	8001e32 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d063      	beq.n	8001f06 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e3e:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00b      	beq.n	8001e62 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e4a:	4b49      	ldr	r3, [pc, #292]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f003 030c 	and.w	r3, r3, #12
 8001e52:	2b08      	cmp	r3, #8
 8001e54:	d11c      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d116      	bne.n	8001e90 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e62:	4b43      	ldr	r3, [pc, #268]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d005      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	691b      	ldr	r3, [r3, #16]
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d001      	beq.n	8001e7a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e1ba      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	00db      	lsls	r3, r3, #3
 8001e88:	4939      	ldr	r1, [pc, #228]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	e03a      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d020      	beq.n	8001eda <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e98:	4b36      	ldr	r3, [pc, #216]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fc57 	bl	8001750 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea4:	e008      	b.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ea6:	f7ff fc53 	bl	8001750 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e19b      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb8:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d0f0      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec4:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	695b      	ldr	r3, [r3, #20]
 8001ed0:	00db      	lsls	r3, r3, #3
 8001ed2:	4927      	ldr	r1, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]
 8001ed8:	e015      	b.n	8001f06 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001eda:	4b26      	ldr	r3, [pc, #152]	; (8001f74 <HAL_RCC_OscConfig+0x270>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ee0:	f7ff fc36 	bl	8001750 <HAL_GetTick>
 8001ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee6:	e008      	b.n	8001efa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee8:	f7ff fc32 	bl	8001750 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d901      	bls.n	8001efa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	e17a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0302 	and.w	r3, r3, #2
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1f0      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d03a      	beq.n	8001f88 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d019      	beq.n	8001f4e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f20:	f7ff fc16 	bl	8001750 <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f26:	e008      	b.n	8001f3a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7ff fc12 	bl	8001750 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e15a      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d0f0      	beq.n	8001f28 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f46:	2001      	movs	r0, #1
 8001f48:	f000 fa9a 	bl	8002480 <RCC_Delay>
 8001f4c:	e01c      	b.n	8001f88 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f4e:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x274>)
 8001f50:	2200      	movs	r2, #0
 8001f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fbfc 	bl	8001750 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5a:	e00f      	b.n	8001f7c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f5c:	f7ff fbf8 	bl	8001750 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d908      	bls.n	8001f7c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e140      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
 8001f6e:	bf00      	nop
 8001f70:	40021000 	.word	0x40021000
 8001f74:	42420000 	.word	0x42420000
 8001f78:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f7c:	4b9e      	ldr	r3, [pc, #632]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1e9      	bne.n	8001f5c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a6 	beq.w	80020e2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f96:	2300      	movs	r3, #0
 8001f98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f9a:	4b97      	ldr	r3, [pc, #604]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d10d      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa6:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	4a93      	ldr	r2, [pc, #588]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fb0:	61d3      	str	r3, [r2, #28]
 8001fb2:	4b91      	ldr	r3, [pc, #580]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fba:	60bb      	str	r3, [r7, #8]
 8001fbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc2:	4b8e      	ldr	r3, [pc, #568]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d118      	bne.n	8002000 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fce:	4b8b      	ldr	r3, [pc, #556]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a8a      	ldr	r2, [pc, #552]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fda:	f7ff fbb9 	bl	8001750 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7ff fbb5 	bl	8001750 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b64      	cmp	r3, #100	; 0x64
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e0fd      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ff4:	4b81      	ldr	r3, [pc, #516]	; (80021fc <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x312>
 8002008:	4b7b      	ldr	r3, [pc, #492]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	4a7a      	ldr	r2, [pc, #488]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800200e:	f043 0301 	orr.w	r3, r3, #1
 8002012:	6213      	str	r3, [r2, #32]
 8002014:	e02d      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x334>
 800201e:	4b76      	ldr	r3, [pc, #472]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002020:	6a1b      	ldr	r3, [r3, #32]
 8002022:	4a75      	ldr	r2, [pc, #468]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002024:	f023 0301 	bic.w	r3, r3, #1
 8002028:	6213      	str	r3, [r2, #32]
 800202a:	4b73      	ldr	r3, [pc, #460]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800202c:	6a1b      	ldr	r3, [r3, #32]
 800202e:	4a72      	ldr	r2, [pc, #456]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002030:	f023 0304 	bic.w	r3, r3, #4
 8002034:	6213      	str	r3, [r2, #32]
 8002036:	e01c      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	2b05      	cmp	r3, #5
 800203e:	d10c      	bne.n	800205a <HAL_RCC_OscConfig+0x356>
 8002040:	4b6d      	ldr	r3, [pc, #436]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4a6c      	ldr	r2, [pc, #432]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002046:	f043 0304 	orr.w	r3, r3, #4
 800204a:	6213      	str	r3, [r2, #32]
 800204c:	4b6a      	ldr	r3, [pc, #424]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800204e:	6a1b      	ldr	r3, [r3, #32]
 8002050:	4a69      	ldr	r2, [pc, #420]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6213      	str	r3, [r2, #32]
 8002058:	e00b      	b.n	8002072 <HAL_RCC_OscConfig+0x36e>
 800205a:	4b67      	ldr	r3, [pc, #412]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	6a1b      	ldr	r3, [r3, #32]
 800205e:	4a66      	ldr	r2, [pc, #408]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002060:	f023 0301 	bic.w	r3, r3, #1
 8002064:	6213      	str	r3, [r2, #32]
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	6a1b      	ldr	r3, [r3, #32]
 800206a:	4a63      	ldr	r2, [pc, #396]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800206c:	f023 0304 	bic.w	r3, r3, #4
 8002070:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d015      	beq.n	80020a6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800207a:	f7ff fb69 	bl	8001750 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002080:	e00a      	b.n	8002098 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fb65 	bl	8001750 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002090:	4293      	cmp	r3, r2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e0ab      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002098:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800209a:	6a1b      	ldr	r3, [r3, #32]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d0ee      	beq.n	8002082 <HAL_RCC_OscConfig+0x37e>
 80020a4:	e014      	b.n	80020d0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb53 	bl	8001750 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fb4f 	bl	8001750 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e095      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020c4:	4b4c      	ldr	r3, [pc, #304]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1ee      	bne.n	80020ae <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020d0:	7dfb      	ldrb	r3, [r7, #23]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d105      	bne.n	80020e2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020d6:	4b48      	ldr	r3, [pc, #288]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	4a47      	ldr	r2, [pc, #284]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020e0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8081 	beq.w	80021ee <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ec:	4b42      	ldr	r3, [pc, #264]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 030c 	and.w	r3, r3, #12
 80020f4:	2b08      	cmp	r3, #8
 80020f6:	d061      	beq.n	80021bc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69db      	ldr	r3, [r3, #28]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d146      	bne.n	800218e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002106:	f7ff fb23 	bl	8001750 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800210e:	f7ff fb1f 	bl	8001750 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e067      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002120:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1f0      	bne.n	800210e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002134:	d108      	bne.n	8002148 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002136:	4b30      	ldr	r3, [pc, #192]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	492d      	ldr	r1, [pc, #180]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002144:	4313      	orrs	r3, r2
 8002146:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002148:	4b2b      	ldr	r3, [pc, #172]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a19      	ldr	r1, [r3, #32]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	430b      	orrs	r3, r1
 800215a:	4927      	ldr	r1, [pc, #156]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 800215c:	4313      	orrs	r3, r2
 800215e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002160:	4b27      	ldr	r3, [pc, #156]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff faf3 	bl	8001750 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7ff faef 	bl	8001750 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e037      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002180:	4b1d      	ldr	r3, [pc, #116]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x46a>
 800218c:	e02f      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b1c      	ldr	r3, [pc, #112]	; (8002200 <HAL_RCC_OscConfig+0x4fc>)
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002194:	f7ff fadc 	bl	8001750 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff fad8 	bl	8001750 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e020      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x498>
 80021ba:	e018      	b.n	80021ee <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e013      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <HAL_RCC_OscConfig+0x4f4>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d001      	beq.n	80021ee <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40021000 	.word	0x40021000
 80021fc:	40007000 	.word	0x40007000
 8002200:	42420060 	.word	0x42420060

08002204 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	e0d0      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002218:	4b6a      	ldr	r3, [pc, #424]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	683a      	ldr	r2, [r7, #0]
 8002222:	429a      	cmp	r2, r3
 8002224:	d910      	bls.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002226:	4b67      	ldr	r3, [pc, #412]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f023 0207 	bic.w	r2, r3, #7
 800222e:	4965      	ldr	r1, [pc, #404]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002236:	4b63      	ldr	r3, [pc, #396]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0307 	and.w	r3, r3, #7
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0b8      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d020      	beq.n	8002296 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d005      	beq.n	800226c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002260:	4b59      	ldr	r3, [pc, #356]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a58      	ldr	r2, [pc, #352]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002266:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800226a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d005      	beq.n	8002284 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002278:	4b53      	ldr	r3, [pc, #332]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	4a52      	ldr	r2, [pc, #328]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800227e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002282:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	494d      	ldr	r1, [pc, #308]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0301 	and.w	r3, r3, #1
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d040      	beq.n	8002324 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d107      	bne.n	80022ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b47      	ldr	r3, [pc, #284]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d115      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	e07f      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d107      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c2:	4b41      	ldr	r3, [pc, #260]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e073      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022d2:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e06b      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022e2:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f023 0203 	bic.w	r2, r3, #3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f4:	f7ff fa2c 	bl	8001750 <HAL_GetTick>
 80022f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fa:	e00a      	b.n	8002312 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022fc:	f7ff fa28 	bl	8001750 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	f241 3288 	movw	r2, #5000	; 0x1388
 800230a:	4293      	cmp	r3, r2
 800230c:	d901      	bls.n	8002312 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e053      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f003 020c 	and.w	r2, r3, #12
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	429a      	cmp	r2, r3
 8002322:	d1eb      	bne.n	80022fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002324:	4b27      	ldr	r3, [pc, #156]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d210      	bcs.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002332:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 0207 	bic.w	r2, r3, #7
 800233a:	4922      	ldr	r1, [pc, #136]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	4313      	orrs	r3, r2
 8002340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x1c0>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0307 	and.w	r3, r3, #7
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d001      	beq.n	8002354 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e032      	b.n	80023ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d008      	beq.n	8002372 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68db      	ldr	r3, [r3, #12]
 800236c:	4916      	ldr	r1, [pc, #88]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800236e:	4313      	orrs	r3, r2
 8002370:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0308 	and.w	r3, r3, #8
 800237a:	2b00      	cmp	r3, #0
 800237c:	d009      	beq.n	8002392 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800237e:	4b12      	ldr	r3, [pc, #72]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	691b      	ldr	r3, [r3, #16]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	490e      	ldr	r1, [pc, #56]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	4313      	orrs	r3, r2
 8002390:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002392:	f000 f821 	bl	80023d8 <HAL_RCC_GetSysClockFreq>
 8002396:	4602      	mov	r2, r0
 8002398:	4b0b      	ldr	r3, [pc, #44]	; (80023c8 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	490a      	ldr	r1, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	5ccb      	ldrb	r3, [r1, r3]
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a09      	ldr	r2, [pc, #36]	; (80023d0 <HAL_RCC_ClockConfig+0x1cc>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023ae:	4b09      	ldr	r3, [pc, #36]	; (80023d4 <HAL_RCC_ClockConfig+0x1d0>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7ff f98a 	bl	80016cc <HAL_InitTick>

  return HAL_OK;
 80023b8:	2300      	movs	r3, #0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3710      	adds	r7, #16
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	08002e98 	.word	0x08002e98
 80023d0:	2000003c 	.word	0x2000003c
 80023d4:	20000044 	.word	0x20000044

080023d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	b087      	sub	sp, #28
 80023dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023de:	2300      	movs	r3, #0
 80023e0:	60fb      	str	r3, [r7, #12]
 80023e2:	2300      	movs	r3, #0
 80023e4:	60bb      	str	r3, [r7, #8]
 80023e6:	2300      	movs	r3, #0
 80023e8:	617b      	str	r3, [r7, #20]
 80023ea:	2300      	movs	r3, #0
 80023ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80023ee:	2300      	movs	r3, #0
 80023f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80023f2:	4b1e      	ldr	r3, [pc, #120]	; (800246c <HAL_RCC_GetSysClockFreq+0x94>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d002      	beq.n	8002408 <HAL_RCC_GetSysClockFreq+0x30>
 8002402:	2b08      	cmp	r3, #8
 8002404:	d003      	beq.n	800240e <HAL_RCC_GetSysClockFreq+0x36>
 8002406:	e027      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002408:	4b19      	ldr	r3, [pc, #100]	; (8002470 <HAL_RCC_GetSysClockFreq+0x98>)
 800240a:	613b      	str	r3, [r7, #16]
      break;
 800240c:	e027      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	0c9b      	lsrs	r3, r3, #18
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	4a17      	ldr	r2, [pc, #92]	; (8002474 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002418:	5cd3      	ldrb	r3, [r2, r3]
 800241a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d010      	beq.n	8002448 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002426:	4b11      	ldr	r3, [pc, #68]	; (800246c <HAL_RCC_GetSysClockFreq+0x94>)
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	0c5b      	lsrs	r3, r3, #17
 800242c:	f003 0301 	and.w	r3, r3, #1
 8002430:	4a11      	ldr	r2, [pc, #68]	; (8002478 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002432:	5cd3      	ldrb	r3, [r2, r3]
 8002434:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <HAL_RCC_GetSysClockFreq+0x98>)
 800243a:	fb02 f203 	mul.w	r2, r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	fbb2 f3f3 	udiv	r3, r2, r3
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e004      	b.n	8002452 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a0c      	ldr	r2, [pc, #48]	; (800247c <HAL_RCC_GetSysClockFreq+0xa4>)
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	613b      	str	r3, [r7, #16]
      break;
 8002456:	e002      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002458:	4b05      	ldr	r3, [pc, #20]	; (8002470 <HAL_RCC_GetSysClockFreq+0x98>)
 800245a:	613b      	str	r3, [r7, #16]
      break;
 800245c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800245e:	693b      	ldr	r3, [r7, #16]
}
 8002460:	4618      	mov	r0, r3
 8002462:	371c      	adds	r7, #28
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	40021000 	.word	0x40021000
 8002470:	007a1200 	.word	0x007a1200
 8002474:	08002ea8 	.word	0x08002ea8
 8002478:	08002eb8 	.word	0x08002eb8
 800247c:	003d0900 	.word	0x003d0900

08002480 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002488:	4b0a      	ldr	r3, [pc, #40]	; (80024b4 <RCC_Delay+0x34>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a0a      	ldr	r2, [pc, #40]	; (80024b8 <RCC_Delay+0x38>)
 800248e:	fba2 2303 	umull	r2, r3, r2, r3
 8002492:	0a5b      	lsrs	r3, r3, #9
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800249c:	bf00      	nop
  }
  while (Delay --);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	1e5a      	subs	r2, r3, #1
 80024a2:	60fa      	str	r2, [r7, #12]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f9      	bne.n	800249c <RCC_Delay+0x1c>
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3714      	adds	r7, #20
 80024ae:	46bd      	mov	sp, r7
 80024b0:	bc80      	pop	{r7}
 80024b2:	4770      	bx	lr
 80024b4:	2000003c 	.word	0x2000003c
 80024b8:	10624dd3 	.word	0x10624dd3

080024bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e041      	b.n	8002552 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d106      	bne.n	80024e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2200      	movs	r2, #0
 80024de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7fe ff0c 	bl	8001300 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2202      	movs	r2, #2
 80024ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	4619      	mov	r1, r3
 80024fa:	4610      	mov	r0, r2
 80024fc:	f000 fa56 	bl	80029ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2201      	movs	r2, #1
 8002534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2201      	movs	r2, #1
 8002544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2201      	movs	r2, #1
 800254c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3708      	adds	r7, #8
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
	...

0800255c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800255c:	b480      	push	{r7}
 800255e:	b085      	sub	sp, #20
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d001      	beq.n	8002574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e035      	b.n	80025e0 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2202      	movs	r2, #2
 8002578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68da      	ldr	r2, [r3, #12]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f042 0201 	orr.w	r2, r2, #1
 800258a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a16      	ldr	r2, [pc, #88]	; (80025ec <HAL_TIM_Base_Start_IT+0x90>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d009      	beq.n	80025aa <HAL_TIM_Base_Start_IT+0x4e>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800259e:	d004      	beq.n	80025aa <HAL_TIM_Base_Start_IT+0x4e>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <HAL_TIM_Base_Start_IT+0x94>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d111      	bne.n	80025ce <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b06      	cmp	r3, #6
 80025ba:	d010      	beq.n	80025de <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f042 0201 	orr.w	r2, r2, #1
 80025ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025cc:	e007      	b.n	80025de <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681a      	ldr	r2, [r3, #0]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f042 0201 	orr.w	r2, r2, #1
 80025dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bc80      	pop	{r7}
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40012c00 	.word	0x40012c00
 80025f0:	40000400 	.word	0x40000400

080025f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d020      	beq.n	8002658 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d01b      	beq.n	8002658 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f06f 0202 	mvn.w	r2, #2
 8002628:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f998 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002644:	e005      	b.n	8002652 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f98b 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800264c:	6878      	ldr	r0, [r7, #4]
 800264e:	f000 f99a 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	d020      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b00      	cmp	r3, #0
 800266a:	d01b      	beq.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0204 	mvn.w	r2, #4
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f972 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f965 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f974 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d020      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	f003 0308 	and.w	r3, r3, #8
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d01b      	beq.n	80026f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f06f 0208 	mvn.w	r2, #8
 80026c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2204      	movs	r2, #4
 80026c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	f003 0303 	and.w	r3, r3, #3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f94c 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 80026dc:	e005      	b.n	80026ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f93f 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f94e 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f003 0310 	and.w	r3, r3, #16
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d020      	beq.n	800273c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f003 0310 	and.w	r3, r3, #16
 8002700:	2b00      	cmp	r3, #0
 8002702:	d01b      	beq.n	800273c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f06f 0210 	mvn.w	r2, #16
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2208      	movs	r2, #8
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	6878      	ldr	r0, [r7, #4]
 8002724:	f000 f926 	bl	8002974 <HAL_TIM_IC_CaptureCallback>
 8002728:	e005      	b.n	8002736 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f919 	bl	8002962 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f000 f928 	bl	8002986 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b00      	cmp	r3, #0
 8002744:	d00c      	beq.n	8002760 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f06f 0201 	mvn.w	r2, #1
 8002758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7fe fd74 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00c      	beq.n	8002784 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002770:	2b00      	cmp	r3, #0
 8002772:	d007      	beq.n	8002784 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800277c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa6f 	bl	8002c62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00c      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002794:	2b00      	cmp	r3, #0
 8002796:	d007      	beq.n	80027a8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f8f8 	bl	8002998 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	f003 0320 	and.w	r3, r3, #32
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00c      	beq.n	80027cc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d007      	beq.n	80027cc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f06f 0220 	mvn.w	r2, #32
 80027c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f000 fa42 	bl	8002c50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027cc:	bf00      	nop
 80027ce:	3710      	adds	r7, #16
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d101      	bne.n	80027f0 <HAL_TIM_ConfigClockSource+0x1c>
 80027ec:	2302      	movs	r3, #2
 80027ee:	e0b4      	b.n	800295a <HAL_TIM_ConfigClockSource+0x186>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800280e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68ba      	ldr	r2, [r7, #8]
 800281e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002828:	d03e      	beq.n	80028a8 <HAL_TIM_ConfigClockSource+0xd4>
 800282a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800282e:	f200 8087 	bhi.w	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002836:	f000 8086 	beq.w	8002946 <HAL_TIM_ConfigClockSource+0x172>
 800283a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800283e:	d87f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002840:	2b70      	cmp	r3, #112	; 0x70
 8002842:	d01a      	beq.n	800287a <HAL_TIM_ConfigClockSource+0xa6>
 8002844:	2b70      	cmp	r3, #112	; 0x70
 8002846:	d87b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002848:	2b60      	cmp	r3, #96	; 0x60
 800284a:	d050      	beq.n	80028ee <HAL_TIM_ConfigClockSource+0x11a>
 800284c:	2b60      	cmp	r3, #96	; 0x60
 800284e:	d877      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002850:	2b50      	cmp	r3, #80	; 0x50
 8002852:	d03c      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0xfa>
 8002854:	2b50      	cmp	r3, #80	; 0x50
 8002856:	d873      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002858:	2b40      	cmp	r3, #64	; 0x40
 800285a:	d058      	beq.n	800290e <HAL_TIM_ConfigClockSource+0x13a>
 800285c:	2b40      	cmp	r3, #64	; 0x40
 800285e:	d86f      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002860:	2b30      	cmp	r3, #48	; 0x30
 8002862:	d064      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002864:	2b30      	cmp	r3, #48	; 0x30
 8002866:	d86b      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002868:	2b20      	cmp	r3, #32
 800286a:	d060      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 800286c:	2b20      	cmp	r3, #32
 800286e:	d867      	bhi.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
 8002870:	2b00      	cmp	r3, #0
 8002872:	d05c      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002874:	2b10      	cmp	r3, #16
 8002876:	d05a      	beq.n	800292e <HAL_TIM_ConfigClockSource+0x15a>
 8002878:	e062      	b.n	8002940 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6818      	ldr	r0, [r3, #0]
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	685a      	ldr	r2, [r3, #4]
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f000 f96a 	bl	8002b62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800289c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	68ba      	ldr	r2, [r7, #8]
 80028a4:	609a      	str	r2, [r3, #8]
      break;
 80028a6:	e04f      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	6899      	ldr	r1, [r3, #8]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	f000 f953 	bl	8002b62 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028ca:	609a      	str	r2, [r3, #8]
      break;
 80028cc:	e03c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	461a      	mov	r2, r3
 80028dc:	f000 f8ca 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2150      	movs	r1, #80	; 0x50
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 f921 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 80028ec:	e02c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6818      	ldr	r0, [r3, #0]
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	6859      	ldr	r1, [r3, #4]
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	461a      	mov	r2, r3
 80028fc:	f000 f8e8 	bl	8002ad0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2160      	movs	r1, #96	; 0x60
 8002906:	4618      	mov	r0, r3
 8002908:	f000 f911 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 800290c:	e01c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	6859      	ldr	r1, [r3, #4]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	461a      	mov	r2, r3
 800291c:	f000 f8aa 	bl	8002a74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2140      	movs	r1, #64	; 0x40
 8002926:	4618      	mov	r0, r3
 8002928:	f000 f901 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 800292c:	e00c      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4619      	mov	r1, r3
 8002938:	4610      	mov	r0, r2
 800293a:	f000 f8f8 	bl	8002b2e <TIM_ITRx_SetConfig>
      break;
 800293e:	e003      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e000      	b.n	8002948 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002946:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr

08002986 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002986:	b480      	push	{r7}
 8002988:	b083      	sub	sp, #12
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800298e:	bf00      	nop
 8002990:	370c      	adds	r7, #12
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr

08002998 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bc80      	pop	{r7}
 80029a8:	4770      	bx	lr
	...

080029ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a2b      	ldr	r2, [pc, #172]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d007      	beq.n	80029d4 <TIM_Base_SetConfig+0x28>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ca:	d003      	beq.n	80029d4 <TIM_Base_SetConfig+0x28>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <TIM_Base_SetConfig+0xc4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d108      	bne.n	80029e6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a20      	ldr	r2, [pc, #128]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d007      	beq.n	80029fe <TIM_Base_SetConfig+0x52>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f4:	d003      	beq.n	80029fe <TIM_Base_SetConfig+0x52>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4a1d      	ldr	r2, [pc, #116]	; (8002a70 <TIM_Base_SetConfig+0xc4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d108      	bne.n	8002a10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	68fa      	ldr	r2, [r7, #12]
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	695b      	ldr	r3, [r3, #20]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	689a      	ldr	r2, [r3, #8]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a0d      	ldr	r2, [pc, #52]	; (8002a6c <TIM_Base_SetConfig+0xc0>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d103      	bne.n	8002a44 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	691a      	ldr	r2, [r3, #16]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d005      	beq.n	8002a62 <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	f023 0201 	bic.w	r2, r3, #1
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	611a      	str	r2, [r3, #16]
  }
}
 8002a62:	bf00      	nop
 8002a64:	3714      	adds	r7, #20
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bc80      	pop	{r7}
 8002a6a:	4770      	bx	lr
 8002a6c:	40012c00 	.word	0x40012c00
 8002a70:	40000400 	.word	0x40000400

08002a74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b087      	sub	sp, #28
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a1b      	ldr	r3, [r3, #32]
 8002a8a:	f023 0201 	bic.w	r2, r3, #1
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	699b      	ldr	r3, [r3, #24]
 8002a96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a98:	693b      	ldr	r3, [r7, #16]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	693a      	ldr	r2, [r7, #16]
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	f023 030a 	bic.w	r3, r3, #10
 8002ab0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab2:	697a      	ldr	r2, [r7, #20]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	697a      	ldr	r2, [r7, #20]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6a1b      	ldr	r3, [r3, #32]
 8002ae6:	f023 0210 	bic.w	r2, r3, #16
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af4:	693b      	ldr	r3, [r7, #16]
 8002af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	031b      	lsls	r3, r3, #12
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	697a      	ldr	r2, [r7, #20]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	693a      	ldr	r2, [r7, #16]
 8002b1c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	621a      	str	r2, [r3, #32]
}
 8002b24:	bf00      	nop
 8002b26:	371c      	adds	r7, #28
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bc80      	pop	{r7}
 8002b2c:	4770      	bx	lr

08002b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b085      	sub	sp, #20
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
 8002b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b46:	683a      	ldr	r2, [r7, #0]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	f043 0307 	orr.w	r3, r3, #7
 8002b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	609a      	str	r2, [r3, #8]
}
 8002b58:	bf00      	nop
 8002b5a:	3714      	adds	r7, #20
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr

08002b62 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b62:	b480      	push	{r7}
 8002b64:	b087      	sub	sp, #28
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	60f8      	str	r0, [r7, #12]
 8002b6a:	60b9      	str	r1, [r7, #8]
 8002b6c:	607a      	str	r2, [r7, #4]
 8002b6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b7c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	021a      	lsls	r2, r3, #8
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	431a      	orrs	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	609a      	str	r2, [r3, #8]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b085      	sub	sp, #20
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d101      	bne.n	8002bb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	e041      	b.n	8002c3c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2202      	movs	r2, #2
 8002bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68fa      	ldr	r2, [r7, #12]
 8002bf0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d009      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c04:	d004      	beq.n	8002c10 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a10      	ldr	r2, [pc, #64]	; (8002c4c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d10c      	bne.n	8002c2a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	68ba      	ldr	r2, [r7, #8]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68ba      	ldr	r2, [r7, #8]
 8002c28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3714      	adds	r7, #20
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40012c00 	.word	0x40012c00
 8002c4c:	40000400 	.word	0x40000400

08002c50 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bc80      	pop	{r7}
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr

08002c74 <__errno>:
 8002c74:	4b01      	ldr	r3, [pc, #4]	; (8002c7c <__errno+0x8>)
 8002c76:	6818      	ldr	r0, [r3, #0]
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	2000004c 	.word	0x2000004c

08002c80 <__libc_init_array>:
 8002c80:	b570      	push	{r4, r5, r6, lr}
 8002c82:	2600      	movs	r6, #0
 8002c84:	4d0c      	ldr	r5, [pc, #48]	; (8002cb8 <__libc_init_array+0x38>)
 8002c86:	4c0d      	ldr	r4, [pc, #52]	; (8002cbc <__libc_init_array+0x3c>)
 8002c88:	1b64      	subs	r4, r4, r5
 8002c8a:	10a4      	asrs	r4, r4, #2
 8002c8c:	42a6      	cmp	r6, r4
 8002c8e:	d109      	bne.n	8002ca4 <__libc_init_array+0x24>
 8002c90:	f000 f8f6 	bl	8002e80 <_init>
 8002c94:	2600      	movs	r6, #0
 8002c96:	4d0a      	ldr	r5, [pc, #40]	; (8002cc0 <__libc_init_array+0x40>)
 8002c98:	4c0a      	ldr	r4, [pc, #40]	; (8002cc4 <__libc_init_array+0x44>)
 8002c9a:	1b64      	subs	r4, r4, r5
 8002c9c:	10a4      	asrs	r4, r4, #2
 8002c9e:	42a6      	cmp	r6, r4
 8002ca0:	d105      	bne.n	8002cae <__libc_init_array+0x2e>
 8002ca2:	bd70      	pop	{r4, r5, r6, pc}
 8002ca4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ca8:	4798      	blx	r3
 8002caa:	3601      	adds	r6, #1
 8002cac:	e7ee      	b.n	8002c8c <__libc_init_array+0xc>
 8002cae:	f855 3b04 	ldr.w	r3, [r5], #4
 8002cb2:	4798      	blx	r3
 8002cb4:	3601      	adds	r6, #1
 8002cb6:	e7f2      	b.n	8002c9e <__libc_init_array+0x1e>
 8002cb8:	08002ebc 	.word	0x08002ebc
 8002cbc:	08002ebc 	.word	0x08002ebc
 8002cc0:	08002ebc 	.word	0x08002ebc
 8002cc4:	08002ec0 	.word	0x08002ec0

08002cc8 <malloc>:
 8002cc8:	4b02      	ldr	r3, [pc, #8]	; (8002cd4 <malloc+0xc>)
 8002cca:	4601      	mov	r1, r0
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	f000 b85f 	b.w	8002d90 <_malloc_r>
 8002cd2:	bf00      	nop
 8002cd4:	2000004c 	.word	0x2000004c

08002cd8 <free>:
 8002cd8:	4b02      	ldr	r3, [pc, #8]	; (8002ce4 <free+0xc>)
 8002cda:	4601      	mov	r1, r0
 8002cdc:	6818      	ldr	r0, [r3, #0]
 8002cde:	f000 b80b 	b.w	8002cf8 <_free_r>
 8002ce2:	bf00      	nop
 8002ce4:	2000004c 	.word	0x2000004c

08002ce8 <memset>:
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4402      	add	r2, r0
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d100      	bne.n	8002cf2 <memset+0xa>
 8002cf0:	4770      	bx	lr
 8002cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002cf6:	e7f9      	b.n	8002cec <memset+0x4>

08002cf8 <_free_r>:
 8002cf8:	b538      	push	{r3, r4, r5, lr}
 8002cfa:	4605      	mov	r5, r0
 8002cfc:	2900      	cmp	r1, #0
 8002cfe:	d043      	beq.n	8002d88 <_free_r+0x90>
 8002d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002d04:	1f0c      	subs	r4, r1, #4
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	bfb8      	it	lt
 8002d0a:	18e4      	addlt	r4, r4, r3
 8002d0c:	f000 f8aa 	bl	8002e64 <__malloc_lock>
 8002d10:	4a1e      	ldr	r2, [pc, #120]	; (8002d8c <_free_r+0x94>)
 8002d12:	6813      	ldr	r3, [r2, #0]
 8002d14:	4610      	mov	r0, r2
 8002d16:	b933      	cbnz	r3, 8002d26 <_free_r+0x2e>
 8002d18:	6063      	str	r3, [r4, #4]
 8002d1a:	6014      	str	r4, [r2, #0]
 8002d1c:	4628      	mov	r0, r5
 8002d1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d22:	f000 b8a5 	b.w	8002e70 <__malloc_unlock>
 8002d26:	42a3      	cmp	r3, r4
 8002d28:	d90a      	bls.n	8002d40 <_free_r+0x48>
 8002d2a:	6821      	ldr	r1, [r4, #0]
 8002d2c:	1862      	adds	r2, r4, r1
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	bf01      	itttt	eq
 8002d32:	681a      	ldreq	r2, [r3, #0]
 8002d34:	685b      	ldreq	r3, [r3, #4]
 8002d36:	1852      	addeq	r2, r2, r1
 8002d38:	6022      	streq	r2, [r4, #0]
 8002d3a:	6063      	str	r3, [r4, #4]
 8002d3c:	6004      	str	r4, [r0, #0]
 8002d3e:	e7ed      	b.n	8002d1c <_free_r+0x24>
 8002d40:	461a      	mov	r2, r3
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	b10b      	cbz	r3, 8002d4a <_free_r+0x52>
 8002d46:	42a3      	cmp	r3, r4
 8002d48:	d9fa      	bls.n	8002d40 <_free_r+0x48>
 8002d4a:	6811      	ldr	r1, [r2, #0]
 8002d4c:	1850      	adds	r0, r2, r1
 8002d4e:	42a0      	cmp	r0, r4
 8002d50:	d10b      	bne.n	8002d6a <_free_r+0x72>
 8002d52:	6820      	ldr	r0, [r4, #0]
 8002d54:	4401      	add	r1, r0
 8002d56:	1850      	adds	r0, r2, r1
 8002d58:	4283      	cmp	r3, r0
 8002d5a:	6011      	str	r1, [r2, #0]
 8002d5c:	d1de      	bne.n	8002d1c <_free_r+0x24>
 8002d5e:	6818      	ldr	r0, [r3, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	4401      	add	r1, r0
 8002d64:	6011      	str	r1, [r2, #0]
 8002d66:	6053      	str	r3, [r2, #4]
 8002d68:	e7d8      	b.n	8002d1c <_free_r+0x24>
 8002d6a:	d902      	bls.n	8002d72 <_free_r+0x7a>
 8002d6c:	230c      	movs	r3, #12
 8002d6e:	602b      	str	r3, [r5, #0]
 8002d70:	e7d4      	b.n	8002d1c <_free_r+0x24>
 8002d72:	6820      	ldr	r0, [r4, #0]
 8002d74:	1821      	adds	r1, r4, r0
 8002d76:	428b      	cmp	r3, r1
 8002d78:	bf01      	itttt	eq
 8002d7a:	6819      	ldreq	r1, [r3, #0]
 8002d7c:	685b      	ldreq	r3, [r3, #4]
 8002d7e:	1809      	addeq	r1, r1, r0
 8002d80:	6021      	streq	r1, [r4, #0]
 8002d82:	6063      	str	r3, [r4, #4]
 8002d84:	6054      	str	r4, [r2, #4]
 8002d86:	e7c9      	b.n	8002d1c <_free_r+0x24>
 8002d88:	bd38      	pop	{r3, r4, r5, pc}
 8002d8a:	bf00      	nop
 8002d8c:	20000104 	.word	0x20000104

08002d90 <_malloc_r>:
 8002d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d92:	1ccd      	adds	r5, r1, #3
 8002d94:	f025 0503 	bic.w	r5, r5, #3
 8002d98:	3508      	adds	r5, #8
 8002d9a:	2d0c      	cmp	r5, #12
 8002d9c:	bf38      	it	cc
 8002d9e:	250c      	movcc	r5, #12
 8002da0:	2d00      	cmp	r5, #0
 8002da2:	4606      	mov	r6, r0
 8002da4:	db01      	blt.n	8002daa <_malloc_r+0x1a>
 8002da6:	42a9      	cmp	r1, r5
 8002da8:	d903      	bls.n	8002db2 <_malloc_r+0x22>
 8002daa:	230c      	movs	r3, #12
 8002dac:	6033      	str	r3, [r6, #0]
 8002dae:	2000      	movs	r0, #0
 8002db0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002db2:	f000 f857 	bl	8002e64 <__malloc_lock>
 8002db6:	4921      	ldr	r1, [pc, #132]	; (8002e3c <_malloc_r+0xac>)
 8002db8:	680a      	ldr	r2, [r1, #0]
 8002dba:	4614      	mov	r4, r2
 8002dbc:	b99c      	cbnz	r4, 8002de6 <_malloc_r+0x56>
 8002dbe:	4f20      	ldr	r7, [pc, #128]	; (8002e40 <_malloc_r+0xb0>)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	b923      	cbnz	r3, 8002dce <_malloc_r+0x3e>
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	4630      	mov	r0, r6
 8002dc8:	f000 f83c 	bl	8002e44 <_sbrk_r>
 8002dcc:	6038      	str	r0, [r7, #0]
 8002dce:	4629      	mov	r1, r5
 8002dd0:	4630      	mov	r0, r6
 8002dd2:	f000 f837 	bl	8002e44 <_sbrk_r>
 8002dd6:	1c43      	adds	r3, r0, #1
 8002dd8:	d123      	bne.n	8002e22 <_malloc_r+0x92>
 8002dda:	230c      	movs	r3, #12
 8002ddc:	4630      	mov	r0, r6
 8002dde:	6033      	str	r3, [r6, #0]
 8002de0:	f000 f846 	bl	8002e70 <__malloc_unlock>
 8002de4:	e7e3      	b.n	8002dae <_malloc_r+0x1e>
 8002de6:	6823      	ldr	r3, [r4, #0]
 8002de8:	1b5b      	subs	r3, r3, r5
 8002dea:	d417      	bmi.n	8002e1c <_malloc_r+0x8c>
 8002dec:	2b0b      	cmp	r3, #11
 8002dee:	d903      	bls.n	8002df8 <_malloc_r+0x68>
 8002df0:	6023      	str	r3, [r4, #0]
 8002df2:	441c      	add	r4, r3
 8002df4:	6025      	str	r5, [r4, #0]
 8002df6:	e004      	b.n	8002e02 <_malloc_r+0x72>
 8002df8:	6863      	ldr	r3, [r4, #4]
 8002dfa:	42a2      	cmp	r2, r4
 8002dfc:	bf0c      	ite	eq
 8002dfe:	600b      	streq	r3, [r1, #0]
 8002e00:	6053      	strne	r3, [r2, #4]
 8002e02:	4630      	mov	r0, r6
 8002e04:	f000 f834 	bl	8002e70 <__malloc_unlock>
 8002e08:	f104 000b 	add.w	r0, r4, #11
 8002e0c:	1d23      	adds	r3, r4, #4
 8002e0e:	f020 0007 	bic.w	r0, r0, #7
 8002e12:	1ac2      	subs	r2, r0, r3
 8002e14:	d0cc      	beq.n	8002db0 <_malloc_r+0x20>
 8002e16:	1a1b      	subs	r3, r3, r0
 8002e18:	50a3      	str	r3, [r4, r2]
 8002e1a:	e7c9      	b.n	8002db0 <_malloc_r+0x20>
 8002e1c:	4622      	mov	r2, r4
 8002e1e:	6864      	ldr	r4, [r4, #4]
 8002e20:	e7cc      	b.n	8002dbc <_malloc_r+0x2c>
 8002e22:	1cc4      	adds	r4, r0, #3
 8002e24:	f024 0403 	bic.w	r4, r4, #3
 8002e28:	42a0      	cmp	r0, r4
 8002e2a:	d0e3      	beq.n	8002df4 <_malloc_r+0x64>
 8002e2c:	1a21      	subs	r1, r4, r0
 8002e2e:	4630      	mov	r0, r6
 8002e30:	f000 f808 	bl	8002e44 <_sbrk_r>
 8002e34:	3001      	adds	r0, #1
 8002e36:	d1dd      	bne.n	8002df4 <_malloc_r+0x64>
 8002e38:	e7cf      	b.n	8002dda <_malloc_r+0x4a>
 8002e3a:	bf00      	nop
 8002e3c:	20000104 	.word	0x20000104
 8002e40:	20000108 	.word	0x20000108

08002e44 <_sbrk_r>:
 8002e44:	b538      	push	{r3, r4, r5, lr}
 8002e46:	2300      	movs	r3, #0
 8002e48:	4d05      	ldr	r5, [pc, #20]	; (8002e60 <_sbrk_r+0x1c>)
 8002e4a:	4604      	mov	r4, r0
 8002e4c:	4608      	mov	r0, r1
 8002e4e:	602b      	str	r3, [r5, #0]
 8002e50:	f7fe faac 	bl	80013ac <_sbrk>
 8002e54:	1c43      	adds	r3, r0, #1
 8002e56:	d102      	bne.n	8002e5e <_sbrk_r+0x1a>
 8002e58:	682b      	ldr	r3, [r5, #0]
 8002e5a:	b103      	cbz	r3, 8002e5e <_sbrk_r+0x1a>
 8002e5c:	6023      	str	r3, [r4, #0]
 8002e5e:	bd38      	pop	{r3, r4, r5, pc}
 8002e60:	200004b8 	.word	0x200004b8

08002e64 <__malloc_lock>:
 8002e64:	4801      	ldr	r0, [pc, #4]	; (8002e6c <__malloc_lock+0x8>)
 8002e66:	f000 b809 	b.w	8002e7c <__retarget_lock_acquire_recursive>
 8002e6a:	bf00      	nop
 8002e6c:	200004c0 	.word	0x200004c0

08002e70 <__malloc_unlock>:
 8002e70:	4801      	ldr	r0, [pc, #4]	; (8002e78 <__malloc_unlock+0x8>)
 8002e72:	f000 b804 	b.w	8002e7e <__retarget_lock_release_recursive>
 8002e76:	bf00      	nop
 8002e78:	200004c0 	.word	0x200004c0

08002e7c <__retarget_lock_acquire_recursive>:
 8002e7c:	4770      	bx	lr

08002e7e <__retarget_lock_release_recursive>:
 8002e7e:	4770      	bx	lr

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
