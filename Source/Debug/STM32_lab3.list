
STM32_lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c44  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002d50  08002d50  00012d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d74  08002d74  000200b0  2**0
                  CONTENTS
  4 .ARM          00000000  08002d74  08002d74  000200b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002d74  08002d74  000200b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d74  08002d74  00012d74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d78  08002d78  00012d78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b0  20000000  08002d7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000410  200000b0  08002e2c  000200b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004c0  08002e2c  000204c0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf46  00000000  00000000  000200d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000021e7  00000000  00000000  0002c01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002e208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a0  00000000  00000000  0002eca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b73  00000000  00000000  0002f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd4a  00000000  00000000  000471bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085de1  00000000  00000000  00053f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b58  00000000  00000000  000d9d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000b0 	.word	0x200000b0
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d38 	.word	0x08002d38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000b4 	.word	0x200000b4
 8000148:	08002d38 	.word	0x08002d38

0800014c <display7SEG>:
    SEG5_Pin,
    SEG6_Pin
};


void display7SEG(uint8_t index){
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	2b03      	cmp	r3, #3
 800015a:	d873      	bhi.n	8000244 <display7SEG+0xf8>
 800015c:	a201      	add	r2, pc, #4	; (adr r2, 8000164 <display7SEG+0x18>)
 800015e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000162:	bf00      	nop
 8000164:	08000175 	.word	0x08000175
 8000168:	080001a9 	.word	0x080001a9
 800016c:	080001dd 	.word	0x080001dd
 8000170:	08000211 	.word	0x08000211
	case 0://SEG_0
		number7SEG(led_buffer[0]);
 8000174:	4b36      	ldr	r3, [pc, #216]	; (8000250 <display7SEG+0x104>)
 8000176:	781b      	ldrb	r3, [r3, #0]
 8000178:	4618      	mov	r0, r3
 800017a:	f000 f8cd 	bl	8000318 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, SET);
 800017e:	2201      	movs	r2, #1
 8000180:	2108      	movs	r1, #8
 8000182:	4834      	ldr	r0, [pc, #208]	; (8000254 <display7SEG+0x108>)
 8000184:	f001 fce9 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	2110      	movs	r1, #16
 800018c:	4831      	ldr	r0, [pc, #196]	; (8000254 <display7SEG+0x108>)
 800018e:	f001 fce4 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000192:	2200      	movs	r2, #0
 8000194:	2120      	movs	r1, #32
 8000196:	482f      	ldr	r0, [pc, #188]	; (8000254 <display7SEG+0x108>)
 8000198:	f001 fcdf 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 800019c:	2200      	movs	r2, #0
 800019e:	2140      	movs	r1, #64	; 0x40
 80001a0:	482c      	ldr	r0, [pc, #176]	; (8000254 <display7SEG+0x108>)
 80001a2:	f001 fcda 	bl	8001b5a <HAL_GPIO_WritePin>
		break;
 80001a6:	e04e      	b.n	8000246 <display7SEG+0xfa>
	case 1://SEG_1
		number7SEG(led_buffer[1]);
 80001a8:	4b29      	ldr	r3, [pc, #164]	; (8000250 <display7SEG+0x104>)
 80001aa:	785b      	ldrb	r3, [r3, #1]
 80001ac:	4618      	mov	r0, r3
 80001ae:	f000 f8b3 	bl	8000318 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80001b2:	2200      	movs	r2, #0
 80001b4:	2108      	movs	r1, #8
 80001b6:	4827      	ldr	r0, [pc, #156]	; (8000254 <display7SEG+0x108>)
 80001b8:	f001 fccf 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 80001bc:	2201      	movs	r2, #1
 80001be:	2110      	movs	r1, #16
 80001c0:	4824      	ldr	r0, [pc, #144]	; (8000254 <display7SEG+0x108>)
 80001c2:	f001 fcca 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 80001c6:	2200      	movs	r2, #0
 80001c8:	2120      	movs	r1, #32
 80001ca:	4822      	ldr	r0, [pc, #136]	; (8000254 <display7SEG+0x108>)
 80001cc:	f001 fcc5 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2140      	movs	r1, #64	; 0x40
 80001d4:	481f      	ldr	r0, [pc, #124]	; (8000254 <display7SEG+0x108>)
 80001d6:	f001 fcc0 	bl	8001b5a <HAL_GPIO_WritePin>
		break;
 80001da:	e034      	b.n	8000246 <display7SEG+0xfa>
	case 2://SEG_2
		number7SEG(led_buffer[2]);
 80001dc:	4b1c      	ldr	r3, [pc, #112]	; (8000250 <display7SEG+0x104>)
 80001de:	789b      	ldrb	r3, [r3, #2]
 80001e0:	4618      	mov	r0, r3
 80001e2:	f000 f899 	bl	8000318 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 80001e6:	2200      	movs	r2, #0
 80001e8:	2108      	movs	r1, #8
 80001ea:	481a      	ldr	r0, [pc, #104]	; (8000254 <display7SEG+0x108>)
 80001ec:	f001 fcb5 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	4817      	ldr	r0, [pc, #92]	; (8000254 <display7SEG+0x108>)
 80001f6:	f001 fcb0 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 80001fa:	2201      	movs	r2, #1
 80001fc:	2120      	movs	r1, #32
 80001fe:	4815      	ldr	r0, [pc, #84]	; (8000254 <display7SEG+0x108>)
 8000200:	f001 fcab 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000204:	2200      	movs	r2, #0
 8000206:	2140      	movs	r1, #64	; 0x40
 8000208:	4812      	ldr	r0, [pc, #72]	; (8000254 <display7SEG+0x108>)
 800020a:	f001 fca6 	bl	8001b5a <HAL_GPIO_WritePin>
		break;
 800020e:	e01a      	b.n	8000246 <display7SEG+0xfa>
	case 3://SEG_3
		number7SEG(led_buffer[3]);
 8000210:	4b0f      	ldr	r3, [pc, #60]	; (8000250 <display7SEG+0x104>)
 8000212:	78db      	ldrb	r3, [r3, #3]
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f87f 	bl	8000318 <number7SEG>
		HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, RESET);
 800021a:	2200      	movs	r2, #0
 800021c:	2108      	movs	r1, #8
 800021e:	480d      	ldr	r0, [pc, #52]	; (8000254 <display7SEG+0x108>)
 8000220:	f001 fc9b 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000224:	2200      	movs	r2, #0
 8000226:	2110      	movs	r1, #16
 8000228:	480a      	ldr	r0, [pc, #40]	; (8000254 <display7SEG+0x108>)
 800022a:	f001 fc96 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 800022e:	2200      	movs	r2, #0
 8000230:	2120      	movs	r1, #32
 8000232:	4808      	ldr	r0, [pc, #32]	; (8000254 <display7SEG+0x108>)
 8000234:	f001 fc91 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000238:	2201      	movs	r2, #1
 800023a:	2140      	movs	r1, #64	; 0x40
 800023c:	4805      	ldr	r0, [pc, #20]	; (8000254 <display7SEG+0x108>)
 800023e:	f001 fc8c 	bl	8001b5a <HAL_GPIO_WritePin>
		break;
 8000242:	e000      	b.n	8000246 <display7SEG+0xfa>
	default:
		break;
 8000244:	bf00      	nop
	}
};
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	20000298 	.word	0x20000298
 8000254:	40010800 	.word	0x40010800

08000258 <update7SEG>:

void update7SEG(){
 8000258:	b480      	push	{r7}
 800025a:	af00      	add	r7, sp, #0
	led_buffer[0] = main_traffic.count_down / 10;
 800025c:	4b1f      	ldr	r3, [pc, #124]	; (80002dc <update7SEG+0x84>)
 800025e:	785b      	ldrb	r3, [r3, #1]
 8000260:	4a1f      	ldr	r2, [pc, #124]	; (80002e0 <update7SEG+0x88>)
 8000262:	fba2 2303 	umull	r2, r3, r2, r3
 8000266:	08db      	lsrs	r3, r3, #3
 8000268:	b2da      	uxtb	r2, r3
 800026a:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <update7SEG+0x8c>)
 800026c:	701a      	strb	r2, [r3, #0]
	if(led_buffer[0] == 0) led_buffer[0] = 10;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <update7SEG+0x8c>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b00      	cmp	r3, #0
 8000274:	d102      	bne.n	800027c <update7SEG+0x24>
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <update7SEG+0x8c>)
 8000278:	220a      	movs	r2, #10
 800027a:	701a      	strb	r2, [r3, #0]
	led_buffer[1] = main_traffic.count_down % 10;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <update7SEG+0x84>)
 800027e:	785a      	ldrb	r2, [r3, #1]
 8000280:	4b17      	ldr	r3, [pc, #92]	; (80002e0 <update7SEG+0x88>)
 8000282:	fba3 1302 	umull	r1, r3, r3, r2
 8000286:	08d9      	lsrs	r1, r3, #3
 8000288:	460b      	mov	r3, r1
 800028a:	009b      	lsls	r3, r3, #2
 800028c:	440b      	add	r3, r1
 800028e:	005b      	lsls	r3, r3, #1
 8000290:	1ad3      	subs	r3, r2, r3
 8000292:	b2da      	uxtb	r2, r3
 8000294:	4b13      	ldr	r3, [pc, #76]	; (80002e4 <update7SEG+0x8c>)
 8000296:	705a      	strb	r2, [r3, #1]

	led_buffer[2] = side_traffic.count_down / 10;
 8000298:	4b13      	ldr	r3, [pc, #76]	; (80002e8 <update7SEG+0x90>)
 800029a:	785b      	ldrb	r3, [r3, #1]
 800029c:	4a10      	ldr	r2, [pc, #64]	; (80002e0 <update7SEG+0x88>)
 800029e:	fba2 2303 	umull	r2, r3, r2, r3
 80002a2:	08db      	lsrs	r3, r3, #3
 80002a4:	b2da      	uxtb	r2, r3
 80002a6:	4b0f      	ldr	r3, [pc, #60]	; (80002e4 <update7SEG+0x8c>)
 80002a8:	709a      	strb	r2, [r3, #2]
	if(led_buffer[2] == 0) led_buffer[2] = 10;
 80002aa:	4b0e      	ldr	r3, [pc, #56]	; (80002e4 <update7SEG+0x8c>)
 80002ac:	789b      	ldrb	r3, [r3, #2]
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d102      	bne.n	80002b8 <update7SEG+0x60>
 80002b2:	4b0c      	ldr	r3, [pc, #48]	; (80002e4 <update7SEG+0x8c>)
 80002b4:	220a      	movs	r2, #10
 80002b6:	709a      	strb	r2, [r3, #2]
	led_buffer[3] = side_traffic.count_down % 10;
 80002b8:	4b0b      	ldr	r3, [pc, #44]	; (80002e8 <update7SEG+0x90>)
 80002ba:	785a      	ldrb	r2, [r3, #1]
 80002bc:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <update7SEG+0x88>)
 80002be:	fba3 1302 	umull	r1, r3, r3, r2
 80002c2:	08d9      	lsrs	r1, r3, #3
 80002c4:	460b      	mov	r3, r1
 80002c6:	009b      	lsls	r3, r3, #2
 80002c8:	440b      	add	r3, r1
 80002ca:	005b      	lsls	r3, r3, #1
 80002cc:	1ad3      	subs	r3, r2, r3
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b04      	ldr	r3, [pc, #16]	; (80002e4 <update7SEG+0x8c>)
 80002d2:	70da      	strb	r2, [r3, #3]
};
 80002d4:	bf00      	nop
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	2000002c 	.word	0x2000002c
 80002e0:	cccccccd 	.word	0xcccccccd
 80002e4:	20000298 	.word	0x20000298
 80002e8:	20000034 	.word	0x20000034

080002ec <countDown7SEG>:

void countDown7SEG(){
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	main_traffic.count_down--;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <countDown7SEG+0x24>)
 80002f2:	785b      	ldrb	r3, [r3, #1]
 80002f4:	3b01      	subs	r3, #1
 80002f6:	b2da      	uxtb	r2, r3
 80002f8:	4b05      	ldr	r3, [pc, #20]	; (8000310 <countDown7SEG+0x24>)
 80002fa:	705a      	strb	r2, [r3, #1]
	side_traffic.count_down--;
 80002fc:	4b05      	ldr	r3, [pc, #20]	; (8000314 <countDown7SEG+0x28>)
 80002fe:	785b      	ldrb	r3, [r3, #1]
 8000300:	3b01      	subs	r3, #1
 8000302:	b2da      	uxtb	r2, r3
 8000304:	4b03      	ldr	r3, [pc, #12]	; (8000314 <countDown7SEG+0x28>)
 8000306:	705a      	strb	r2, [r3, #1]
	update7SEG();
 8000308:	f7ff ffa6 	bl	8000258 <update7SEG>
};
 800030c:	bf00      	nop
 800030e:	bd80      	pop	{r7, pc}
 8000310:	2000002c 	.word	0x2000002c
 8000314:	20000034 	.word	0x20000034

08000318 <number7SEG>:

void number7SEG(uint8_t number){
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
 800031e:	4603      	mov	r3, r0
 8000320:	71fb      	strb	r3, [r7, #7]
	switch(number) {
 8000322:	79fb      	ldrb	r3, [r7, #7]
 8000324:	2b0a      	cmp	r3, #10
 8000326:	f200 828d 	bhi.w	8000844 <number7SEG+0x52c>
 800032a:	a201      	add	r2, pc, #4	; (adr r2, 8000330 <number7SEG+0x18>)
 800032c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000330:	080003cf 	.word	0x080003cf
 8000334:	08000441 	.word	0x08000441
 8000338:	080004b3 	.word	0x080004b3
 800033c:	08000525 	.word	0x08000525
 8000340:	080005a1 	.word	0x080005a1
 8000344:	08000613 	.word	0x08000613
 8000348:	08000685 	.word	0x08000685
 800034c:	080006f7 	.word	0x080006f7
 8000350:	08000769 	.word	0x08000769
 8000354:	080007cb 	.word	0x080007cb
 8000358:	0800035d 	.word	0x0800035d
	    case 10: // ALL OFF
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 800035c:	4b8e      	ldr	r3, [pc, #568]	; (8000598 <number7SEG+0x280>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a8e      	ldr	r2, [pc, #568]	; (800059c <number7SEG+0x284>)
 8000362:	8811      	ldrh	r1, [r2, #0]
 8000364:	2201      	movs	r2, #1
 8000366:	4618      	mov	r0, r3
 8000368:	f001 fbf7 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 800036c:	4b8a      	ldr	r3, [pc, #552]	; (8000598 <number7SEG+0x280>)
 800036e:	685b      	ldr	r3, [r3, #4]
 8000370:	4a8a      	ldr	r2, [pc, #552]	; (800059c <number7SEG+0x284>)
 8000372:	8851      	ldrh	r1, [r2, #2]
 8000374:	2201      	movs	r2, #1
 8000376:	4618      	mov	r0, r3
 8000378:	f001 fbef 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 800037c:	4b86      	ldr	r3, [pc, #536]	; (8000598 <number7SEG+0x280>)
 800037e:	689b      	ldr	r3, [r3, #8]
 8000380:	4a86      	ldr	r2, [pc, #536]	; (800059c <number7SEG+0x284>)
 8000382:	8891      	ldrh	r1, [r2, #4]
 8000384:	2201      	movs	r2, #1
 8000386:	4618      	mov	r0, r3
 8000388:	f001 fbe7 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 800038c:	4b82      	ldr	r3, [pc, #520]	; (8000598 <number7SEG+0x280>)
 800038e:	68db      	ldr	r3, [r3, #12]
 8000390:	4a82      	ldr	r2, [pc, #520]	; (800059c <number7SEG+0x284>)
 8000392:	88d1      	ldrh	r1, [r2, #6]
 8000394:	2201      	movs	r2, #1
 8000396:	4618      	mov	r0, r3
 8000398:	f001 fbdf 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800039c:	4b7e      	ldr	r3, [pc, #504]	; (8000598 <number7SEG+0x280>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4a7e      	ldr	r2, [pc, #504]	; (800059c <number7SEG+0x284>)
 80003a2:	8911      	ldrh	r1, [r2, #8]
 80003a4:	2201      	movs	r2, #1
 80003a6:	4618      	mov	r0, r3
 80003a8:	f001 fbd7 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 80003ac:	4b7a      	ldr	r3, [pc, #488]	; (8000598 <number7SEG+0x280>)
 80003ae:	695b      	ldr	r3, [r3, #20]
 80003b0:	4a7a      	ldr	r2, [pc, #488]	; (800059c <number7SEG+0x284>)
 80003b2:	8951      	ldrh	r1, [r2, #10]
 80003b4:	2201      	movs	r2, #1
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 fbcf 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 80003bc:	4b76      	ldr	r3, [pc, #472]	; (8000598 <number7SEG+0x280>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a76      	ldr	r2, [pc, #472]	; (800059c <number7SEG+0x284>)
 80003c2:	8991      	ldrh	r1, [r2, #12]
 80003c4:	2201      	movs	r2, #1
 80003c6:	4618      	mov	r0, r3
 80003c8:	f001 fbc7 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 80003cc:	e273      	b.n	80008b6 <number7SEG+0x59e>
	    case 0:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80003ce:	4b72      	ldr	r3, [pc, #456]	; (8000598 <number7SEG+0x280>)
 80003d0:	681b      	ldr	r3, [r3, #0]
 80003d2:	4a72      	ldr	r2, [pc, #456]	; (800059c <number7SEG+0x284>)
 80003d4:	8811      	ldrh	r1, [r2, #0]
 80003d6:	2200      	movs	r2, #0
 80003d8:	4618      	mov	r0, r3
 80003da:	f001 fbbe 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80003de:	4b6e      	ldr	r3, [pc, #440]	; (8000598 <number7SEG+0x280>)
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	4a6e      	ldr	r2, [pc, #440]	; (800059c <number7SEG+0x284>)
 80003e4:	8851      	ldrh	r1, [r2, #2]
 80003e6:	2200      	movs	r2, #0
 80003e8:	4618      	mov	r0, r3
 80003ea:	f001 fbb6 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80003ee:	4b6a      	ldr	r3, [pc, #424]	; (8000598 <number7SEG+0x280>)
 80003f0:	689b      	ldr	r3, [r3, #8]
 80003f2:	4a6a      	ldr	r2, [pc, #424]	; (800059c <number7SEG+0x284>)
 80003f4:	8891      	ldrh	r1, [r2, #4]
 80003f6:	2200      	movs	r2, #0
 80003f8:	4618      	mov	r0, r3
 80003fa:	f001 fbae 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80003fe:	4b66      	ldr	r3, [pc, #408]	; (8000598 <number7SEG+0x280>)
 8000400:	68db      	ldr	r3, [r3, #12]
 8000402:	4a66      	ldr	r2, [pc, #408]	; (800059c <number7SEG+0x284>)
 8000404:	88d1      	ldrh	r1, [r2, #6]
 8000406:	2200      	movs	r2, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fba6 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 800040e:	4b62      	ldr	r3, [pc, #392]	; (8000598 <number7SEG+0x280>)
 8000410:	691b      	ldr	r3, [r3, #16]
 8000412:	4a62      	ldr	r2, [pc, #392]	; (800059c <number7SEG+0x284>)
 8000414:	8911      	ldrh	r1, [r2, #8]
 8000416:	2200      	movs	r2, #0
 8000418:	4618      	mov	r0, r3
 800041a:	f001 fb9e 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 800041e:	4b5e      	ldr	r3, [pc, #376]	; (8000598 <number7SEG+0x280>)
 8000420:	695b      	ldr	r3, [r3, #20]
 8000422:	4a5e      	ldr	r2, [pc, #376]	; (800059c <number7SEG+0x284>)
 8000424:	8951      	ldrh	r1, [r2, #10]
 8000426:	2200      	movs	r2, #0
 8000428:	4618      	mov	r0, r3
 800042a:	f001 fb96 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 800042e:	4b5a      	ldr	r3, [pc, #360]	; (8000598 <number7SEG+0x280>)
 8000430:	699b      	ldr	r3, [r3, #24]
 8000432:	4a5a      	ldr	r2, [pc, #360]	; (800059c <number7SEG+0x284>)
 8000434:	8991      	ldrh	r1, [r2, #12]
 8000436:	2201      	movs	r2, #1
 8000438:	4618      	mov	r0, r3
 800043a:	f001 fb8e 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 800043e:	e23a      	b.n	80008b6 <number7SEG+0x59e>
	    case 1:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000440:	4b55      	ldr	r3, [pc, #340]	; (8000598 <number7SEG+0x280>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a55      	ldr	r2, [pc, #340]	; (800059c <number7SEG+0x284>)
 8000446:	8811      	ldrh	r1, [r2, #0]
 8000448:	2201      	movs	r2, #1
 800044a:	4618      	mov	r0, r3
 800044c:	f001 fb85 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000450:	4b51      	ldr	r3, [pc, #324]	; (8000598 <number7SEG+0x280>)
 8000452:	685b      	ldr	r3, [r3, #4]
 8000454:	4a51      	ldr	r2, [pc, #324]	; (800059c <number7SEG+0x284>)
 8000456:	8851      	ldrh	r1, [r2, #2]
 8000458:	2200      	movs	r2, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fb7d 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000460:	4b4d      	ldr	r3, [pc, #308]	; (8000598 <number7SEG+0x280>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	4a4d      	ldr	r2, [pc, #308]	; (800059c <number7SEG+0x284>)
 8000466:	8891      	ldrh	r1, [r2, #4]
 8000468:	2200      	movs	r2, #0
 800046a:	4618      	mov	r0, r3
 800046c:	f001 fb75 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000470:	4b49      	ldr	r3, [pc, #292]	; (8000598 <number7SEG+0x280>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a49      	ldr	r2, [pc, #292]	; (800059c <number7SEG+0x284>)
 8000476:	88d1      	ldrh	r1, [r2, #6]
 8000478:	2201      	movs	r2, #1
 800047a:	4618      	mov	r0, r3
 800047c:	f001 fb6d 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000480:	4b45      	ldr	r3, [pc, #276]	; (8000598 <number7SEG+0x280>)
 8000482:	691b      	ldr	r3, [r3, #16]
 8000484:	4a45      	ldr	r2, [pc, #276]	; (800059c <number7SEG+0x284>)
 8000486:	8911      	ldrh	r1, [r2, #8]
 8000488:	2201      	movs	r2, #1
 800048a:	4618      	mov	r0, r3
 800048c:	f001 fb65 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000490:	4b41      	ldr	r3, [pc, #260]	; (8000598 <number7SEG+0x280>)
 8000492:	695b      	ldr	r3, [r3, #20]
 8000494:	4a41      	ldr	r2, [pc, #260]	; (800059c <number7SEG+0x284>)
 8000496:	8951      	ldrh	r1, [r2, #10]
 8000498:	2201      	movs	r2, #1
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fb5d 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 80004a0:	4b3d      	ldr	r3, [pc, #244]	; (8000598 <number7SEG+0x280>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a3d      	ldr	r2, [pc, #244]	; (800059c <number7SEG+0x284>)
 80004a6:	8991      	ldrh	r1, [r2, #12]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4618      	mov	r0, r3
 80004ac:	f001 fb55 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 80004b0:	e201      	b.n	80008b6 <number7SEG+0x59e>
	    case 2:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80004b2:	4b39      	ldr	r3, [pc, #228]	; (8000598 <number7SEG+0x280>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4a39      	ldr	r2, [pc, #228]	; (800059c <number7SEG+0x284>)
 80004b8:	8811      	ldrh	r1, [r2, #0]
 80004ba:	2200      	movs	r2, #0
 80004bc:	4618      	mov	r0, r3
 80004be:	f001 fb4c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80004c2:	4b35      	ldr	r3, [pc, #212]	; (8000598 <number7SEG+0x280>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	4a35      	ldr	r2, [pc, #212]	; (800059c <number7SEG+0x284>)
 80004c8:	8851      	ldrh	r1, [r2, #2]
 80004ca:	2200      	movs	r2, #0
 80004cc:	4618      	mov	r0, r3
 80004ce:	f001 fb44 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 80004d2:	4b31      	ldr	r3, [pc, #196]	; (8000598 <number7SEG+0x280>)
 80004d4:	689b      	ldr	r3, [r3, #8]
 80004d6:	4a31      	ldr	r2, [pc, #196]	; (800059c <number7SEG+0x284>)
 80004d8:	8891      	ldrh	r1, [r2, #4]
 80004da:	2201      	movs	r2, #1
 80004dc:	4618      	mov	r0, r3
 80004de:	f001 fb3c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80004e2:	4b2d      	ldr	r3, [pc, #180]	; (8000598 <number7SEG+0x280>)
 80004e4:	68db      	ldr	r3, [r3, #12]
 80004e6:	4a2d      	ldr	r2, [pc, #180]	; (800059c <number7SEG+0x284>)
 80004e8:	88d1      	ldrh	r1, [r2, #6]
 80004ea:	2200      	movs	r2, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f001 fb34 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80004f2:	4b29      	ldr	r3, [pc, #164]	; (8000598 <number7SEG+0x280>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	4a29      	ldr	r2, [pc, #164]	; (800059c <number7SEG+0x284>)
 80004f8:	8911      	ldrh	r1, [r2, #8]
 80004fa:	2200      	movs	r2, #0
 80004fc:	4618      	mov	r0, r3
 80004fe:	f001 fb2c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000502:	4b25      	ldr	r3, [pc, #148]	; (8000598 <number7SEG+0x280>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a25      	ldr	r2, [pc, #148]	; (800059c <number7SEG+0x284>)
 8000508:	8951      	ldrh	r1, [r2, #10]
 800050a:	2201      	movs	r2, #1
 800050c:	4618      	mov	r0, r3
 800050e:	f001 fb24 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000512:	4b21      	ldr	r3, [pc, #132]	; (8000598 <number7SEG+0x280>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	4a21      	ldr	r2, [pc, #132]	; (800059c <number7SEG+0x284>)
 8000518:	8991      	ldrh	r1, [r2, #12]
 800051a:	2200      	movs	r2, #0
 800051c:	4618      	mov	r0, r3
 800051e:	f001 fb1c 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 8000522:	e1c8      	b.n	80008b6 <number7SEG+0x59e>
	    case 3:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000524:	4b1c      	ldr	r3, [pc, #112]	; (8000598 <number7SEG+0x280>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a1c      	ldr	r2, [pc, #112]	; (800059c <number7SEG+0x284>)
 800052a:	8811      	ldrh	r1, [r2, #0]
 800052c:	2200      	movs	r2, #0
 800052e:	4618      	mov	r0, r3
 8000530:	f001 fb13 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000534:	4b18      	ldr	r3, [pc, #96]	; (8000598 <number7SEG+0x280>)
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	4a18      	ldr	r2, [pc, #96]	; (800059c <number7SEG+0x284>)
 800053a:	8851      	ldrh	r1, [r2, #2]
 800053c:	2200      	movs	r2, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f001 fb0b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000544:	4b14      	ldr	r3, [pc, #80]	; (8000598 <number7SEG+0x280>)
 8000546:	689b      	ldr	r3, [r3, #8]
 8000548:	4a14      	ldr	r2, [pc, #80]	; (800059c <number7SEG+0x284>)
 800054a:	8891      	ldrh	r1, [r2, #4]
 800054c:	2200      	movs	r2, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f001 fb03 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000554:	4b10      	ldr	r3, [pc, #64]	; (8000598 <number7SEG+0x280>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	4a10      	ldr	r2, [pc, #64]	; (800059c <number7SEG+0x284>)
 800055a:	88d1      	ldrh	r1, [r2, #6]
 800055c:	2200      	movs	r2, #0
 800055e:	4618      	mov	r0, r3
 8000560:	f001 fafb 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000564:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <number7SEG+0x280>)
 8000566:	691b      	ldr	r3, [r3, #16]
 8000568:	4a0c      	ldr	r2, [pc, #48]	; (800059c <number7SEG+0x284>)
 800056a:	8911      	ldrh	r1, [r2, #8]
 800056c:	2201      	movs	r2, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f001 faf3 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000574:	4b08      	ldr	r3, [pc, #32]	; (8000598 <number7SEG+0x280>)
 8000576:	695b      	ldr	r3, [r3, #20]
 8000578:	4a08      	ldr	r2, [pc, #32]	; (800059c <number7SEG+0x284>)
 800057a:	8951      	ldrh	r1, [r2, #10]
 800057c:	2201      	movs	r2, #1
 800057e:	4618      	mov	r0, r3
 8000580:	f001 faeb 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <number7SEG+0x280>)
 8000586:	699b      	ldr	r3, [r3, #24]
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <number7SEG+0x284>)
 800058a:	8991      	ldrh	r1, [r2, #12]
 800058c:	2200      	movs	r2, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f001 fae3 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 8000594:	e18f      	b.n	80008b6 <number7SEG+0x59e>
 8000596:	bf00      	nop
 8000598:	20000000 	.word	0x20000000
 800059c:	2000001c 	.word	0x2000001c
	    case 4:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 80005a0:	4ba6      	ldr	r3, [pc, #664]	; (800083c <number7SEG+0x524>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4aa6      	ldr	r2, [pc, #664]	; (8000840 <number7SEG+0x528>)
 80005a6:	8811      	ldrh	r1, [r2, #0]
 80005a8:	2201      	movs	r2, #1
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 fad5 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80005b0:	4ba2      	ldr	r3, [pc, #648]	; (800083c <number7SEG+0x524>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4aa2      	ldr	r2, [pc, #648]	; (8000840 <number7SEG+0x528>)
 80005b6:	8851      	ldrh	r1, [r2, #2]
 80005b8:	2200      	movs	r2, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 facd 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80005c0:	4b9e      	ldr	r3, [pc, #632]	; (800083c <number7SEG+0x524>)
 80005c2:	689b      	ldr	r3, [r3, #8]
 80005c4:	4a9e      	ldr	r2, [pc, #632]	; (8000840 <number7SEG+0x528>)
 80005c6:	8891      	ldrh	r1, [r2, #4]
 80005c8:	2200      	movs	r2, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f001 fac5 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 80005d0:	4b9a      	ldr	r3, [pc, #616]	; (800083c <number7SEG+0x524>)
 80005d2:	68db      	ldr	r3, [r3, #12]
 80005d4:	4a9a      	ldr	r2, [pc, #616]	; (8000840 <number7SEG+0x528>)
 80005d6:	88d1      	ldrh	r1, [r2, #6]
 80005d8:	2201      	movs	r2, #1
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fabd 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 80005e0:	4b96      	ldr	r3, [pc, #600]	; (800083c <number7SEG+0x524>)
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	4a96      	ldr	r2, [pc, #600]	; (8000840 <number7SEG+0x528>)
 80005e6:	8911      	ldrh	r1, [r2, #8]
 80005e8:	2201      	movs	r2, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f001 fab5 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80005f0:	4b92      	ldr	r3, [pc, #584]	; (800083c <number7SEG+0x524>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a92      	ldr	r2, [pc, #584]	; (8000840 <number7SEG+0x528>)
 80005f6:	8951      	ldrh	r1, [r2, #10]
 80005f8:	2200      	movs	r2, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f001 faad 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000600:	4b8e      	ldr	r3, [pc, #568]	; (800083c <number7SEG+0x524>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a8e      	ldr	r2, [pc, #568]	; (8000840 <number7SEG+0x528>)
 8000606:	8991      	ldrh	r1, [r2, #12]
 8000608:	2200      	movs	r2, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f001 faa5 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 8000610:	e151      	b.n	80008b6 <number7SEG+0x59e>
	    case 5:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000612:	4b8a      	ldr	r3, [pc, #552]	; (800083c <number7SEG+0x524>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a8a      	ldr	r2, [pc, #552]	; (8000840 <number7SEG+0x528>)
 8000618:	8811      	ldrh	r1, [r2, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	4618      	mov	r0, r3
 800061e:	f001 fa9c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000622:	4b86      	ldr	r3, [pc, #536]	; (800083c <number7SEG+0x524>)
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	4a86      	ldr	r2, [pc, #536]	; (8000840 <number7SEG+0x528>)
 8000628:	8851      	ldrh	r1, [r2, #2]
 800062a:	2201      	movs	r2, #1
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa94 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000632:	4b82      	ldr	r3, [pc, #520]	; (800083c <number7SEG+0x524>)
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	4a82      	ldr	r2, [pc, #520]	; (8000840 <number7SEG+0x528>)
 8000638:	8891      	ldrh	r1, [r2, #4]
 800063a:	2200      	movs	r2, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fa8c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000642:	4b7e      	ldr	r3, [pc, #504]	; (800083c <number7SEG+0x524>)
 8000644:	68db      	ldr	r3, [r3, #12]
 8000646:	4a7e      	ldr	r2, [pc, #504]	; (8000840 <number7SEG+0x528>)
 8000648:	88d1      	ldrh	r1, [r2, #6]
 800064a:	2200      	movs	r2, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fa84 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000652:	4b7a      	ldr	r3, [pc, #488]	; (800083c <number7SEG+0x524>)
 8000654:	691b      	ldr	r3, [r3, #16]
 8000656:	4a7a      	ldr	r2, [pc, #488]	; (8000840 <number7SEG+0x528>)
 8000658:	8911      	ldrh	r1, [r2, #8]
 800065a:	2201      	movs	r2, #1
 800065c:	4618      	mov	r0, r3
 800065e:	f001 fa7c 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 8000662:	4b76      	ldr	r3, [pc, #472]	; (800083c <number7SEG+0x524>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a76      	ldr	r2, [pc, #472]	; (8000840 <number7SEG+0x528>)
 8000668:	8951      	ldrh	r1, [r2, #10]
 800066a:	2200      	movs	r2, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f001 fa74 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 8000672:	4b72      	ldr	r3, [pc, #456]	; (800083c <number7SEG+0x524>)
 8000674:	699b      	ldr	r3, [r3, #24]
 8000676:	4a72      	ldr	r2, [pc, #456]	; (8000840 <number7SEG+0x528>)
 8000678:	8991      	ldrh	r1, [r2, #12]
 800067a:	2200      	movs	r2, #0
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fa6c 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 8000682:	e118      	b.n	80008b6 <number7SEG+0x59e>
	    case 6:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 8000684:	4b6d      	ldr	r3, [pc, #436]	; (800083c <number7SEG+0x524>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a6d      	ldr	r2, [pc, #436]	; (8000840 <number7SEG+0x528>)
 800068a:	8811      	ldrh	r1, [r2, #0]
 800068c:	2200      	movs	r2, #0
 800068e:	4618      	mov	r0, r3
 8000690:	f001 fa63 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000694:	4b69      	ldr	r3, [pc, #420]	; (800083c <number7SEG+0x524>)
 8000696:	685b      	ldr	r3, [r3, #4]
 8000698:	4a69      	ldr	r2, [pc, #420]	; (8000840 <number7SEG+0x528>)
 800069a:	8851      	ldrh	r1, [r2, #2]
 800069c:	2201      	movs	r2, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fa5b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80006a4:	4b65      	ldr	r3, [pc, #404]	; (800083c <number7SEG+0x524>)
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	4a65      	ldr	r2, [pc, #404]	; (8000840 <number7SEG+0x528>)
 80006aa:	8891      	ldrh	r1, [r2, #4]
 80006ac:	2200      	movs	r2, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fa53 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80006b4:	4b61      	ldr	r3, [pc, #388]	; (800083c <number7SEG+0x524>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	4a61      	ldr	r2, [pc, #388]	; (8000840 <number7SEG+0x528>)
 80006ba:	88d1      	ldrh	r1, [r2, #6]
 80006bc:	2200      	movs	r2, #0
 80006be:	4618      	mov	r0, r3
 80006c0:	f001 fa4b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 80006c4:	4b5d      	ldr	r3, [pc, #372]	; (800083c <number7SEG+0x524>)
 80006c6:	691b      	ldr	r3, [r3, #16]
 80006c8:	4a5d      	ldr	r2, [pc, #372]	; (8000840 <number7SEG+0x528>)
 80006ca:	8911      	ldrh	r1, [r2, #8]
 80006cc:	2200      	movs	r2, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f001 fa43 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80006d4:	4b59      	ldr	r3, [pc, #356]	; (800083c <number7SEG+0x524>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	4a59      	ldr	r2, [pc, #356]	; (8000840 <number7SEG+0x528>)
 80006da:	8951      	ldrh	r1, [r2, #10]
 80006dc:	2200      	movs	r2, #0
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 fa3b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80006e4:	4b55      	ldr	r3, [pc, #340]	; (800083c <number7SEG+0x524>)
 80006e6:	699b      	ldr	r3, [r3, #24]
 80006e8:	4a55      	ldr	r2, [pc, #340]	; (8000840 <number7SEG+0x528>)
 80006ea:	8991      	ldrh	r1, [r2, #12]
 80006ec:	2200      	movs	r2, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fa33 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 80006f4:	e0df      	b.n	80008b6 <number7SEG+0x59e>
	    case 7:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <number7SEG+0x524>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	4a51      	ldr	r2, [pc, #324]	; (8000840 <number7SEG+0x528>)
 80006fc:	8811      	ldrh	r1, [r2, #0]
 80006fe:	2200      	movs	r2, #0
 8000700:	4618      	mov	r0, r3
 8000702:	f001 fa2a 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000706:	4b4d      	ldr	r3, [pc, #308]	; (800083c <number7SEG+0x524>)
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	4a4d      	ldr	r2, [pc, #308]	; (8000840 <number7SEG+0x528>)
 800070c:	8851      	ldrh	r1, [r2, #2]
 800070e:	2200      	movs	r2, #0
 8000710:	4618      	mov	r0, r3
 8000712:	f001 fa22 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000716:	4b49      	ldr	r3, [pc, #292]	; (800083c <number7SEG+0x524>)
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	4a49      	ldr	r2, [pc, #292]	; (8000840 <number7SEG+0x528>)
 800071c:	8891      	ldrh	r1, [r2, #4]
 800071e:	2200      	movs	r2, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fa1a 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000726:	4b45      	ldr	r3, [pc, #276]	; (800083c <number7SEG+0x524>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	4a45      	ldr	r2, [pc, #276]	; (8000840 <number7SEG+0x528>)
 800072c:	88d1      	ldrh	r1, [r2, #6]
 800072e:	2201      	movs	r2, #1
 8000730:	4618      	mov	r0, r3
 8000732:	f001 fa12 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000736:	4b41      	ldr	r3, [pc, #260]	; (800083c <number7SEG+0x524>)
 8000738:	691b      	ldr	r3, [r3, #16]
 800073a:	4a41      	ldr	r2, [pc, #260]	; (8000840 <number7SEG+0x528>)
 800073c:	8911      	ldrh	r1, [r2, #8]
 800073e:	2201      	movs	r2, #1
 8000740:	4618      	mov	r0, r3
 8000742:	f001 fa0a 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000746:	4b3d      	ldr	r3, [pc, #244]	; (800083c <number7SEG+0x524>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	4a3d      	ldr	r2, [pc, #244]	; (8000840 <number7SEG+0x528>)
 800074c:	8951      	ldrh	r1, [r2, #10]
 800074e:	2201      	movs	r2, #1
 8000750:	4618      	mov	r0, r3
 8000752:	f001 fa02 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], SET);
 8000756:	4b39      	ldr	r3, [pc, #228]	; (800083c <number7SEG+0x524>)
 8000758:	699b      	ldr	r3, [r3, #24]
 800075a:	4a39      	ldr	r2, [pc, #228]	; (8000840 <number7SEG+0x528>)
 800075c:	8991      	ldrh	r1, [r2, #12]
 800075e:	2201      	movs	r2, #1
 8000760:	4618      	mov	r0, r3
 8000762:	f001 f9fa 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 8000766:	e0a6      	b.n	80008b6 <number7SEG+0x59e>
	    case 8:
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 8000768:	4b34      	ldr	r3, [pc, #208]	; (800083c <number7SEG+0x524>)
 800076a:	685b      	ldr	r3, [r3, #4]
 800076c:	4a34      	ldr	r2, [pc, #208]	; (8000840 <number7SEG+0x528>)
 800076e:	8851      	ldrh	r1, [r2, #2]
 8000770:	2200      	movs	r2, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f001 f9f1 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <number7SEG+0x524>)
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	4a30      	ldr	r2, [pc, #192]	; (8000840 <number7SEG+0x528>)
 800077e:	8891      	ldrh	r1, [r2, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f001 f9e9 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 8000788:	4b2c      	ldr	r3, [pc, #176]	; (800083c <number7SEG+0x524>)
 800078a:	68db      	ldr	r3, [r3, #12]
 800078c:	4a2c      	ldr	r2, [pc, #176]	; (8000840 <number7SEG+0x528>)
 800078e:	88d1      	ldrh	r1, [r2, #6]
 8000790:	2200      	movs	r2, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f001 f9e1 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], RESET);
 8000798:	4b28      	ldr	r3, [pc, #160]	; (800083c <number7SEG+0x524>)
 800079a:	691b      	ldr	r3, [r3, #16]
 800079c:	4a28      	ldr	r2, [pc, #160]	; (8000840 <number7SEG+0x528>)
 800079e:	8911      	ldrh	r1, [r2, #8]
 80007a0:	2200      	movs	r2, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f001 f9d9 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 80007a8:	4b24      	ldr	r3, [pc, #144]	; (800083c <number7SEG+0x524>)
 80007aa:	695b      	ldr	r3, [r3, #20]
 80007ac:	4a24      	ldr	r2, [pc, #144]	; (8000840 <number7SEG+0x528>)
 80007ae:	8951      	ldrh	r1, [r2, #10]
 80007b0:	2200      	movs	r2, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f001 f9d1 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80007b8:	4b20      	ldr	r3, [pc, #128]	; (800083c <number7SEG+0x524>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a20      	ldr	r2, [pc, #128]	; (8000840 <number7SEG+0x528>)
 80007be:	8991      	ldrh	r1, [r2, #12]
 80007c0:	2200      	movs	r2, #0
 80007c2:	4618      	mov	r0, r3
 80007c4:	f001 f9c9 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 80007c8:	e075      	b.n	80008b6 <number7SEG+0x59e>
	    case 9:
	        HAL_GPIO_WritePin(ports[0], pins[0], RESET);
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <number7SEG+0x524>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a1c      	ldr	r2, [pc, #112]	; (8000840 <number7SEG+0x528>)
 80007d0:	8811      	ldrh	r1, [r2, #0]
 80007d2:	2200      	movs	r2, #0
 80007d4:	4618      	mov	r0, r3
 80007d6:	f001 f9c0 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], RESET);
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <number7SEG+0x524>)
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <number7SEG+0x528>)
 80007e0:	8851      	ldrh	r1, [r2, #2]
 80007e2:	2200      	movs	r2, #0
 80007e4:	4618      	mov	r0, r3
 80007e6:	f001 f9b8 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], RESET);
 80007ea:	4b14      	ldr	r3, [pc, #80]	; (800083c <number7SEG+0x524>)
 80007ec:	689b      	ldr	r3, [r3, #8]
 80007ee:	4a14      	ldr	r2, [pc, #80]	; (8000840 <number7SEG+0x528>)
 80007f0:	8891      	ldrh	r1, [r2, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f001 f9b0 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], RESET);
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <number7SEG+0x524>)
 80007fc:	68db      	ldr	r3, [r3, #12]
 80007fe:	4a10      	ldr	r2, [pc, #64]	; (8000840 <number7SEG+0x528>)
 8000800:	88d1      	ldrh	r1, [r2, #6]
 8000802:	2200      	movs	r2, #0
 8000804:	4618      	mov	r0, r3
 8000806:	f001 f9a8 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <number7SEG+0x524>)
 800080c:	691b      	ldr	r3, [r3, #16]
 800080e:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <number7SEG+0x528>)
 8000810:	8911      	ldrh	r1, [r2, #8]
 8000812:	2201      	movs	r2, #1
 8000814:	4618      	mov	r0, r3
 8000816:	f001 f9a0 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], RESET);
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <number7SEG+0x524>)
 800081c:	695b      	ldr	r3, [r3, #20]
 800081e:	4a08      	ldr	r2, [pc, #32]	; (8000840 <number7SEG+0x528>)
 8000820:	8951      	ldrh	r1, [r2, #10]
 8000822:	2200      	movs	r2, #0
 8000824:	4618      	mov	r0, r3
 8000826:	f001 f998 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <number7SEG+0x524>)
 800082c:	699b      	ldr	r3, [r3, #24]
 800082e:	4a04      	ldr	r2, [pc, #16]	; (8000840 <number7SEG+0x528>)
 8000830:	8991      	ldrh	r1, [r2, #12]
 8000832:	2200      	movs	r2, #0
 8000834:	4618      	mov	r0, r3
 8000836:	f001 f990 	bl	8001b5a <HAL_GPIO_WritePin>
	        break;
 800083a:	e03c      	b.n	80008b6 <number7SEG+0x59e>
 800083c:	20000000 	.word	0x20000000
 8000840:	2000001c 	.word	0x2000001c
	    default:
	        HAL_GPIO_WritePin(ports[0], pins[0], SET);
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <number7SEG+0x5a8>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1e      	ldr	r2, [pc, #120]	; (80008c4 <number7SEG+0x5ac>)
 800084a:	8811      	ldrh	r1, [r2, #0]
 800084c:	2201      	movs	r2, #1
 800084e:	4618      	mov	r0, r3
 8000850:	f001 f983 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[1], pins[1], SET);
 8000854:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <number7SEG+0x5a8>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4a1a      	ldr	r2, [pc, #104]	; (80008c4 <number7SEG+0x5ac>)
 800085a:	8851      	ldrh	r1, [r2, #2]
 800085c:	2201      	movs	r2, #1
 800085e:	4618      	mov	r0, r3
 8000860:	f001 f97b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[2], pins[2], SET);
 8000864:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <number7SEG+0x5a8>)
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	4a16      	ldr	r2, [pc, #88]	; (80008c4 <number7SEG+0x5ac>)
 800086a:	8891      	ldrh	r1, [r2, #4]
 800086c:	2201      	movs	r2, #1
 800086e:	4618      	mov	r0, r3
 8000870:	f001 f973 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[3], pins[3], SET);
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <number7SEG+0x5a8>)
 8000876:	68db      	ldr	r3, [r3, #12]
 8000878:	4a12      	ldr	r2, [pc, #72]	; (80008c4 <number7SEG+0x5ac>)
 800087a:	88d1      	ldrh	r1, [r2, #6]
 800087c:	2201      	movs	r2, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f001 f96b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[4], pins[4], SET);
 8000884:	4b0e      	ldr	r3, [pc, #56]	; (80008c0 <number7SEG+0x5a8>)
 8000886:	691b      	ldr	r3, [r3, #16]
 8000888:	4a0e      	ldr	r2, [pc, #56]	; (80008c4 <number7SEG+0x5ac>)
 800088a:	8911      	ldrh	r1, [r2, #8]
 800088c:	2201      	movs	r2, #1
 800088e:	4618      	mov	r0, r3
 8000890:	f001 f963 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[5], pins[5], SET);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <number7SEG+0x5a8>)
 8000896:	695b      	ldr	r3, [r3, #20]
 8000898:	4a0a      	ldr	r2, [pc, #40]	; (80008c4 <number7SEG+0x5ac>)
 800089a:	8951      	ldrh	r1, [r2, #10]
 800089c:	2201      	movs	r2, #1
 800089e:	4618      	mov	r0, r3
 80008a0:	f001 f95b 	bl	8001b5a <HAL_GPIO_WritePin>
	        HAL_GPIO_WritePin(ports[6], pins[6], RESET);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <number7SEG+0x5a8>)
 80008a6:	699b      	ldr	r3, [r3, #24]
 80008a8:	4a06      	ldr	r2, [pc, #24]	; (80008c4 <number7SEG+0x5ac>)
 80008aa:	8991      	ldrh	r1, [r2, #12]
 80008ac:	2200      	movs	r2, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 f953 	bl	8001b5a <HAL_GPIO_WritePin>
	}
};
 80008b4:	bf00      	nop
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	20000000 	.word	0x20000000
 80008c4:	2000001c 	.word	0x2000001c

080008c8 <fsm_run>:
#include "display7seg.h"
#include "software_timer.h"

extern traffic_way main_traffic, side_traffic;

void fsm_run(machine_state mode){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d839      	bhi.n	800094c <fsm_run+0x84>
 80008d8:	a201      	add	r2, pc, #4	; (adr r2, 80008e0 <fsm_run+0x18>)
 80008da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008de:	bf00      	nop
 80008e0:	080008f1 	.word	0x080008f1
 80008e4:	0800094d 	.word	0x0800094d
 80008e8:	0800094d 	.word	0x0800094d
 80008ec:	0800094d 	.word	0x0800094d
	case mode1:// run normally
		fsm_traffic(&t_mode_main, &main_traffic, &timer_flag[2]);
 80008f0:	4a1a      	ldr	r2, [pc, #104]	; (800095c <fsm_run+0x94>)
 80008f2:	491b      	ldr	r1, [pc, #108]	; (8000960 <fsm_run+0x98>)
 80008f4:	481b      	ldr	r0, [pc, #108]	; (8000964 <fsm_run+0x9c>)
 80008f6:	f000 fd03 	bl	8001300 <fsm_traffic>
		fsm_traffic(&t_mode_side, &side_traffic, &timer_flag[3]);
 80008fa:	4a1b      	ldr	r2, [pc, #108]	; (8000968 <fsm_run+0xa0>)
 80008fc:	491b      	ldr	r1, [pc, #108]	; (800096c <fsm_run+0xa4>)
 80008fe:	481c      	ldr	r0, [pc, #112]	; (8000970 <fsm_run+0xa8>)
 8000900:	f000 fcfe 	bl	8001300 <fsm_traffic>
		if(timer_flag[4] == 1){
 8000904:	4b1b      	ldr	r3, [pc, #108]	; (8000974 <fsm_run+0xac>)
 8000906:	791b      	ldrb	r3, [r3, #4]
 8000908:	2b01      	cmp	r3, #1
 800090a:	d106      	bne.n	800091a <fsm_run+0x52>
			countDown7SEG();
 800090c:	f7ff fcee 	bl	80002ec <countDown7SEG>
			set_timer(1000, &timer_flag[4]);
 8000910:	4919      	ldr	r1, [pc, #100]	; (8000978 <fsm_run+0xb0>)
 8000912:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000916:	f000 faeb 	bl	8000ef0 <set_timer>
		}
		if(timer_flag[5] == 1){
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <fsm_run+0xac>)
 800091c:	795b      	ldrb	r3, [r3, #5]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d116      	bne.n	8000950 <fsm_run+0x88>
			if(led_index >= MAX_LED) led_index = 0;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <fsm_run+0xb4>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b03      	cmp	r3, #3
 8000928:	d902      	bls.n	8000930 <fsm_run+0x68>
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <fsm_run+0xb4>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
			display7SEG(led_index++);
 8000930:	4b12      	ldr	r3, [pc, #72]	; (800097c <fsm_run+0xb4>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	b2d1      	uxtb	r1, r2
 8000938:	4a10      	ldr	r2, [pc, #64]	; (800097c <fsm_run+0xb4>)
 800093a:	7011      	strb	r1, [r2, #0]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc05 	bl	800014c <display7SEG>
			set_timer(200, &timer_flag[5]);
 8000942:	490f      	ldr	r1, [pc, #60]	; (8000980 <fsm_run+0xb8>)
 8000944:	20c8      	movs	r0, #200	; 0xc8
 8000946:	f000 fad3 	bl	8000ef0 <set_timer>
		}
		break;
 800094a:	e001      	b.n	8000950 <fsm_run+0x88>
	case mode4:

		break;
	default:

		break;
 800094c:	bf00      	nop
 800094e:	e000      	b.n	8000952 <fsm_run+0x8a>
		break;
 8000950:	bf00      	nop
	}
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	200000ce 	.word	0x200000ce
 8000960:	2000002c 	.word	0x2000002c
 8000964:	200000f8 	.word	0x200000f8
 8000968:	200000cf 	.word	0x200000cf
 800096c:	20000034 	.word	0x20000034
 8000970:	20000040 	.word	0x20000040
 8000974:	200000cc 	.word	0x200000cc
 8000978:	200000d0 	.word	0x200000d0
 800097c:	200000d4 	.word	0x200000d4
 8000980:	200000d1 	.word	0x200000d1

08000984 <fsm_for_input_processing>:
    BUTTON_PRESSED_MORE_THAN_1_SECOND
};

enum ButtonState buttonState = BUTTON_RELEASED;

void fsm_for_input_processing(void) {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    switch (buttonState) {
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <fsm_for_input_processing+0x78>)
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	2b02      	cmp	r3, #2
 800098e:	d024      	beq.n	80009da <fsm_for_input_processing+0x56>
 8000990:	2b02      	cmp	r3, #2
 8000992:	dc31      	bgt.n	80009f8 <fsm_for_input_processing+0x74>
 8000994:	2b00      	cmp	r3, #0
 8000996:	d002      	beq.n	800099e <fsm_for_input_processing+0x1a>
 8000998:	2b01      	cmp	r3, #1
 800099a:	d00a      	beq.n	80009b2 <fsm_for_input_processing+0x2e>
                buttonState = BUTTON_RELEASED;
            }
            // TODO: Add further functionality here
            break;
    }
}
 800099c:	e02c      	b.n	80009f8 <fsm_for_input_processing+0x74>
            if (is_button_press(0)) {
 800099e:	2000      	movs	r0, #0
 80009a0:	f000 f920 	bl	8000be4 <is_button_press>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d021      	beq.n	80009ee <fsm_for_input_processing+0x6a>
                buttonState = BUTTON_PRESSED;
 80009aa:	4b14      	ldr	r3, [pc, #80]	; (80009fc <fsm_for_input_processing+0x78>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
            break;
 80009b0:	e01d      	b.n	80009ee <fsm_for_input_processing+0x6a>
            if (!is_button_press(0)) {
 80009b2:	2000      	movs	r0, #0
 80009b4:	f000 f916 	bl	8000be4 <is_button_press>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d103      	bne.n	80009c6 <fsm_for_input_processing+0x42>
                buttonState = BUTTON_RELEASED;
 80009be:	4b0f      	ldr	r3, [pc, #60]	; (80009fc <fsm_for_input_processing+0x78>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	701a      	strb	r2, [r3, #0]
            break;
 80009c4:	e015      	b.n	80009f2 <fsm_for_input_processing+0x6e>
                if (is_button_hold(0)) {
 80009c6:	2000      	movs	r0, #0
 80009c8:	f000 f926 	bl	8000c18 <is_button_hold>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00f      	beq.n	80009f2 <fsm_for_input_processing+0x6e>
                    buttonState = BUTTON_PRESSED_MORE_THAN_1_SECOND;
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <fsm_for_input_processing+0x78>)
 80009d4:	2202      	movs	r2, #2
 80009d6:	701a      	strb	r2, [r3, #0]
            break;
 80009d8:	e00b      	b.n	80009f2 <fsm_for_input_processing+0x6e>
            if (!is_button_press(0)) {
 80009da:	2000      	movs	r0, #0
 80009dc:	f000 f902 	bl	8000be4 <is_button_press>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d107      	bne.n	80009f6 <fsm_for_input_processing+0x72>
                buttonState = BUTTON_RELEASED;
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <fsm_for_input_processing+0x78>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
            break;
 80009ec:	e003      	b.n	80009f6 <fsm_for_input_processing+0x72>
            break;
 80009ee:	bf00      	nop
 80009f0:	e002      	b.n	80009f8 <fsm_for_input_processing+0x74>
            break;
 80009f2:	bf00      	nop
 80009f4:	e000      	b.n	80009f8 <fsm_for_input_processing+0x74>
            break;
 80009f6:	bf00      	nop
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000d6 	.word	0x200000d6

08000a00 <button_pin_read>:
static GPIO_PinState debounceButtonBuffer2[NUMBER_OF_BUTTONS];
//counter
static uint16_t counterForButtonHold[NUMBER_OF_BUTTONS];
static uint16_t counterForButtonRelease[NUMBER_OF_BUTTONS];

GPIO_PinState button_pin_read(uint8_t index){//this is no good
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
	switch(index){
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b02      	cmp	r3, #2
 8000a0e:	d012      	beq.n	8000a36 <button_pin_read+0x36>
 8000a10:	2b02      	cmp	r3, #2
 8000a12:	dc16      	bgt.n	8000a42 <button_pin_read+0x42>
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d002      	beq.n	8000a1e <button_pin_read+0x1e>
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d006      	beq.n	8000a2a <button_pin_read+0x2a>
		break;
	case 2:
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
		break;
	default:
		break;
 8000a1c:	e011      	b.n	8000a42 <button_pin_read+0x42>
		return HAL_GPIO_ReadPin(BUTTON_0_GPIO_Port, BUTTON_0_Pin);
 8000a1e:	2101      	movs	r1, #1
 8000a20:	480b      	ldr	r0, [pc, #44]	; (8000a50 <button_pin_read+0x50>)
 8000a22:	f001 f883 	bl	8001b2c <HAL_GPIO_ReadPin>
 8000a26:	4603      	mov	r3, r0
 8000a28:	e00d      	b.n	8000a46 <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_1_GPIO_Port, BUTTON_1_Pin);
 8000a2a:	2102      	movs	r1, #2
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <button_pin_read+0x50>)
 8000a2e:	f001 f87d 	bl	8001b2c <HAL_GPIO_ReadPin>
 8000a32:	4603      	mov	r3, r0
 8000a34:	e007      	b.n	8000a46 <button_pin_read+0x46>
		return HAL_GPIO_ReadPin(BUTTON_2_GPIO_Port, BUTTON_2_Pin);
 8000a36:	2104      	movs	r1, #4
 8000a38:	4805      	ldr	r0, [pc, #20]	; (8000a50 <button_pin_read+0x50>)
 8000a3a:	f001 f877 	bl	8001b2c <HAL_GPIO_ReadPin>
 8000a3e:	4603      	mov	r3, r0
 8000a40:	e001      	b.n	8000a46 <button_pin_read+0x46>
		break;
 8000a42:	bf00      	nop
	}
	return SET;
 8000a44:	2301      	movs	r3, #1
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40010800 	.word	0x40010800

08000a54 <button_reading>:

void button_reading() {
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	71fb      	strb	r3, [r7, #7]
 8000a5e:	e0a3      	b.n	8000ba8 <button_reading+0x154>
    	//DEBOUNCE
        debounceButtonBuffer2[i] = debounceButtonBuffer1[i];
 8000a60:	79fa      	ldrb	r2, [r7, #7]
 8000a62:	79fb      	ldrb	r3, [r7, #7]
 8000a64:	4955      	ldr	r1, [pc, #340]	; (8000bbc <button_reading+0x168>)
 8000a66:	5c89      	ldrb	r1, [r1, r2]
 8000a68:	4a55      	ldr	r2, [pc, #340]	; (8000bc0 <button_reading+0x16c>)
 8000a6a:	54d1      	strb	r1, [r2, r3]
        debounceButtonBuffer1[i] = button_pin_read(i);
 8000a6c:	79fc      	ldrb	r4, [r7, #7]
 8000a6e:	79fb      	ldrb	r3, [r7, #7]
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff ffc5 	bl	8000a00 <button_pin_read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4b50      	ldr	r3, [pc, #320]	; (8000bbc <button_reading+0x168>)
 8000a7c:	551a      	strb	r2, [r3, r4]

        if (debounceButtonBuffer1[i] == debounceButtonBuffer2[i])
 8000a7e:	79fb      	ldrb	r3, [r7, #7]
 8000a80:	4a4e      	ldr	r2, [pc, #312]	; (8000bbc <button_reading+0x168>)
 8000a82:	5cd2      	ldrb	r2, [r2, r3]
 8000a84:	79fb      	ldrb	r3, [r7, #7]
 8000a86:	494e      	ldr	r1, [pc, #312]	; (8000bc0 <button_reading+0x16c>)
 8000a88:	5ccb      	ldrb	r3, [r1, r3]
 8000a8a:	429a      	cmp	r2, r3
 8000a8c:	d105      	bne.n	8000a9a <button_reading+0x46>
            buttonBuffer[i] = debounceButtonBuffer1[i];
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	494a      	ldr	r1, [pc, #296]	; (8000bbc <button_reading+0x168>)
 8000a94:	5c89      	ldrb	r1, [r1, r2]
 8000a96:	4a4b      	ldr	r2, [pc, #300]	; (8000bc4 <button_reading+0x170>)
 8000a98:	54d1      	strb	r1, [r2, r3]

        //UPDATE COUNTER
        if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	4a49      	ldr	r2, [pc, #292]	; (8000bc4 <button_reading+0x170>)
 8000a9e:	5cd3      	ldrb	r3, [r2, r3]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d113      	bne.n	8000acc <button_reading+0x78>
        	counterForButtonRelease[i] = 0;
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	4a48      	ldr	r2, [pc, #288]	; (8000bc8 <button_reading+0x174>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonHold[i] < HOLD_TIME) counterForButtonHold[i]++;
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	4a46      	ldr	r2, [pc, #280]	; (8000bcc <button_reading+0x178>)
 8000ab2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ab6:	2b63      	cmp	r3, #99	; 0x63
 8000ab8:	d808      	bhi.n	8000acc <button_reading+0x78>
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4a43      	ldr	r2, [pc, #268]	; (8000bcc <button_reading+0x178>)
 8000abe:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ac2:	3201      	adds	r2, #1
 8000ac4:	b291      	uxth	r1, r2
 8000ac6:	4a41      	ldr	r2, [pc, #260]	; (8000bcc <button_reading+0x178>)
 8000ac8:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        if(buttonBuffer[i] == BUTTON_IS_RELEASED){
 8000acc:	79fb      	ldrb	r3, [r7, #7]
 8000ace:	4a3d      	ldr	r2, [pc, #244]	; (8000bc4 <button_reading+0x170>)
 8000ad0:	5cd3      	ldrb	r3, [r2, r3]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d113      	bne.n	8000afe <button_reading+0xaa>
        	counterForButtonHold[i] = 0;
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	4a3c      	ldr	r2, [pc, #240]	; (8000bcc <button_reading+0x178>)
 8000ada:	2100      	movs	r1, #0
 8000adc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        	if(counterForButtonRelease[i] < RELEASE_TIME) counterForButtonRelease[i]++;
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4a39      	ldr	r2, [pc, #228]	; (8000bc8 <button_reading+0x174>)
 8000ae4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	d808      	bhi.n	8000afe <button_reading+0xaa>
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <button_reading+0x174>)
 8000af0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000af4:	3201      	adds	r2, #1
 8000af6:	b291      	uxth	r1, r2
 8000af8:	4a33      	ldr	r2, [pc, #204]	; (8000bc8 <button_reading+0x174>)
 8000afa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
        //RECOGNIZE
        if(buttonBuffer[i] == BUTTON_IS_PRESSED){
 8000afe:	79fb      	ldrb	r3, [r7, #7]
 8000b00:	4a30      	ldr	r2, [pc, #192]	; (8000bc4 <button_reading+0x170>)
 8000b02:	5cd3      	ldrb	r3, [r2, r3]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d125      	bne.n	8000b54 <button_reading+0x100>
        	if(counterForButtonRelease[i] >= RELEASE_TIME){//Press or Hold
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a2f      	ldr	r2, [pc, #188]	; (8000bc8 <button_reading+0x174>)
 8000b0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b10:	2b07      	cmp	r3, #7
 8000b12:	d90f      	bls.n	8000b34 <button_reading+0xe0>
        		if(counterForButtonHold[i] < HOLD_TIME){//Press
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	4a2d      	ldr	r2, [pc, #180]	; (8000bcc <button_reading+0x178>)
 8000b18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b1c:	2b63      	cmp	r3, #99	; 0x63
 8000b1e:	d804      	bhi.n	8000b2a <button_reading+0xd6>
        			flagForButtonPress[i] = 1;
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	4a2b      	ldr	r2, [pc, #172]	; (8000bd0 <button_reading+0x17c>)
 8000b24:	2101      	movs	r1, #1
 8000b26:	54d1      	strb	r1, [r2, r3]
 8000b28:	e024      	b.n	8000b74 <button_reading+0x120>
        		}
        		else{//Hold
        			flagForButtonHold[i] = 1;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <button_reading+0x180>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	54d1      	strb	r1, [r2, r3]
 8000b32:	e01f      	b.n	8000b74 <button_reading+0x120>
        		}
        	}
        	else{//Double Tap or Tap Hold
        		if(counterForButtonHold[i] < HOLD_TIME){//Double Tap
 8000b34:	79fb      	ldrb	r3, [r7, #7]
 8000b36:	4a25      	ldr	r2, [pc, #148]	; (8000bcc <button_reading+0x178>)
 8000b38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b3c:	2b63      	cmp	r3, #99	; 0x63
 8000b3e:	d804      	bhi.n	8000b4a <button_reading+0xf6>
        			flagForButtonDoubleTap[i] = 1;
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	4a25      	ldr	r2, [pc, #148]	; (8000bd8 <button_reading+0x184>)
 8000b44:	2101      	movs	r1, #1
 8000b46:	54d1      	strb	r1, [r2, r3]
 8000b48:	e014      	b.n	8000b74 <button_reading+0x120>
        		}
        		else{//Tap Hold
        			flagForButtonTapHold[i] = 1;
 8000b4a:	79fb      	ldrb	r3, [r7, #7]
 8000b4c:	4a23      	ldr	r2, [pc, #140]	; (8000bdc <button_reading+0x188>)
 8000b4e:	2101      	movs	r1, #1
 8000b50:	54d1      	strb	r1, [r2, r3]
 8000b52:	e00f      	b.n	8000b74 <button_reading+0x120>
        		}
        	}
        }
        else{//button idle
        	flagForButtonPress[i] = 0;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <button_reading+0x17c>)
 8000b58:	2100      	movs	r1, #0
 8000b5a:	54d1      	strb	r1, [r2, r3]
        	flagForButtonHold[i] = 0;
 8000b5c:	79fb      	ldrb	r3, [r7, #7]
 8000b5e:	4a1d      	ldr	r2, [pc, #116]	; (8000bd4 <button_reading+0x180>)
 8000b60:	2100      	movs	r1, #0
 8000b62:	54d1      	strb	r1, [r2, r3]
        	flagForButtonDoubleTap[i] = 0;
 8000b64:	79fb      	ldrb	r3, [r7, #7]
 8000b66:	4a1c      	ldr	r2, [pc, #112]	; (8000bd8 <button_reading+0x184>)
 8000b68:	2100      	movs	r1, #0
 8000b6a:	54d1      	strb	r1, [r2, r3]
        	flagForButtonTapHold[i] = 0;
 8000b6c:	79fb      	ldrb	r3, [r7, #7]
 8000b6e:	4a1b      	ldr	r2, [pc, #108]	; (8000bdc <button_reading+0x188>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	54d1      	strb	r1, [r2, r3]
        }
#ifdef UNIT_TEST
        if(i == 0) test_button = 0;
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d102      	bne.n	8000b80 <button_reading+0x12c>
 8000b7a:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <button_reading+0x18c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	701a      	strb	r2, [r3, #0]
        test_button = test_button | !buttonBuffer[i];
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	4a10      	ldr	r2, [pc, #64]	; (8000bc4 <button_reading+0x170>)
 8000b84:	5cd3      	ldrb	r3, [r2, r3]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	bf0c      	ite	eq
 8000b8a:	2301      	moveq	r3, #1
 8000b8c:	2300      	movne	r3, #0
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	b25a      	sxtb	r2, r3
 8000b92:	4b13      	ldr	r3, [pc, #76]	; (8000be0 <button_reading+0x18c>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	b25b      	sxtb	r3, r3
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	b25b      	sxtb	r3, r3
 8000b9c:	b2da      	uxtb	r2, r3
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <button_reading+0x18c>)
 8000ba0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUMBER_OF_BUTTONS; i++) {
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	71fb      	strb	r3, [r7, #7]
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
 8000baa:	2b02      	cmp	r3, #2
 8000bac:	f67f af58 	bls.w	8000a60 <button_reading+0xc>
#endif
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	370c      	adds	r7, #12
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	200000dc 	.word	0x200000dc
 8000bc0:	200000e0 	.word	0x200000e0
 8000bc4:	200000d8 	.word	0x200000d8
 8000bc8:	200000ec 	.word	0x200000ec
 8000bcc:	200000e4 	.word	0x200000e4
 8000bd0:	20000430 	.word	0x20000430
 8000bd4:	20000428 	.word	0x20000428
 8000bd8:	20000104 	.word	0x20000104
 8000bdc:	20000460 	.word	0x20000460
 8000be0:	200000d7 	.word	0x200000d7

08000be4 <is_button_press>:

unsigned char is_button_press(unsigned char index) {
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
    if (index >= NUMBER_OF_BUTTONS)
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d901      	bls.n	8000bf8 <is_button_press+0x14>
        return 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	e007      	b.n	8000c08 <is_button_press+0x24>
    return (flagForButtonPress[index] == 1);
 8000bf8:	79fb      	ldrb	r3, [r7, #7]
 8000bfa:	4a06      	ldr	r2, [pc, #24]	; (8000c14 <is_button_press+0x30>)
 8000bfc:	5cd3      	ldrb	r3, [r2, r3]
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	bf0c      	ite	eq
 8000c02:	2301      	moveq	r3, #1
 8000c04:	2300      	movne	r3, #0
 8000c06:	b2db      	uxtb	r3, r3
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000430 	.word	0x20000430

08000c18 <is_button_hold>:

unsigned char is_button_hold(unsigned char index) {
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
    if (index >= NUMBER_OF_BUTTONS)
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	2b02      	cmp	r3, #2
 8000c26:	d901      	bls.n	8000c2c <is_button_hold+0x14>
        return 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	e007      	b.n	8000c3c <is_button_hold+0x24>
    return (flagForButtonHold[index] == 1);
 8000c2c:	79fb      	ldrb	r3, [r7, #7]
 8000c2e:	4a06      	ldr	r2, [pc, #24]	; (8000c48 <is_button_hold+0x30>)
 8000c30:	5cd3      	ldrb	r3, [r2, r3]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	bf0c      	ite	eq
 8000c36:	2301      	moveq	r3, #1
 8000c38:	2300      	movne	r3, #0
 8000c3a:	b2db      	uxtb	r3, r3
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bc80      	pop	{r7}
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	20000428 	.word	0x20000428

08000c4c <unit_test_button_read>:
        return 0;
    return (flagForButtonTapHold[index] == 1);
}

#ifdef UNIT_TEST
void unit_test_button_read(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
	if(test_button == 1) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, RESET);
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <unit_test_button_read+0x30>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d105      	bne.n	8000c64 <unit_test_button_read+0x18>
 8000c58:	2200      	movs	r2, #0
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4808      	ldr	r0, [pc, #32]	; (8000c80 <unit_test_button_read+0x34>)
 8000c60:	f000 ff7b 	bl	8001b5a <HAL_GPIO_WritePin>
	if(test_button == 0) HAL_GPIO_WritePin(TEST_Button_GPIO_Port, TEST_Button_Pin, SET);
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <unit_test_button_read+0x30>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d105      	bne.n	8000c78 <unit_test_button_read+0x2c>
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c72:	4803      	ldr	r0, [pc, #12]	; (8000c80 <unit_test_button_read+0x34>)
 8000c74:	f000 ff71 	bl	8001b5a <HAL_GPIO_WritePin>
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	200000d7 	.word	0x200000d7
 8000c80:	40010800 	.word	0x40010800

08000c84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c88:	f000 fc66 	bl	8001558 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c8c:	f000 f842 	bl	8000d14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c90:	f000 f8c8 	bl	8000e24 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000c94:	f000 f87a 	bl	8000d8c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000c98:	4816      	ldr	r0, [pc, #88]	; (8000cf4 <main+0x70>)
 8000c9a:	f001 fbbb 	bl	8002414 <HAL_TIM_Base_Start_IT>
#endif
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  set_timer(1000, &timer_flag[0]);
 8000c9e:	4916      	ldr	r1, [pc, #88]	; (8000cf8 <main+0x74>)
 8000ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ca4:	f000 f924 	bl	8000ef0 <set_timer>
  set_timer(1000, &timer_flag[1]);
 8000ca8:	4914      	ldr	r1, [pc, #80]	; (8000cfc <main+0x78>)
 8000caa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cae:	f000 f91f 	bl	8000ef0 <set_timer>
  set_timer(1000, &timer_flag[2]);
 8000cb2:	4913      	ldr	r1, [pc, #76]	; (8000d00 <main+0x7c>)
 8000cb4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb8:	f000 f91a 	bl	8000ef0 <set_timer>
  set_timer(1000, &timer_flag[3]);
 8000cbc:	4911      	ldr	r1, [pc, #68]	; (8000d04 <main+0x80>)
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f000 f915 	bl	8000ef0 <set_timer>
  set_timer(1000, &timer_flag[4]);
 8000cc6:	4910      	ldr	r1, [pc, #64]	; (8000d08 <main+0x84>)
 8000cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ccc:	f000 f910 	bl	8000ef0 <set_timer>
  set_timer(1000, &timer_flag[5]);
 8000cd0:	490e      	ldr	r1, [pc, #56]	; (8000d0c <main+0x88>)
 8000cd2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cd6:	f000 f90b 	bl	8000ef0 <set_timer>
	  if(p_flag == 1){
		  HAL_GPIO_TogglePin(TEST_Button_GPIO_Port, TEST_Button_Pin);
		  p_clockSet(1000);
	  }
#endif
	  unit_test_software_timer();
 8000cda:	f000 fa37 	bl	800114c <unit_test_software_timer>
//	  unit_test_7seg();
	  unit_test_button_read();
 8000cde:	f7ff ffb5 	bl	8000c4c <unit_test_button_read>

	  // FSM
	  fsm_for_input_processing();
 8000ce2:	f7ff fe4f 	bl	8000984 <fsm_for_input_processing>
	  fsm_run(m_mode);
 8000ce6:	4b0a      	ldr	r3, [pc, #40]	; (8000d10 <main+0x8c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fdec 	bl	80008c8 <fsm_run>
	  unit_test_software_timer();
 8000cf0:	e7f3      	b.n	8000cda <main+0x56>
 8000cf2:	bf00      	nop
 8000cf4:	20000464 	.word	0x20000464
 8000cf8:	200000cc 	.word	0x200000cc
 8000cfc:	200000cd 	.word	0x200000cd
 8000d00:	200000ce 	.word	0x200000ce
 8000d04:	200000cf 	.word	0x200000cf
 8000d08:	200000d0 	.word	0x200000d0
 8000d0c:	200000d1 	.word	0x200000d1
 8000d10:	200000d5 	.word	0x200000d5

08000d14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b090      	sub	sp, #64	; 0x40
 8000d18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1a:	f107 0318 	add.w	r3, r7, #24
 8000d1e:	2228      	movs	r2, #40	; 0x28
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f001 ff3c 	bl	8002ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d36:	2302      	movs	r3, #2
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3e:	2310      	movs	r3, #16
 8000d40:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d42:	2300      	movs	r3, #0
 8000d44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d46:	f107 0318 	add.w	r3, r7, #24
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f000 ff36 	bl	8001bbc <HAL_RCC_OscConfig>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d56:	f000 f8c5 	bl	8000ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d62:	2300      	movs	r3, #0
 8000d64:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d66:	2300      	movs	r3, #0
 8000d68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2100      	movs	r1, #0
 8000d72:	4618      	mov	r0, r3
 8000d74:	f001 f9a2 	bl	80020bc <HAL_RCC_ClockConfig>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d7e:	f000 f8b1 	bl	8000ee4 <Error_Handler>
  }
}
 8000d82:	bf00      	nop
 8000d84:	3740      	adds	r7, #64	; 0x40
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b086      	sub	sp, #24
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0308 	add.w	r3, r7, #8
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	463b      	mov	r3, r7
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da8:	4b1d      	ldr	r3, [pc, #116]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000daa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000db0:	4b1b      	ldr	r3, [pc, #108]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000db2:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000db6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db8:	4b19      	ldr	r3, [pc, #100]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dbe:	4b18      	ldr	r3, [pc, #96]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dc0:	2209      	movs	r2, #9
 8000dc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dd0:	4813      	ldr	r0, [pc, #76]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dd2:	f001 facf 	bl	8002374 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000ddc:	f000 f882 	bl	8000ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0308 	add.w	r3, r7, #8
 8000dea:	4619      	mov	r1, r3
 8000dec:	480c      	ldr	r0, [pc, #48]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000dee:	f001 fc4d 	bl	800268c <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000df8:	f000 f874 	bl	8000ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4805      	ldr	r0, [pc, #20]	; (8000e20 <MX_TIM2_Init+0x94>)
 8000e0a:	f001 fe25 	bl	8002a58 <HAL_TIMEx_MasterConfigSynchronization>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f866 	bl	8000ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20000464 	.word	0x20000464

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 0308 	add.w	r3, r7, #8
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e38:	4b27      	ldr	r3, [pc, #156]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	4a26      	ldr	r2, [pc, #152]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e3e:	f043 0304 	orr.w	r3, r3, #4
 8000e42:	6193      	str	r3, [r2, #24]
 8000e44:	4b24      	ldr	r3, [pc, #144]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0304 	and.w	r3, r3, #4
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e50:	4b21      	ldr	r3, [pc, #132]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e52:	699b      	ldr	r3, [r3, #24]
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e56:	f043 0308 	orr.w	r3, r3, #8
 8000e5a:	6193      	str	r3, [r2, #24]
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e5e:	699b      	ldr	r3, [r3, #24]
 8000e60:	f003 0308 	and.w	r3, r3, #8
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000e68:	2200      	movs	r2, #0
 8000e6a:	f64f 71f8 	movw	r1, #65528	; 0xfff8
 8000e6e:	481b      	ldr	r0, [pc, #108]	; (8000edc <MX_GPIO_Init+0xb8>)
 8000e70:	f000 fe73 	bl	8001b5a <HAL_GPIO_WritePin>
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|LED1_R_Pin
 8000e74:	2200      	movs	r2, #0
 8000e76:	213f      	movs	r1, #63	; 0x3f
 8000e78:	4819      	ldr	r0, [pc, #100]	; (8000ee0 <MX_GPIO_Init+0xbc>)
 8000e7a:	f000 fe6e 	bl	8001b5a <HAL_GPIO_WritePin>
                          |LED1_Y_Pin|LED1_G_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTON_0_Pin BUTTON_1_Pin BUTTON_2_Pin */
  GPIO_InitStruct.Pin = BUTTON_0_Pin|BUTTON_1_Pin|BUTTON_2_Pin;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e86:	2301      	movs	r3, #1
 8000e88:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8a:	f107 0308 	add.w	r3, r7, #8
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <MX_GPIO_Init+0xb8>)
 8000e92:	f000 fcd1 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           SEG0_Pin SEG1_Pin SEG2_Pin SEG3_Pin
                           SEG4_Pin SEG5_Pin SEG6_Pin TEST_Timer_Pin
                           TEST_Button_Pin */
  GPIO_InitStruct.Pin = EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
 8000e96:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8000e9a:	60bb      	str	r3, [r7, #8]
                          |SEG0_Pin|SEG1_Pin|SEG2_Pin|SEG3_Pin
                          |SEG4_Pin|SEG5_Pin|SEG6_Pin|TEST_Timer_Pin
                          |TEST_Button_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea8:	f107 0308 	add.w	r3, r7, #8
 8000eac:	4619      	mov	r1, r3
 8000eae:	480b      	ldr	r0, [pc, #44]	; (8000edc <MX_GPIO_Init+0xb8>)
 8000eb0:	f000 fcc2 	bl	8001838 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED0_R_Pin LED0_Y_Pin LED0_G_Pin LED1_R_Pin
                           LED1_Y_Pin LED1_G_Pin */
  GPIO_InitStruct.Pin = LED0_R_Pin|LED0_Y_Pin|LED0_G_Pin|LED1_R_Pin
 8000eb4:	233f      	movs	r3, #63	; 0x3f
 8000eb6:	60bb      	str	r3, [r7, #8]
                          |LED1_Y_Pin|LED1_G_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec4:	f107 0308 	add.w	r3, r7, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_GPIO_Init+0xbc>)
 8000ecc:	f000 fcb4 	bl	8001838 <HAL_GPIO_Init>

}
 8000ed0:	bf00      	nop
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40021000 	.word	0x40021000
 8000edc:	40010800 	.word	0x40010800
 8000ee0:	40010c00 	.word	0x40010c00

08000ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ee8:	b672      	cpsid	i
}
 8000eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eec:	e7fe      	b.n	8000eec <Error_Handler+0x8>
	...

08000ef0 <set_timer>:
#include "stdlib.h"
#include "global.h"

uint8_t  currentTimerSlotWheel1 = 0, currentTimerSlotWheel2 = 0;

void set_timer(uint32_t duration, uint8_t* timer_flag){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	*timer_flag = 0;
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	Timer* newTimer = (Timer*)malloc(sizeof(Timer));
 8000f00:	200c      	movs	r0, #12
 8000f02:	f001 fe3d 	bl	8002b80 <malloc>
 8000f06:	4603      	mov	r3, r0
 8000f08:	60fb      	str	r3, [r7, #12]
	if (newTimer == NULL) return;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d049      	beq.n	8000fa4 <set_timer+0xb4>
	newTimer->duration = duration;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	b29a      	uxth	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	801a      	strh	r2, [r3, #0]
	newTimer->timer_flag = timer_flag;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
	if(duration / TIMER_CYCLE >= WHEEL1){// assign to wheel 2
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f24:	d320      	bcc.n	8000f68 <set_timer+0x78>
		uint8_t newTimerSlot = (currentTimerSlotWheel2 + (duration / TIMER_CYCLE) / WHEEL1) % WHEEL2;
 8000f26:	4b21      	ldr	r3, [pc, #132]	; (8000fac <set_timer+0xbc>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <set_timer+0xc0>)
 8000f30:	fba2 2303 	umull	r2, r3, r2, r3
 8000f34:	099b      	lsrs	r3, r3, #6
 8000f36:	4419      	add	r1, r3
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <set_timer+0xc4>)
 8000f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8000f3e:	099a      	lsrs	r2, r3, #6
 8000f40:	4613      	mov	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	4413      	add	r3, r2
 8000f46:	015a      	lsls	r2, r3, #5
 8000f48:	4413      	add	r3, r2
 8000f4a:	1aca      	subs	r2, r1, r3
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	72bb      	strb	r3, [r7, #10]
		newTimer->next = timerWheel2[newTimerSlot];
 8000f50:	7abb      	ldrb	r3, [r7, #10]
 8000f52:	4a19      	ldr	r2, [pc, #100]	; (8000fb8 <set_timer+0xc8>)
 8000f54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	609a      	str	r2, [r3, #8]
		timerWheel2[newTimerSlot] = newTimer;
 8000f5c:	7abb      	ldrb	r3, [r7, #10]
 8000f5e:	4916      	ldr	r1, [pc, #88]	; (8000fb8 <set_timer+0xc8>)
 8000f60:	68fa      	ldr	r2, [r7, #12]
 8000f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000f66:	e01e      	b.n	8000fa6 <set_timer+0xb6>
	}
	else{// assign to wheel 1
		uint8_t newTimerSlot = (currentTimerSlotWheel1 + duration / TIMER_CYCLE) % WHEEL1;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <set_timer+0xcc>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a13      	ldr	r2, [pc, #76]	; (8000fc0 <set_timer+0xd0>)
 8000f72:	fba2 2303 	umull	r2, r3, r2, r3
 8000f76:	08db      	lsrs	r3, r3, #3
 8000f78:	18ca      	adds	r2, r1, r3
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <set_timer+0xd4>)
 8000f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8000f80:	095b      	lsrs	r3, r3, #5
 8000f82:	2164      	movs	r1, #100	; 0x64
 8000f84:	fb01 f303 	mul.w	r3, r1, r3
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	72fb      	strb	r3, [r7, #11]
		newTimer->next = timerWheel1[newTimerSlot];
 8000f8c:	7afb      	ldrb	r3, [r7, #11]
 8000f8e:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <set_timer+0xd8>)
 8000f90:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	609a      	str	r2, [r3, #8]
		timerWheel1[newTimerSlot] = newTimer;
 8000f98:	7afb      	ldrb	r3, [r7, #11]
 8000f9a:	490b      	ldr	r1, [pc, #44]	; (8000fc8 <set_timer+0xd8>)
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000fa2:	e000      	b.n	8000fa6 <set_timer+0xb6>
	if (newTimer == NULL) return;
 8000fa4:	bf00      	nop
	}
}
 8000fa6:	3710      	adds	r7, #16
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	200000f3 	.word	0x200000f3
 8000fb0:	10624dd3 	.word	0x10624dd3
 8000fb4:	a57eb503 	.word	0xa57eb503
 8000fb8:	2000029c 	.word	0x2000029c
 8000fbc:	200000f2 	.word	0x200000f2
 8000fc0:	cccccccd 	.word	0xcccccccd
 8000fc4:	51eb851f 	.word	0x51eb851f
 8000fc8:	20000108 	.word	0x20000108

08000fcc <timer_tick>:

void timer_tick(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
    if (currentTimerSlotWheel1 == 0){
 8000fd2:	4b4d      	ldr	r3, [pc, #308]	; (8001108 <timer_tick+0x13c>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d162      	bne.n	80010a0 <timer_tick+0xd4>
        Timer* processTimer = timerWheel2[currentTimerSlotWheel2];
 8000fda:	4b4c      	ldr	r3, [pc, #304]	; (800110c <timer_tick+0x140>)
 8000fdc:	781b      	ldrb	r3, [r3, #0]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	4b4b      	ldr	r3, [pc, #300]	; (8001110 <timer_tick+0x144>)
 8000fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fe6:	617b      	str	r3, [r7, #20]
        while (processTimer != NULL){
 8000fe8:	e03d      	b.n	8001066 <timer_tick+0x9a>
            uint8_t newTimerSlot = (processTimer->duration / TIMER_CYCLE) % WHEEL1;
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	881b      	ldrh	r3, [r3, #0]
 8000fee:	4a49      	ldr	r2, [pc, #292]	; (8001114 <timer_tick+0x148>)
 8000ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff4:	08db      	lsrs	r3, r3, #3
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	4a47      	ldr	r2, [pc, #284]	; (8001118 <timer_tick+0x14c>)
 8000ffa:	fba2 1203 	umull	r1, r2, r2, r3
 8000ffe:	0952      	lsrs	r2, r2, #5
 8001000:	2164      	movs	r1, #100	; 0x64
 8001002:	fb01 f202 	mul.w	r2, r1, r2
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	b29b      	uxth	r3, r3
 800100a:	73fb      	strb	r3, [r7, #15]
            Timer* newTimer = (Timer*)malloc(sizeof(Timer));
 800100c:	200c      	movs	r0, #12
 800100e:	f001 fdb7 	bl	8002b80 <malloc>
 8001012:	4603      	mov	r3, r0
 8001014:	60bb      	str	r3, [r7, #8]
            if (newTimer == NULL) return;
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d070      	beq.n	80010fe <timer_tick+0x132>
            newTimer->duration = processTimer->duration % (WHEEL1 * TIMER_CYCLE);
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	881b      	ldrh	r3, [r3, #0]
 8001020:	4a3e      	ldr	r2, [pc, #248]	; (800111c <timer_tick+0x150>)
 8001022:	fba2 1203 	umull	r1, r2, r2, r3
 8001026:	0992      	lsrs	r2, r2, #6
 8001028:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800102c:	fb01 f202 	mul.w	r2, r1, r2
 8001030:	1a9b      	subs	r3, r3, r2
 8001032:	b29a      	uxth	r2, r3
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	801a      	strh	r2, [r3, #0]
            newTimer->timer_flag = processTimer->timer_flag;
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	685a      	ldr	r2, [r3, #4]
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	605a      	str	r2, [r3, #4]
            newTimer->next = timerWheel1[newTimerSlot];
 8001040:	7bfb      	ldrb	r3, [r7, #15]
 8001042:	4a37      	ldr	r2, [pc, #220]	; (8001120 <timer_tick+0x154>)
 8001044:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	609a      	str	r2, [r3, #8]
            timerWheel1[newTimerSlot] = newTimer;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
 800104e:	4934      	ldr	r1, [pc, #208]	; (8001120 <timer_tick+0x154>)
 8001050:	68ba      	ldr	r2, [r7, #8]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

            Timer* temp = processTimer;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	607b      	str	r3, [r7, #4]
            processTimer = processTimer->next;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	617b      	str	r3, [r7, #20]
            free(temp);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f001 fd95 	bl	8002b90 <free>
        while (processTimer != NULL){
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1be      	bne.n	8000fea <timer_tick+0x1e>
        }
        timerWheel2[currentTimerSlotWheel2] = NULL;
 800106c:	4b27      	ldr	r3, [pc, #156]	; (800110c <timer_tick+0x140>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	4619      	mov	r1, r3
 8001072:	4b27      	ldr	r3, [pc, #156]	; (8001110 <timer_tick+0x144>)
 8001074:	2200      	movs	r2, #0
 8001076:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
        currentTimerSlotWheel2 = (currentTimerSlotWheel2 + 1) % WHEEL2;
 800107a:	4b24      	ldr	r3, [pc, #144]	; (800110c <timer_tick+0x140>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	1c5a      	adds	r2, r3, #1
 8001080:	4b28      	ldr	r3, [pc, #160]	; (8001124 <timer_tick+0x158>)
 8001082:	fb83 1302 	smull	r1, r3, r3, r2
 8001086:	4413      	add	r3, r2
 8001088:	1199      	asrs	r1, r3, #6
 800108a:	17d3      	asrs	r3, r2, #31
 800108c:	1ac9      	subs	r1, r1, r3
 800108e:	460b      	mov	r3, r1
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	440b      	add	r3, r1
 8001094:	0159      	lsls	r1, r3, #5
 8001096:	440b      	add	r3, r1
 8001098:	1ad1      	subs	r1, r2, r3
 800109a:	b2ca      	uxtb	r2, r1
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <timer_tick+0x140>)
 800109e:	701a      	strb	r2, [r3, #0]
    }

    Timer* processTimer = timerWheel1[currentTimerSlotWheel1];
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <timer_tick+0x13c>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	461a      	mov	r2, r3
 80010a6:	4b1e      	ldr	r3, [pc, #120]	; (8001120 <timer_tick+0x154>)
 80010a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ac:	613b      	str	r3, [r7, #16]
    while (processTimer != NULL) {
 80010ae:	e00b      	b.n	80010c8 <timer_tick+0xfc>
        *(processTimer->timer_flag) = 1;
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2201      	movs	r2, #1
 80010b6:	701a      	strb	r2, [r3, #0]
        Timer* temp = processTimer;
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	603b      	str	r3, [r7, #0]
        processTimer = processTimer->next;
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        free(temp);
 80010c2:	6838      	ldr	r0, [r7, #0]
 80010c4:	f001 fd64 	bl	8002b90 <free>
    while (processTimer != NULL) {
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d1f0      	bne.n	80010b0 <timer_tick+0xe4>
    }
    timerWheel1[currentTimerSlotWheel1] = NULL;
 80010ce:	4b0e      	ldr	r3, [pc, #56]	; (8001108 <timer_tick+0x13c>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4619      	mov	r1, r3
 80010d4:	4b12      	ldr	r3, [pc, #72]	; (8001120 <timer_tick+0x154>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    currentTimerSlotWheel1 = (currentTimerSlotWheel1 + 1) % WHEEL1;
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <timer_tick+0x13c>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <timer_tick+0x14c>)
 80010e4:	fb82 1203 	smull	r1, r2, r2, r3
 80010e8:	1151      	asrs	r1, r2, #5
 80010ea:	17da      	asrs	r2, r3, #31
 80010ec:	1a8a      	subs	r2, r1, r2
 80010ee:	2164      	movs	r1, #100	; 0x64
 80010f0:	fb01 f202 	mul.w	r2, r1, r2
 80010f4:	1a9a      	subs	r2, r3, r2
 80010f6:	b2d2      	uxtb	r2, r2
 80010f8:	4b03      	ldr	r3, [pc, #12]	; (8001108 <timer_tick+0x13c>)
 80010fa:	701a      	strb	r2, [r3, #0]
 80010fc:	e000      	b.n	8001100 <timer_tick+0x134>
            if (newTimer == NULL) return;
 80010fe:	bf00      	nop
}
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	200000f2 	.word	0x200000f2
 800110c:	200000f3 	.word	0x200000f3
 8001110:	2000029c 	.word	0x2000029c
 8001114:	cccccccd 	.word	0xcccccccd
 8001118:	51eb851f 	.word	0x51eb851f
 800111c:	10624dd3 	.word	0x10624dd3
 8001120:	20000108 	.word	0x20000108
 8001124:	a57eb503 	.word	0xa57eb503

08001128 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim ){
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
	if( htim->Instance == TIM2 ){
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001138:	d103      	bne.n	8001142 <HAL_TIM_PeriodElapsedCallback+0x1a>
		timer_tick();
 800113a:	f7ff ff47 	bl	8000fcc <timer_tick>
		button_reading();
 800113e:	f7ff fc89 	bl	8000a54 <button_reading>
#ifdef P_CLOCK
		p_clockRun();
#endif
	}
}
 8001142:	bf00      	nop
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
	...

0800114c <unit_test_software_timer>:

void unit_test_software_timer(){
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
	if(timer_flag[0] == 1){
 8001150:	4b07      	ldr	r3, [pc, #28]	; (8001170 <unit_test_software_timer+0x24>)
 8001152:	781b      	ldrb	r3, [r3, #0]
 8001154:	2b01      	cmp	r3, #1
 8001156:	d109      	bne.n	800116c <unit_test_software_timer+0x20>
		HAL_GPIO_TogglePin(TEST_Timer_GPIO_Port, TEST_Timer_Pin);
 8001158:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <unit_test_software_timer+0x28>)
 800115e:	f000 fd14 	bl	8001b8a <HAL_GPIO_TogglePin>
		set_timer(1000, &timer_flag[0]);
 8001162:	4903      	ldr	r1, [pc, #12]	; (8001170 <unit_test_software_timer+0x24>)
 8001164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001168:	f7ff fec2 	bl	8000ef0 <set_timer>
//	if(timer_flag[1] >= 1){
//		HAL_GPIO_TogglePin(TEST_Button_GPIO_Port, TEST_Button_Pin);
//		timer_flag[1] = 0;
//		set_timer(20, &timer_flag[1]);
//	}
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	200000cc 	.word	0x200000cc
 8001174:	40010800 	.word	0x40010800

08001178 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_MspInit+0x5c>)
 8001180:	699b      	ldr	r3, [r3, #24]
 8001182:	4a14      	ldr	r2, [pc, #80]	; (80011d4 <HAL_MspInit+0x5c>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6193      	str	r3, [r2, #24]
 800118a:	4b12      	ldr	r3, [pc, #72]	; (80011d4 <HAL_MspInit+0x5c>)
 800118c:	699b      	ldr	r3, [r3, #24]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001196:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_MspInit+0x5c>)
 8001198:	69db      	ldr	r3, [r3, #28]
 800119a:	4a0e      	ldr	r2, [pc, #56]	; (80011d4 <HAL_MspInit+0x5c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a0:	61d3      	str	r3, [r2, #28]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <HAL_MspInit+0x5c>)
 80011a4:	69db      	ldr	r3, [r3, #28]
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011aa:	607b      	str	r3, [r7, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80011ae:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <HAL_MspInit+0x60>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	4a04      	ldr	r2, [pc, #16]	; (80011d8 <HAL_MspInit+0x60>)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000

080011dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b084      	sub	sp, #16
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011ec:	d113      	bne.n	8001216 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011ee:	4b0c      	ldr	r3, [pc, #48]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011f4:	f043 0301 	orr.w	r3, r3, #1
 80011f8:	61d3      	str	r3, [r2, #28]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_TIM_Base_MspInit+0x44>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001206:	2200      	movs	r2, #0
 8001208:	2100      	movs	r1, #0
 800120a:	201c      	movs	r0, #28
 800120c:	f000 fadd 	bl	80017ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001210:	201c      	movs	r0, #28
 8001212:	f000 faf6 	bl	8001802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001216:	bf00      	nop
 8001218:	3710      	adds	r7, #16
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <NMI_Handler+0x4>

0800122a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800122e:	e7fe      	b.n	800122e <HardFault_Handler+0x4>

08001230 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001234:	e7fe      	b.n	8001234 <MemManage_Handler+0x4>

08001236 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800123a:	e7fe      	b.n	800123a <BusFault_Handler+0x4>

0800123c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001240:	e7fe      	b.n	8001240 <UsageFault_Handler+0x4>

08001242 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001242:	b480      	push	{r7}
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001246:	bf00      	nop
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	bc80      	pop	{r7}
 8001258:	4770      	bx	lr

0800125a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126a:	f000 f9bb 	bl	80015e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001278:	4802      	ldr	r0, [pc, #8]	; (8001284 <TIM2_IRQHandler+0x10>)
 800127a:	f001 f917 	bl	80024ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20000464 	.word	0x20000464

08001288 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001290:	4a14      	ldr	r2, [pc, #80]	; (80012e4 <_sbrk+0x5c>)
 8001292:	4b15      	ldr	r3, [pc, #84]	; (80012e8 <_sbrk+0x60>)
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800129c:	4b13      	ldr	r3, [pc, #76]	; (80012ec <_sbrk+0x64>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d102      	bne.n	80012aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <_sbrk+0x64>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <_sbrk+0x68>)
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <_sbrk+0x64>)
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4413      	add	r3, r2
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d207      	bcs.n	80012c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012b8:	f001 fc38 	bl	8002b2c <__errno>
 80012bc:	4603      	mov	r3, r0
 80012be:	220c      	movs	r2, #12
 80012c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012c2:	f04f 33ff 	mov.w	r3, #4294967295
 80012c6:	e009      	b.n	80012dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ce:	4b07      	ldr	r3, [pc, #28]	; (80012ec <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <_sbrk+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3718      	adds	r7, #24
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	20002800 	.word	0x20002800
 80012e8:	00000400 	.word	0x00000400
 80012ec:	200000f4 	.word	0x200000f4
 80012f0:	200004c0 	.word	0x200004c0

080012f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bc80      	pop	{r7}
 80012fe:	4770      	bx	lr

08001300 <fsm_traffic>:
//#define UNIT_TEST

traffic_mode	t_mode_main = RED,
				t_mode_side = GREEN;

void fsm_traffic(traffic_mode* mode, traffic_way* Tway, uint8_t* timer_flag){
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
	switch(*mode){
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d042      	beq.n	800139a <fsm_traffic+0x9a>
 8001314:	2b02      	cmp	r3, #2
 8001316:	dc5e      	bgt.n	80013d6 <fsm_traffic+0xd6>
 8001318:	2b00      	cmp	r3, #0
 800131a:	d002      	beq.n	8001322 <fsm_traffic+0x22>
 800131c:	2b01      	cmp	r3, #1
 800131e:	d01e      	beq.n	800135e <fsm_traffic+0x5e>
			Tway->count_down = Tway->yellow + 1;
		}
		break;
	default:

		break;
 8001320:	e059      	b.n	80013d6 <fsm_traffic+0xd6>
		if(*timer_flag == 1){
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d157      	bne.n	80013da <fsm_traffic+0xda>
			*mode = GREEN;
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	2202      	movs	r2, #2
 800132e:	701a      	strb	r2, [r3, #0]
			lit_green(Tway->way);
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f8b9 	bl	80014ac <lit_green>
			set_timer(Tway->green *SEC, timer_flag);
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	791b      	ldrb	r3, [r3, #4]
 800133e:	461a      	mov	r2, r3
 8001340:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001344:	fb03 f302 	mul.w	r3, r3, r2
 8001348:	6879      	ldr	r1, [r7, #4]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff fdd0 	bl	8000ef0 <set_timer>
			Tway->count_down = Tway->green + 1;
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	791b      	ldrb	r3, [r3, #4]
 8001354:	3301      	adds	r3, #1
 8001356:	b2da      	uxtb	r2, r3
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	705a      	strb	r2, [r3, #1]
		break;
 800135c:	e03d      	b.n	80013da <fsm_traffic+0xda>
		if(*timer_flag == 1){
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d13b      	bne.n	80013de <fsm_traffic+0xde>
			*mode = RED;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
			lit_red(Tway->way);
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f000 f83b 	bl	80013ec <lit_red>
			set_timer(Tway->red *SEC, timer_flag);
 8001376:	68bb      	ldr	r3, [r7, #8]
 8001378:	789b      	ldrb	r3, [r3, #2]
 800137a:	461a      	mov	r2, r3
 800137c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001380:	fb03 f302 	mul.w	r3, r3, r2
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fdb2 	bl	8000ef0 <set_timer>
			Tway->count_down = Tway->red + 1;
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	789b      	ldrb	r3, [r3, #2]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	705a      	strb	r2, [r3, #1]
		break;
 8001398:	e021      	b.n	80013de <fsm_traffic+0xde>
		if(*timer_flag == 1){
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d11f      	bne.n	80013e2 <fsm_traffic+0xe2>
			*mode = YELLOW;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	2201      	movs	r2, #1
 80013a6:	701a      	strb	r2, [r3, #0]
			lit_yellow(Tway->way);
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f000 f84d 	bl	800144c <lit_yellow>
			set_timer(Tway->yellow *SEC, timer_flag);
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	78db      	ldrb	r3, [r3, #3]
 80013b6:	461a      	mov	r2, r3
 80013b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013bc:	fb03 f302 	mul.w	r3, r3, r2
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fd94 	bl	8000ef0 <set_timer>
			Tway->count_down = Tway->yellow + 1;
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	78db      	ldrb	r3, [r3, #3]
 80013cc:	3301      	adds	r3, #1
 80013ce:	b2da      	uxtb	r2, r3
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	705a      	strb	r2, [r3, #1]
		break;
 80013d4:	e005      	b.n	80013e2 <fsm_traffic+0xe2>
		break;
 80013d6:	bf00      	nop
 80013d8:	e004      	b.n	80013e4 <fsm_traffic+0xe4>
		break;
 80013da:	bf00      	nop
 80013dc:	e002      	b.n	80013e4 <fsm_traffic+0xe4>
		break;
 80013de:	bf00      	nop
 80013e0:	e000      	b.n	80013e4 <fsm_traffic+0xe4>
		break;
 80013e2:	bf00      	nop
	}
}
 80013e4:	bf00      	nop
 80013e6:	3710      	adds	r7, #16
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <lit_red>:

void lit_red(whichWay way){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d10e      	bne.n	800141a <lit_red+0x2e>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, RESET);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2101      	movs	r1, #1
 8001400:	4811      	ldr	r0, [pc, #68]	; (8001448 <lit_red+0x5c>)
 8001402:	f000 fbaa 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 8001406:	2201      	movs	r2, #1
 8001408:	2102      	movs	r1, #2
 800140a:	480f      	ldr	r0, [pc, #60]	; (8001448 <lit_red+0x5c>)
 800140c:	f000 fba5 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001410:	2201      	movs	r2, #1
 8001412:	2104      	movs	r1, #4
 8001414:	480c      	ldr	r0, [pc, #48]	; (8001448 <lit_red+0x5c>)
 8001416:	f000 fba0 	bl	8001b5a <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 800141a:	79fb      	ldrb	r3, [r7, #7]
 800141c:	2b01      	cmp	r3, #1
 800141e:	d10e      	bne.n	800143e <lit_red+0x52>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, RESET);
 8001420:	2200      	movs	r2, #0
 8001422:	2108      	movs	r1, #8
 8001424:	4808      	ldr	r0, [pc, #32]	; (8001448 <lit_red+0x5c>)
 8001426:	f000 fb98 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 800142a:	2201      	movs	r2, #1
 800142c:	2110      	movs	r1, #16
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <lit_red+0x5c>)
 8001430:	f000 fb93 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 8001434:	2201      	movs	r2, #1
 8001436:	2120      	movs	r1, #32
 8001438:	4803      	ldr	r0, [pc, #12]	; (8001448 <lit_red+0x5c>)
 800143a:	f000 fb8e 	bl	8001b5a <HAL_GPIO_WritePin>
	}
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	40010c00 	.word	0x40010c00

0800144c <lit_yellow>:

void lit_yellow(whichWay way){
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	4603      	mov	r3, r0
 8001454:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 8001456:	79fb      	ldrb	r3, [r7, #7]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10e      	bne.n	800147a <lit_yellow+0x2e>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, RESET);
 800145c:	2200      	movs	r2, #0
 800145e:	2102      	movs	r1, #2
 8001460:	4811      	ldr	r0, [pc, #68]	; (80014a8 <lit_yellow+0x5c>)
 8001462:	f000 fb7a 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, SET);
 8001466:	2201      	movs	r2, #1
 8001468:	2104      	movs	r1, #4
 800146a:	480f      	ldr	r0, [pc, #60]	; (80014a8 <lit_yellow+0x5c>)
 800146c:	f000 fb75 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 8001470:	2201      	movs	r2, #1
 8001472:	2101      	movs	r1, #1
 8001474:	480c      	ldr	r0, [pc, #48]	; (80014a8 <lit_yellow+0x5c>)
 8001476:	f000 fb70 	bl	8001b5a <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d10e      	bne.n	800149e <lit_yellow+0x52>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, RESET);
 8001480:	2200      	movs	r2, #0
 8001482:	2110      	movs	r1, #16
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <lit_yellow+0x5c>)
 8001486:	f000 fb68 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, SET);
 800148a:	2201      	movs	r2, #1
 800148c:	2120      	movs	r1, #32
 800148e:	4806      	ldr	r0, [pc, #24]	; (80014a8 <lit_yellow+0x5c>)
 8001490:	f000 fb63 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 8001494:	2201      	movs	r2, #1
 8001496:	2108      	movs	r1, #8
 8001498:	4803      	ldr	r0, [pc, #12]	; (80014a8 <lit_yellow+0x5c>)
 800149a:	f000 fb5e 	bl	8001b5a <HAL_GPIO_WritePin>
	}
}
 800149e:	bf00      	nop
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	40010c00 	.word	0x40010c00

080014ac <lit_green>:

void lit_green(whichWay way){
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	71fb      	strb	r3, [r7, #7]
	if(way == main_way){
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d10e      	bne.n	80014da <lit_green+0x2e>
		HAL_GPIO_WritePin(LED0_G_GPIO_Port, LED0_G_Pin, RESET);
 80014bc:	2200      	movs	r2, #0
 80014be:	2104      	movs	r1, #4
 80014c0:	4811      	ldr	r0, [pc, #68]	; (8001508 <lit_green+0x5c>)
 80014c2:	f000 fb4a 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_R_GPIO_Port, LED0_R_Pin, SET);
 80014c6:	2201      	movs	r2, #1
 80014c8:	2101      	movs	r1, #1
 80014ca:	480f      	ldr	r0, [pc, #60]	; (8001508 <lit_green+0x5c>)
 80014cc:	f000 fb45 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED0_Y_GPIO_Port, LED0_Y_Pin, SET);
 80014d0:	2201      	movs	r2, #1
 80014d2:	2102      	movs	r1, #2
 80014d4:	480c      	ldr	r0, [pc, #48]	; (8001508 <lit_green+0x5c>)
 80014d6:	f000 fb40 	bl	8001b5a <HAL_GPIO_WritePin>
	}
	if(way == side_way){
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10e      	bne.n	80014fe <lit_green+0x52>
		HAL_GPIO_WritePin(LED1_G_GPIO_Port, LED1_G_Pin, RESET);
 80014e0:	2200      	movs	r2, #0
 80014e2:	2120      	movs	r1, #32
 80014e4:	4808      	ldr	r0, [pc, #32]	; (8001508 <lit_green+0x5c>)
 80014e6:	f000 fb38 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_R_GPIO_Port, LED1_R_Pin, SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2108      	movs	r1, #8
 80014ee:	4806      	ldr	r0, [pc, #24]	; (8001508 <lit_green+0x5c>)
 80014f0:	f000 fb33 	bl	8001b5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED1_Y_GPIO_Port, LED1_Y_Pin, SET);
 80014f4:	2201      	movs	r2, #1
 80014f6:	2110      	movs	r1, #16
 80014f8:	4803      	ldr	r0, [pc, #12]	; (8001508 <lit_green+0x5c>)
 80014fa:	f000 fb2e 	bl	8001b5a <HAL_GPIO_WritePin>
	}
}
 80014fe:	bf00      	nop
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	40010c00 	.word	0x40010c00

0800150c <Reset_Handler>:
 800150c:	f7ff fef2 	bl	80012f4 <SystemInit>
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <LoopFillZerobss+0xe>)
 8001512:	490c      	ldr	r1, [pc, #48]	; (8001544 <LoopFillZerobss+0x12>)
 8001514:	4a0c      	ldr	r2, [pc, #48]	; (8001548 <LoopFillZerobss+0x16>)
 8001516:	2300      	movs	r3, #0
 8001518:	e002      	b.n	8001520 <LoopCopyDataInit>

0800151a <CopyDataInit>:
 800151a:	58d4      	ldr	r4, [r2, r3]
 800151c:	50c4      	str	r4, [r0, r3]
 800151e:	3304      	adds	r3, #4

08001520 <LoopCopyDataInit>:
 8001520:	18c4      	adds	r4, r0, r3
 8001522:	428c      	cmp	r4, r1
 8001524:	d3f9      	bcc.n	800151a <CopyDataInit>
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <LoopFillZerobss+0x1a>)
 8001528:	4c09      	ldr	r4, [pc, #36]	; (8001550 <LoopFillZerobss+0x1e>)
 800152a:	2300      	movs	r3, #0
 800152c:	e001      	b.n	8001532 <LoopFillZerobss>

0800152e <FillZerobss>:
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	3204      	adds	r2, #4

08001532 <LoopFillZerobss>:
 8001532:	42a2      	cmp	r2, r4
 8001534:	d3fb      	bcc.n	800152e <FillZerobss>
 8001536:	f001 faff 	bl	8002b38 <__libc_init_array>
 800153a:	f7ff fba3 	bl	8000c84 <main>
 800153e:	4770      	bx	lr
 8001540:	20000000 	.word	0x20000000
 8001544:	200000b0 	.word	0x200000b0
 8001548:	08002d7c 	.word	0x08002d7c
 800154c:	200000b0 	.word	0x200000b0
 8001550:	200004c0 	.word	0x200004c0

08001554 <ADC1_2_IRQHandler>:
 8001554:	e7fe      	b.n	8001554 <ADC1_2_IRQHandler>
	...

08001558 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800155c:	4b08      	ldr	r3, [pc, #32]	; (8001580 <HAL_Init+0x28>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a07      	ldr	r2, [pc, #28]	; (8001580 <HAL_Init+0x28>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001568:	2003      	movs	r0, #3
 800156a:	f000 f923 	bl	80017b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156e:	200f      	movs	r0, #15
 8001570:	f000 f808 	bl	8001584 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001574:	f7ff fe00 	bl	8001178 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	40022000 	.word	0x40022000

08001584 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x54>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <HAL_InitTick+0x58>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f93b 	bl	800181e <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e00e      	b.n	80015d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2b0f      	cmp	r3, #15
 80015b6:	d80a      	bhi.n	80015ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b8:	2200      	movs	r2, #0
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	f04f 30ff 	mov.w	r0, #4294967295
 80015c0:	f000 f903 	bl	80017ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c4:	4a06      	ldr	r2, [pc, #24]	; (80015e0 <HAL_InitTick+0x5c>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ca:	2300      	movs	r3, #0
 80015cc:	e000      	b.n	80015d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	2000003c 	.word	0x2000003c
 80015dc:	20000048 	.word	0x20000048
 80015e0:	20000044 	.word	0x20000044

080015e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e8:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x1c>)
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	461a      	mov	r2, r3
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <HAL_IncTick+0x20>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4413      	add	r3, r2
 80015f4:	4a03      	ldr	r2, [pc, #12]	; (8001604 <HAL_IncTick+0x20>)
 80015f6:	6013      	str	r3, [r2, #0]
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bc80      	pop	{r7}
 80015fe:	4770      	bx	lr
 8001600:	20000048 	.word	0x20000048
 8001604:	200004ac 	.word	0x200004ac

08001608 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b02      	ldr	r3, [pc, #8]	; (8001618 <HAL_GetTick+0x10>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	200004ac 	.word	0x200004ac

0800161c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800162c:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001632:	68ba      	ldr	r2, [r7, #8]
 8001634:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001638:	4013      	ands	r3, r2
 800163a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001644:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800164c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800164e:	4a04      	ldr	r2, [pc, #16]	; (8001660 <__NVIC_SetPriorityGrouping+0x44>)
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	60d3      	str	r3, [r2, #12]
}
 8001654:	bf00      	nop
 8001656:	3714      	adds	r7, #20
 8001658:	46bd      	mov	sp, r7
 800165a:	bc80      	pop	{r7}
 800165c:	4770      	bx	lr
 800165e:	bf00      	nop
 8001660:	e000ed00 	.word	0xe000ed00

08001664 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <__NVIC_GetPriorityGrouping+0x18>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	0a1b      	lsrs	r3, r3, #8
 800166e:	f003 0307 	and.w	r3, r3, #7
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	4603      	mov	r3, r0
 8001688:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	2b00      	cmp	r3, #0
 8001690:	db0b      	blt.n	80016aa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	f003 021f 	and.w	r2, r3, #31
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <__NVIC_EnableIRQ+0x34>)
 800169a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800169e:	095b      	lsrs	r3, r3, #5
 80016a0:	2001      	movs	r0, #1
 80016a2:	fa00 f202 	lsl.w	r2, r0, r2
 80016a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr
 80016b4:	e000e100 	.word	0xe000e100

080016b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b083      	sub	sp, #12
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	6039      	str	r1, [r7, #0]
 80016c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	db0a      	blt.n	80016e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	b2da      	uxtb	r2, r3
 80016d0:	490c      	ldr	r1, [pc, #48]	; (8001704 <__NVIC_SetPriority+0x4c>)
 80016d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d6:	0112      	lsls	r2, r2, #4
 80016d8:	b2d2      	uxtb	r2, r2
 80016da:	440b      	add	r3, r1
 80016dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e0:	e00a      	b.n	80016f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	b2da      	uxtb	r2, r3
 80016e6:	4908      	ldr	r1, [pc, #32]	; (8001708 <__NVIC_SetPriority+0x50>)
 80016e8:	79fb      	ldrb	r3, [r7, #7]
 80016ea:	f003 030f 	and.w	r3, r3, #15
 80016ee:	3b04      	subs	r3, #4
 80016f0:	0112      	lsls	r2, r2, #4
 80016f2:	b2d2      	uxtb	r2, r2
 80016f4:	440b      	add	r3, r1
 80016f6:	761a      	strb	r2, [r3, #24]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f003 0307 	and.w	r3, r3, #7
 800171e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001720:	69fb      	ldr	r3, [r7, #28]
 8001722:	f1c3 0307 	rsb	r3, r3, #7
 8001726:	2b04      	cmp	r3, #4
 8001728:	bf28      	it	cs
 800172a:	2304      	movcs	r3, #4
 800172c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	3304      	adds	r3, #4
 8001732:	2b06      	cmp	r3, #6
 8001734:	d902      	bls.n	800173c <NVIC_EncodePriority+0x30>
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3b03      	subs	r3, #3
 800173a:	e000      	b.n	800173e <NVIC_EncodePriority+0x32>
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	f04f 32ff 	mov.w	r2, #4294967295
 8001744:	69bb      	ldr	r3, [r7, #24]
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43da      	mvns	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	401a      	ands	r2, r3
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001754:	f04f 31ff 	mov.w	r1, #4294967295
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	fa01 f303 	lsl.w	r3, r1, r3
 800175e:	43d9      	mvns	r1, r3
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001764:	4313      	orrs	r3, r2
         );
}
 8001766:	4618      	mov	r0, r3
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr

08001770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001780:	d301      	bcc.n	8001786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001782:	2301      	movs	r3, #1
 8001784:	e00f      	b.n	80017a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001786:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <SysTick_Config+0x40>)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	3b01      	subs	r3, #1
 800178c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800178e:	210f      	movs	r1, #15
 8001790:	f04f 30ff 	mov.w	r0, #4294967295
 8001794:	f7ff ff90 	bl	80016b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001798:	4b05      	ldr	r3, [pc, #20]	; (80017b0 <SysTick_Config+0x40>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800179e:	4b04      	ldr	r3, [pc, #16]	; (80017b0 <SysTick_Config+0x40>)
 80017a0:	2207      	movs	r2, #7
 80017a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	e000e010 	.word	0xe000e010

080017b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f7ff ff2d 	bl	800161c <__NVIC_SetPriorityGrouping>
}
 80017c2:	bf00      	nop
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ca:	b580      	push	{r7, lr}
 80017cc:	b086      	sub	sp, #24
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	60b9      	str	r1, [r7, #8]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017dc:	f7ff ff42 	bl	8001664 <__NVIC_GetPriorityGrouping>
 80017e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	68b9      	ldr	r1, [r7, #8]
 80017e6:	6978      	ldr	r0, [r7, #20]
 80017e8:	f7ff ff90 	bl	800170c <NVIC_EncodePriority>
 80017ec:	4602      	mov	r2, r0
 80017ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff5f 	bl	80016b8 <__NVIC_SetPriority>
}
 80017fa:	bf00      	nop
 80017fc:	3718      	adds	r7, #24
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	4603      	mov	r3, r0
 800180a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800180c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001810:	4618      	mov	r0, r3
 8001812:	f7ff ff35 	bl	8001680 <__NVIC_EnableIRQ>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b082      	sub	sp, #8
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f7ff ffa2 	bl	8001770 <SysTick_Config>
 800182c:	4603      	mov	r3, r0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
	...

08001838 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001838:	b480      	push	{r7}
 800183a:	b08b      	sub	sp, #44	; 0x2c
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
 8001840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001842:	2300      	movs	r3, #0
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001846:	2300      	movs	r3, #0
 8001848:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800184a:	e148      	b.n	8001ade <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800184c:	2201      	movs	r2, #1
 800184e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	69fa      	ldr	r2, [r7, #28]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 8137 	bne.w	8001ad8 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4aa3      	ldr	r2, [pc, #652]	; (8001afc <HAL_GPIO_Init+0x2c4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d05e      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001874:	4aa1      	ldr	r2, [pc, #644]	; (8001afc <HAL_GPIO_Init+0x2c4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d875      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800187a:	4aa1      	ldr	r2, [pc, #644]	; (8001b00 <HAL_GPIO_Init+0x2c8>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d058      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001880:	4a9f      	ldr	r2, [pc, #636]	; (8001b00 <HAL_GPIO_Init+0x2c8>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d86f      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001886:	4a9f      	ldr	r2, [pc, #636]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d052      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 800188c:	4a9d      	ldr	r2, [pc, #628]	; (8001b04 <HAL_GPIO_Init+0x2cc>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d869      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 8001892:	4a9d      	ldr	r2, [pc, #628]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d04c      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 8001898:	4a9b      	ldr	r2, [pc, #620]	; (8001b08 <HAL_GPIO_Init+0x2d0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d863      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 800189e:	4a9b      	ldr	r2, [pc, #620]	; (8001b0c <HAL_GPIO_Init+0x2d4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d046      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
 80018a4:	4a99      	ldr	r2, [pc, #612]	; (8001b0c <HAL_GPIO_Init+0x2d4>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d85d      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018aa:	2b12      	cmp	r3, #18
 80018ac:	d82a      	bhi.n	8001904 <HAL_GPIO_Init+0xcc>
 80018ae:	2b12      	cmp	r3, #18
 80018b0:	d859      	bhi.n	8001966 <HAL_GPIO_Init+0x12e>
 80018b2:	a201      	add	r2, pc, #4	; (adr r2, 80018b8 <HAL_GPIO_Init+0x80>)
 80018b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018b8:	08001933 	.word	0x08001933
 80018bc:	0800190d 	.word	0x0800190d
 80018c0:	0800191f 	.word	0x0800191f
 80018c4:	08001961 	.word	0x08001961
 80018c8:	08001967 	.word	0x08001967
 80018cc:	08001967 	.word	0x08001967
 80018d0:	08001967 	.word	0x08001967
 80018d4:	08001967 	.word	0x08001967
 80018d8:	08001967 	.word	0x08001967
 80018dc:	08001967 	.word	0x08001967
 80018e0:	08001967 	.word	0x08001967
 80018e4:	08001967 	.word	0x08001967
 80018e8:	08001967 	.word	0x08001967
 80018ec:	08001967 	.word	0x08001967
 80018f0:	08001967 	.word	0x08001967
 80018f4:	08001967 	.word	0x08001967
 80018f8:	08001967 	.word	0x08001967
 80018fc:	08001915 	.word	0x08001915
 8001900:	08001929 	.word	0x08001929
 8001904:	4a82      	ldr	r2, [pc, #520]	; (8001b10 <HAL_GPIO_Init+0x2d8>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800190a:	e02c      	b.n	8001966 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	623b      	str	r3, [r7, #32]
          break;
 8001912:	e029      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	3304      	adds	r3, #4
 800191a:	623b      	str	r3, [r7, #32]
          break;
 800191c:	e024      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800191e:	683b      	ldr	r3, [r7, #0]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	3308      	adds	r3, #8
 8001924:	623b      	str	r3, [r7, #32]
          break;
 8001926:	e01f      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	330c      	adds	r3, #12
 800192e:	623b      	str	r3, [r7, #32]
          break;
 8001930:	e01a      	b.n	8001968 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d102      	bne.n	8001940 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800193a:	2304      	movs	r3, #4
 800193c:	623b      	str	r3, [r7, #32]
          break;
 800193e:	e013      	b.n	8001968 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d105      	bne.n	8001954 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001948:	2308      	movs	r3, #8
 800194a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	69fa      	ldr	r2, [r7, #28]
 8001950:	611a      	str	r2, [r3, #16]
          break;
 8001952:	e009      	b.n	8001968 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001954:	2308      	movs	r3, #8
 8001956:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69fa      	ldr	r2, [r7, #28]
 800195c:	615a      	str	r2, [r3, #20]
          break;
 800195e:	e003      	b.n	8001968 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001960:	2300      	movs	r3, #0
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x130>
          break;
 8001966:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	2bff      	cmp	r3, #255	; 0xff
 800196c:	d801      	bhi.n	8001972 <HAL_GPIO_Init+0x13a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_Init+0x13e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	3304      	adds	r3, #4
 8001976:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	2bff      	cmp	r3, #255	; 0xff
 800197c:	d802      	bhi.n	8001984 <HAL_GPIO_Init+0x14c>
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	e002      	b.n	800198a <HAL_GPIO_Init+0x152>
 8001984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001986:	3b08      	subs	r3, #8
 8001988:	009b      	lsls	r3, r3, #2
 800198a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	210f      	movs	r1, #15
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	fa01 f303 	lsl.w	r3, r1, r3
 8001998:	43db      	mvns	r3, r3
 800199a:	401a      	ands	r2, r3
 800199c:	6a39      	ldr	r1, [r7, #32]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	fa01 f303 	lsl.w	r3, r1, r3
 80019a4:	431a      	orrs	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	f000 8090 	beq.w	8001ad8 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80019b8:	4b56      	ldr	r3, [pc, #344]	; (8001b14 <HAL_GPIO_Init+0x2dc>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	4a55      	ldr	r2, [pc, #340]	; (8001b14 <HAL_GPIO_Init+0x2dc>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	6193      	str	r3, [r2, #24]
 80019c4:	4b53      	ldr	r3, [pc, #332]	; (8001b14 <HAL_GPIO_Init+0x2dc>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80019d0:	4a51      	ldr	r2, [pc, #324]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 80019d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d4:	089b      	lsrs	r3, r3, #2
 80019d6:	3302      	adds	r3, #2
 80019d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	009b      	lsls	r3, r3, #2
 80019e6:	220f      	movs	r2, #15
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	68fa      	ldr	r2, [r7, #12]
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	4a49      	ldr	r2, [pc, #292]	; (8001b1c <HAL_GPIO_Init+0x2e4>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d00d      	beq.n	8001a18 <HAL_GPIO_Init+0x1e0>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <HAL_GPIO_Init+0x2e8>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d007      	beq.n	8001a14 <HAL_GPIO_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	4a47      	ldr	r2, [pc, #284]	; (8001b24 <HAL_GPIO_Init+0x2ec>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d101      	bne.n	8001a10 <HAL_GPIO_Init+0x1d8>
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	e004      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a10:	2303      	movs	r3, #3
 8001a12:	e002      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a14:	2301      	movs	r3, #1
 8001a16:	e000      	b.n	8001a1a <HAL_GPIO_Init+0x1e2>
 8001a18:	2300      	movs	r3, #0
 8001a1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a1c:	f002 0203 	and.w	r2, r2, #3
 8001a20:	0092      	lsls	r2, r2, #2
 8001a22:	4093      	lsls	r3, r2
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a2a:	493b      	ldr	r1, [pc, #236]	; (8001b18 <HAL_GPIO_Init+0x2e0>)
 8001a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a2e:	089b      	lsrs	r3, r3, #2
 8001a30:	3302      	adds	r3, #2
 8001a32:	68fa      	ldr	r2, [r7, #12]
 8001a34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d006      	beq.n	8001a52 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a44:	4b38      	ldr	r3, [pc, #224]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a46:	689a      	ldr	r2, [r3, #8]
 8001a48:	4937      	ldr	r1, [pc, #220]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	608b      	str	r3, [r1, #8]
 8001a50:	e006      	b.n	8001a60 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a52:	4b35      	ldr	r3, [pc, #212]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	4933      	ldr	r1, [pc, #204]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d006      	beq.n	8001a7a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a6e:	68da      	ldr	r2, [r3, #12]
 8001a70:	492d      	ldr	r1, [pc, #180]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a72:	69bb      	ldr	r3, [r7, #24]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	60cb      	str	r3, [r1, #12]
 8001a78:	e006      	b.n	8001a88 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a7a:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a7c:	68da      	ldr	r2, [r3, #12]
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	43db      	mvns	r3, r3
 8001a82:	4929      	ldr	r1, [pc, #164]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a84:	4013      	ands	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d006      	beq.n	8001aa2 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a94:	4b24      	ldr	r3, [pc, #144]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a96:	685a      	ldr	r2, [r3, #4]
 8001a98:	4923      	ldr	r1, [pc, #140]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	604b      	str	r3, [r1, #4]
 8001aa0:	e006      	b.n	8001ab0 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001aa2:	4b21      	ldr	r3, [pc, #132]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001aa4:	685a      	ldr	r2, [r3, #4]
 8001aa6:	69bb      	ldr	r3, [r7, #24]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	491f      	ldr	r1, [pc, #124]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001aac:	4013      	ands	r3, r2
 8001aae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d006      	beq.n	8001aca <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001abc:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4919      	ldr	r1, [pc, #100]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	600b      	str	r3, [r1, #0]
 8001ac8:	e006      	b.n	8001ad8 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001aca:	4b17      	ldr	r3, [pc, #92]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	4915      	ldr	r1, [pc, #84]	; (8001b28 <HAL_GPIO_Init+0x2f0>)
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ada:	3301      	adds	r3, #1
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f aeaf 	bne.w	800184c <HAL_GPIO_Init+0x14>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	372c      	adds	r7, #44	; 0x2c
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bc80      	pop	{r7}
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	10320000 	.word	0x10320000
 8001b00:	10310000 	.word	0x10310000
 8001b04:	10220000 	.word	0x10220000
 8001b08:	10210000 	.word	0x10210000
 8001b0c:	10120000 	.word	0x10120000
 8001b10:	10110000 	.word	0x10110000
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	40010800 	.word	0x40010800
 8001b20:	40010c00 	.word	0x40010c00
 8001b24:	40011000 	.word	0x40011000
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b085      	sub	sp, #20
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	460b      	mov	r3, r1
 8001b36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d002      	beq.n	8001b4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b44:	2301      	movs	r3, #1
 8001b46:	73fb      	strb	r3, [r7, #15]
 8001b48:	e001      	b.n	8001b4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3714      	adds	r7, #20
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	b083      	sub	sp, #12
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
 8001b62:	460b      	mov	r3, r1
 8001b64:	807b      	strh	r3, [r7, #2]
 8001b66:	4613      	mov	r3, r2
 8001b68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b6a:	787b      	ldrb	r3, [r7, #1]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d003      	beq.n	8001b78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b70:	887a      	ldrh	r2, [r7, #2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b76:	e003      	b.n	8001b80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	041a      	lsls	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	611a      	str	r2, [r3, #16]
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bc80      	pop	{r7}
 8001b88:	4770      	bx	lr

08001b8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	b085      	sub	sp, #20
 8001b8e:	af00      	add	r7, sp, #0
 8001b90:	6078      	str	r0, [r7, #4]
 8001b92:	460b      	mov	r3, r1
 8001b94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	68db      	ldr	r3, [r3, #12]
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b9c:	887a      	ldrh	r2, [r7, #2]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	041a      	lsls	r2, r3, #16
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	43d9      	mvns	r1, r3
 8001ba8:	887b      	ldrh	r3, [r7, #2]
 8001baa:	400b      	ands	r3, r1
 8001bac:	431a      	orrs	r2, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	611a      	str	r2, [r3, #16]
}
 8001bb2:	bf00      	nop
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bc80      	pop	{r7}
 8001bba:	4770      	bx	lr

08001bbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d101      	bne.n	8001bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e26c      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0301 	and.w	r3, r3, #1
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 8087 	beq.w	8001cea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001bdc:	4b92      	ldr	r3, [pc, #584]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f003 030c 	and.w	r3, r3, #12
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	d00c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001be8:	4b8f      	ldr	r3, [pc, #572]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b08      	cmp	r3, #8
 8001bf2:	d112      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
 8001bf4:	4b8c      	ldr	r3, [pc, #560]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c00:	d10b      	bne.n	8001c1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c02:	4b89      	ldr	r3, [pc, #548]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d06c      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d168      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e246      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c22:	d106      	bne.n	8001c32 <HAL_RCC_OscConfig+0x76>
 8001c24:	4b80      	ldr	r3, [pc, #512]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a7f      	ldr	r2, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	e02e      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d10c      	bne.n	8001c54 <HAL_RCC_OscConfig+0x98>
 8001c3a:	4b7b      	ldr	r3, [pc, #492]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a7a      	ldr	r2, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c44:	6013      	str	r3, [r2, #0]
 8001c46:	4b78      	ldr	r3, [pc, #480]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a77      	ldr	r2, [pc, #476]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c4c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c50:	6013      	str	r3, [r2, #0]
 8001c52:	e01d      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c5c:	d10c      	bne.n	8001c78 <HAL_RCC_OscConfig+0xbc>
 8001c5e:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a71      	ldr	r2, [pc, #452]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c68:	6013      	str	r3, [r2, #0]
 8001c6a:	4b6f      	ldr	r3, [pc, #444]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a6e      	ldr	r2, [pc, #440]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c74:	6013      	str	r3, [r2, #0]
 8001c76:	e00b      	b.n	8001c90 <HAL_RCC_OscConfig+0xd4>
 8001c78:	4b6b      	ldr	r3, [pc, #428]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a6a      	ldr	r2, [pc, #424]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b68      	ldr	r3, [pc, #416]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a67      	ldr	r2, [pc, #412]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001c8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d013      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c98:	f7ff fcb6 	bl	8001608 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca0:	f7ff fcb2 	bl	8001608 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b64      	cmp	r3, #100	; 0x64
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e1fa      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	4b5d      	ldr	r3, [pc, #372]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0f0      	beq.n	8001ca0 <HAL_RCC_OscConfig+0xe4>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cc0:	f7ff fca2 	bl	8001608 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fc9e 	bl	8001608 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b64      	cmp	r3, #100	; 0x64
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e1e6      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1f0      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x10c>
 8001ce6:	e000      	b.n	8001cea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ce8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0302 	and.w	r3, r3, #2
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d063      	beq.n	8001dbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001cf6:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f003 030c 	and.w	r3, r3, #12
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d00b      	beq.n	8001d1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d02:	4b49      	ldr	r3, [pc, #292]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	f003 030c 	and.w	r3, r3, #12
 8001d0a:	2b08      	cmp	r3, #8
 8001d0c:	d11c      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
 8001d0e:	4b46      	ldr	r3, [pc, #280]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d116      	bne.n	8001d48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d005      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e1ba      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d32:	4b3d      	ldr	r3, [pc, #244]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	4939      	ldr	r1, [pc, #228]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d46:	e03a      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	691b      	ldr	r3, [r3, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d020      	beq.n	8001d92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d50:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d52:	2201      	movs	r2, #1
 8001d54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d56:	f7ff fc57 	bl	8001608 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	e008      	b.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5e:	f7ff fc53 	bl	8001608 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d901      	bls.n	8001d70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d6c:	2303      	movs	r3, #3
 8001d6e:	e19b      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f0      	beq.n	8001d5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d7c:	4b2a      	ldr	r3, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	00db      	lsls	r3, r3, #3
 8001d8a:	4927      	ldr	r1, [pc, #156]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	600b      	str	r3, [r1, #0]
 8001d90:	e015      	b.n	8001dbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d92:	4b26      	ldr	r3, [pc, #152]	; (8001e2c <HAL_RCC_OscConfig+0x270>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d98:	f7ff fc36 	bl	8001608 <HAL_GetTick>
 8001d9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	e008      	b.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da0:	f7ff fc32 	bl	8001608 <HAL_GetTick>
 8001da4:	4602      	mov	r2, r0
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	1ad3      	subs	r3, r2, r3
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d901      	bls.n	8001db2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001dae:	2303      	movs	r3, #3
 8001db0:	e17a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0302 	and.w	r3, r3, #2
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d1f0      	bne.n	8001da0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 0308 	and.w	r3, r3, #8
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d03a      	beq.n	8001e40 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d019      	beq.n	8001e06 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd2:	4b17      	ldr	r3, [pc, #92]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001dd8:	f7ff fc16 	bl	8001608 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001de0:	f7ff fc12 	bl	8001608 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e15a      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	4b0d      	ldr	r3, [pc, #52]	; (8001e28 <HAL_RCC_OscConfig+0x26c>)
 8001df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d0f0      	beq.n	8001de0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f000 fa9a 	bl	8002338 <RCC_Delay>
 8001e04:	e01c      	b.n	8001e40 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_RCC_OscConfig+0x274>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e0c:	f7ff fbfc 	bl	8001608 <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e12:	e00f      	b.n	8001e34 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e14:	f7ff fbf8 	bl	8001608 <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b02      	cmp	r3, #2
 8001e20:	d908      	bls.n	8001e34 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e140      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
 8001e26:	bf00      	nop
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	42420000 	.word	0x42420000
 8001e30:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e34:	4b9e      	ldr	r3, [pc, #632]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1e9      	bne.n	8001e14 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	f000 80a6 	beq.w	8001f9a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e52:	4b97      	ldr	r3, [pc, #604]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10d      	bne.n	8001e7a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e5e:	4b94      	ldr	r3, [pc, #592]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	4a93      	ldr	r2, [pc, #588]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e68:	61d3      	str	r3, [r2, #28]
 8001e6a:	4b91      	ldr	r3, [pc, #580]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	69db      	ldr	r3, [r3, #28]
 8001e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e72:	60bb      	str	r3, [r7, #8]
 8001e74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e76:	2301      	movs	r3, #1
 8001e78:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e7a:	4b8e      	ldr	r3, [pc, #568]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d118      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e86:	4b8b      	ldr	r3, [pc, #556]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a8a      	ldr	r2, [pc, #552]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e92:	f7ff fbb9 	bl	8001608 <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e98:	e008      	b.n	8001eac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e9a:	f7ff fbb5 	bl	8001608 <HAL_GetTick>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b64      	cmp	r3, #100	; 0x64
 8001ea6:	d901      	bls.n	8001eac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e0fd      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eac:	4b81      	ldr	r3, [pc, #516]	; (80020b4 <HAL_RCC_OscConfig+0x4f8>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0f0      	beq.n	8001e9a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	68db      	ldr	r3, [r3, #12]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d106      	bne.n	8001ece <HAL_RCC_OscConfig+0x312>
 8001ec0:	4b7b      	ldr	r3, [pc, #492]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	4a7a      	ldr	r2, [pc, #488]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	6213      	str	r3, [r2, #32]
 8001ecc:	e02d      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d10c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x334>
 8001ed6:	4b76      	ldr	r3, [pc, #472]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ed8:	6a1b      	ldr	r3, [r3, #32]
 8001eda:	4a75      	ldr	r2, [pc, #468]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	f023 0301 	bic.w	r3, r3, #1
 8001ee0:	6213      	str	r3, [r2, #32]
 8001ee2:	4b73      	ldr	r3, [pc, #460]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee4:	6a1b      	ldr	r3, [r3, #32]
 8001ee6:	4a72      	ldr	r2, [pc, #456]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	6213      	str	r3, [r2, #32]
 8001eee:	e01c      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b05      	cmp	r3, #5
 8001ef6:	d10c      	bne.n	8001f12 <HAL_RCC_OscConfig+0x356>
 8001ef8:	4b6d      	ldr	r3, [pc, #436]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	4a6c      	ldr	r2, [pc, #432]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001efe:	f043 0304 	orr.w	r3, r3, #4
 8001f02:	6213      	str	r3, [r2, #32]
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	4a69      	ldr	r2, [pc, #420]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f0a:	f043 0301 	orr.w	r3, r3, #1
 8001f0e:	6213      	str	r3, [r2, #32]
 8001f10:	e00b      	b.n	8001f2a <HAL_RCC_OscConfig+0x36e>
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f14:	6a1b      	ldr	r3, [r3, #32]
 8001f16:	4a66      	ldr	r2, [pc, #408]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	f023 0301 	bic.w	r3, r3, #1
 8001f1c:	6213      	str	r3, [r2, #32]
 8001f1e:	4b64      	ldr	r3, [pc, #400]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	4a63      	ldr	r2, [pc, #396]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f24:	f023 0304 	bic.w	r3, r3, #4
 8001f28:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d015      	beq.n	8001f5e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f32:	f7ff fb69 	bl	8001608 <HAL_GetTick>
 8001f36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f38:	e00a      	b.n	8001f50 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f3a:	f7ff fb65 	bl	8001608 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d901      	bls.n	8001f50 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e0ab      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f50:	4b57      	ldr	r3, [pc, #348]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f52:	6a1b      	ldr	r3, [r3, #32]
 8001f54:	f003 0302 	and.w	r3, r3, #2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d0ee      	beq.n	8001f3a <HAL_RCC_OscConfig+0x37e>
 8001f5c:	e014      	b.n	8001f88 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fb53 	bl	8001608 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f64:	e00a      	b.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f66:	f7ff fb4f 	bl	8001608 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e095      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f7c:	4b4c      	ldr	r3, [pc, #304]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	f003 0302 	and.w	r3, r3, #2
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1ee      	bne.n	8001f66 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f88:	7dfb      	ldrb	r3, [r7, #23]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d105      	bne.n	8001f9a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b48      	ldr	r3, [pc, #288]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a47      	ldr	r2, [pc, #284]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 8081 	beq.w	80020a6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fa4:	4b42      	ldr	r3, [pc, #264]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f003 030c 	and.w	r3, r3, #12
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	d061      	beq.n	8002074 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	69db      	ldr	r3, [r3, #28]
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d146      	bne.n	8002046 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fb8:	4b3f      	ldr	r3, [pc, #252]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbe:	f7ff fb23 	bl	8001608 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fc6:	f7ff fb1f 	bl	8001608 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e067      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fd8:	4b35      	ldr	r3, [pc, #212]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1f0      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a1b      	ldr	r3, [r3, #32]
 8001fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001fec:	d108      	bne.n	8002000 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001fee:	4b30      	ldr	r3, [pc, #192]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	492d      	ldr	r1, [pc, #180]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b2b      	ldr	r3, [pc, #172]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a19      	ldr	r1, [r3, #32]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	430b      	orrs	r3, r1
 8002012:	4927      	ldr	r1, [pc, #156]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002014:	4313      	orrs	r3, r2
 8002016:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002018:	4b27      	ldr	r3, [pc, #156]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 800201a:	2201      	movs	r2, #1
 800201c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201e:	f7ff faf3 	bl	8001608 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002024:	e008      	b.n	8002038 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff faef 	bl	8001608 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d901      	bls.n	8002038 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e037      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002038:	4b1d      	ldr	r3, [pc, #116]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d0f0      	beq.n	8002026 <HAL_RCC_OscConfig+0x46a>
 8002044:	e02f      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002046:	4b1c      	ldr	r3, [pc, #112]	; (80020b8 <HAL_RCC_OscConfig+0x4fc>)
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204c:	f7ff fadc 	bl	8001608 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff fad8 	bl	8001608 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e020      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002066:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f0      	bne.n	8002054 <HAL_RCC_OscConfig+0x498>
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	69db      	ldr	r3, [r3, #28]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e013      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002080:	4b0b      	ldr	r3, [pc, #44]	; (80020b0 <HAL_RCC_OscConfig+0x4f4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	429a      	cmp	r2, r3
 8002092:	d106      	bne.n	80020a2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800209e:	429a      	cmp	r2, r3
 80020a0:	d001      	beq.n	80020a6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e000      	b.n	80020a8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 80020a6:	2300      	movs	r3, #0
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	3718      	adds	r7, #24
 80020ac:	46bd      	mov	sp, r7
 80020ae:	bd80      	pop	{r7, pc}
 80020b0:	40021000 	.word	0x40021000
 80020b4:	40007000 	.word	0x40007000
 80020b8:	42420060 	.word	0x42420060

080020bc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0d0      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b6a      	ldr	r3, [pc, #424]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d910      	bls.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b67      	ldr	r3, [pc, #412]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 0207 	bic.w	r2, r3, #7
 80020e6:	4965      	ldr	r1, [pc, #404]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b63      	ldr	r3, [pc, #396]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d001      	beq.n	8002100 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0b8      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0302 	and.w	r3, r3, #2
 8002108:	2b00      	cmp	r3, #0
 800210a:	d020      	beq.n	800214e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002118:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	4a58      	ldr	r2, [pc, #352]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800211e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002122:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0308 	and.w	r3, r3, #8
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002130:	4b53      	ldr	r3, [pc, #332]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	4a52      	ldr	r2, [pc, #328]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800213a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800213c:	4b50      	ldr	r3, [pc, #320]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	494d      	ldr	r1, [pc, #308]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	4313      	orrs	r3, r2
 800214c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	2b00      	cmp	r3, #0
 8002158:	d040      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d115      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800216e:	2301      	movs	r3, #1
 8002170:	e07f      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b02      	cmp	r3, #2
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b41      	ldr	r3, [pc, #260]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e073      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e06b      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b39      	ldr	r3, [pc, #228]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4936      	ldr	r1, [pc, #216]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7ff fa2c 	bl	8001608 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7ff fa28 	bl	8001608 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e053      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d210      	bcs.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b24      	ldr	r3, [pc, #144]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f023 0207 	bic.w	r2, r3, #7
 80021f2:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_RCC_ClockConfig+0x1c0>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	683a      	ldr	r2, [r7, #0]
 8002204:	429a      	cmp	r2, r3
 8002206:	d001      	beq.n	800220c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e032      	b.n	8002272 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b00      	cmp	r3, #0
 8002216:	d008      	beq.n	800222a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002218:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4916      	ldr	r1, [pc, #88]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002226:	4313      	orrs	r3, r2
 8002228:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0308 	and.w	r3, r3, #8
 8002232:	2b00      	cmp	r3, #0
 8002234:	d009      	beq.n	800224a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002236:	4b12      	ldr	r3, [pc, #72]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	490e      	ldr	r1, [pc, #56]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002246:	4313      	orrs	r3, r2
 8002248:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800224a:	f000 f821 	bl	8002290 <HAL_RCC_GetSysClockFreq>
 800224e:	4602      	mov	r2, r0
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	091b      	lsrs	r3, r3, #4
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	490a      	ldr	r1, [pc, #40]	; (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 800225c:	5ccb      	ldrb	r3, [r1, r3]
 800225e:	fa22 f303 	lsr.w	r3, r2, r3
 8002262:	4a09      	ldr	r2, [pc, #36]	; (8002288 <HAL_RCC_ClockConfig+0x1cc>)
 8002264:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002266:	4b09      	ldr	r3, [pc, #36]	; (800228c <HAL_RCC_ClockConfig+0x1d0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7ff f98a 	bl	8001584 <HAL_InitTick>

  return HAL_OK;
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40022000 	.word	0x40022000
 8002280:	40021000 	.word	0x40021000
 8002284:	08002d50 	.word	0x08002d50
 8002288:	2000003c 	.word	0x2000003c
 800228c:	20000044 	.word	0x20000044

08002290 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	2300      	movs	r3, #0
 80022a0:	617b      	str	r3, [r7, #20]
 80022a2:	2300      	movs	r3, #0
 80022a4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80022a6:	2300      	movs	r3, #0
 80022a8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022aa:	4b1e      	ldr	r3, [pc, #120]	; (8002324 <HAL_RCC_GetSysClockFreq+0x94>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d002      	beq.n	80022c0 <HAL_RCC_GetSysClockFreq+0x30>
 80022ba:	2b08      	cmp	r3, #8
 80022bc:	d003      	beq.n	80022c6 <HAL_RCC_GetSysClockFreq+0x36>
 80022be:	e027      	b.n	8002310 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022c0:	4b19      	ldr	r3, [pc, #100]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c2:	613b      	str	r3, [r7, #16]
      break;
 80022c4:	e027      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	0c9b      	lsrs	r3, r3, #18
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	4a17      	ldr	r2, [pc, #92]	; (800232c <HAL_RCC_GetSysClockFreq+0x9c>)
 80022d0:	5cd3      	ldrb	r3, [r2, r3]
 80022d2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d010      	beq.n	8002300 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80022de:	4b11      	ldr	r3, [pc, #68]	; (8002324 <HAL_RCC_GetSysClockFreq+0x94>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	0c5b      	lsrs	r3, r3, #17
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	4a11      	ldr	r2, [pc, #68]	; (8002330 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022ea:	5cd3      	ldrb	r3, [r2, r3]
 80022ec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f2:	fb02 f203 	mul.w	r2, r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	e004      	b.n	800230a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a0c      	ldr	r2, [pc, #48]	; (8002334 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002304:	fb02 f303 	mul.w	r3, r2, r3
 8002308:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	613b      	str	r3, [r7, #16]
      break;
 800230e:	e002      	b.n	8002316 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002310:	4b05      	ldr	r3, [pc, #20]	; (8002328 <HAL_RCC_GetSysClockFreq+0x98>)
 8002312:	613b      	str	r3, [r7, #16]
      break;
 8002314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002316:	693b      	ldr	r3, [r7, #16]
}
 8002318:	4618      	mov	r0, r3
 800231a:	371c      	adds	r7, #28
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	40021000 	.word	0x40021000
 8002328:	007a1200 	.word	0x007a1200
 800232c:	08002d60 	.word	0x08002d60
 8002330:	08002d70 	.word	0x08002d70
 8002334:	003d0900 	.word	0x003d0900

08002338 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002340:	4b0a      	ldr	r3, [pc, #40]	; (800236c <RCC_Delay+0x34>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <RCC_Delay+0x38>)
 8002346:	fba2 2303 	umull	r2, r3, r2, r3
 800234a:	0a5b      	lsrs	r3, r3, #9
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	fb02 f303 	mul.w	r3, r2, r3
 8002352:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002354:	bf00      	nop
  }
  while (Delay --);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e5a      	subs	r2, r3, #1
 800235a:	60fa      	str	r2, [r7, #12]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1f9      	bne.n	8002354 <RCC_Delay+0x1c>
}
 8002360:	bf00      	nop
 8002362:	bf00      	nop
 8002364:	3714      	adds	r7, #20
 8002366:	46bd      	mov	sp, r7
 8002368:	bc80      	pop	{r7}
 800236a:	4770      	bx	lr
 800236c:	2000003c 	.word	0x2000003c
 8002370:	10624dd3 	.word	0x10624dd3

08002374 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e041      	b.n	800240a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe ff1e 	bl	80011dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2202      	movs	r2, #2
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3304      	adds	r3, #4
 80023b0:	4619      	mov	r1, r3
 80023b2:	4610      	mov	r0, r2
 80023b4:	f000 fa56 	bl	8002864 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002422:	b2db      	uxtb	r3, r3
 8002424:	2b01      	cmp	r3, #1
 8002426:	d001      	beq.n	800242c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e035      	b.n	8002498 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2202      	movs	r2, #2
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68da      	ldr	r2, [r3, #12]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f042 0201 	orr.w	r2, r2, #1
 8002442:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a16      	ldr	r2, [pc, #88]	; (80024a4 <HAL_TIM_Base_Start_IT+0x90>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d009      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002456:	d004      	beq.n	8002462 <HAL_TIM_Base_Start_IT+0x4e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <HAL_TIM_Base_Start_IT+0x94>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d111      	bne.n	8002486 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689b      	ldr	r3, [r3, #8]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	2b06      	cmp	r3, #6
 8002472:	d010      	beq.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f042 0201 	orr.w	r2, r2, #1
 8002482:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	e007      	b.n	8002496 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681a      	ldr	r2, [r3, #0]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f042 0201 	orr.w	r2, r2, #1
 8002494:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3714      	adds	r7, #20
 800249c:	46bd      	mov	sp, r7
 800249e:	bc80      	pop	{r7}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	40012c00 	.word	0x40012c00
 80024a8:	40000400 	.word	0x40000400

080024ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	691b      	ldr	r3, [r3, #16]
 80024c2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d020      	beq.n	8002510 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d01b      	beq.n	8002510 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f06f 0202 	mvn.w	r2, #2
 80024e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	699b      	ldr	r3, [r3, #24]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 f998 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 80024fc:	e005      	b.n	800250a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f98b 	bl	800281a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f000 f99a 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b00      	cmp	r3, #0
 8002518:	d020      	beq.n	800255c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01b      	beq.n	800255c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0204 	mvn.w	r2, #4
 800252c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2202      	movs	r2, #2
 8002532:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 f972 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 8002548:	e005      	b.n	8002556 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f965 	bl	800281a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f000 f974 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	f003 0308 	and.w	r3, r3, #8
 8002562:	2b00      	cmp	r3, #0
 8002564:	d020      	beq.n	80025a8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f003 0308 	and.w	r3, r3, #8
 800256c:	2b00      	cmp	r3, #0
 800256e:	d01b      	beq.n	80025a8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f06f 0208 	mvn.w	r2, #8
 8002578:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2204      	movs	r2, #4
 800257e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	f003 0303 	and.w	r3, r3, #3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f94c 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 8002594:	e005      	b.n	80025a2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f000 f93f 	bl	800281a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 f94e 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d020      	beq.n	80025f4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	f003 0310 	and.w	r3, r3, #16
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d01b      	beq.n	80025f4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f06f 0210 	mvn.w	r2, #16
 80025c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2208      	movs	r2, #8
 80025ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	69db      	ldr	r3, [r3, #28]
 80025d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f000 f926 	bl	800282c <HAL_TIM_IC_CaptureCallback>
 80025e0:	e005      	b.n	80025ee <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f919 	bl	800281a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f000 f928 	bl	800283e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00c      	beq.n	8002618 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d007      	beq.n	8002618 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f06f 0201 	mvn.w	r2, #1
 8002610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7fe fd88 	bl	8001128 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 fa6f 	bl	8002b1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f8f8 	bl	8002850 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0320 	and.w	r3, r3, #32
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0320 	and.w	r3, r3, #32
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0220 	mvn.w	r2, #32
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 fa42 	bl	8002b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3710      	adds	r7, #16
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}

0800268c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d101      	bne.n	80026a8 <HAL_TIM_ConfigClockSource+0x1c>
 80026a4:	2302      	movs	r3, #2
 80026a6:	e0b4      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x186>
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2202      	movs	r2, #2
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80026c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80026ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	68ba      	ldr	r2, [r7, #8]
 80026d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e0:	d03e      	beq.n	8002760 <HAL_TIM_ConfigClockSource+0xd4>
 80026e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026e6:	f200 8087 	bhi.w	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ee:	f000 8086 	beq.w	80027fe <HAL_TIM_ConfigClockSource+0x172>
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026f6:	d87f      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 80026f8:	2b70      	cmp	r3, #112	; 0x70
 80026fa:	d01a      	beq.n	8002732 <HAL_TIM_ConfigClockSource+0xa6>
 80026fc:	2b70      	cmp	r3, #112	; 0x70
 80026fe:	d87b      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002700:	2b60      	cmp	r3, #96	; 0x60
 8002702:	d050      	beq.n	80027a6 <HAL_TIM_ConfigClockSource+0x11a>
 8002704:	2b60      	cmp	r3, #96	; 0x60
 8002706:	d877      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002708:	2b50      	cmp	r3, #80	; 0x50
 800270a:	d03c      	beq.n	8002786 <HAL_TIM_ConfigClockSource+0xfa>
 800270c:	2b50      	cmp	r3, #80	; 0x50
 800270e:	d873      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002710:	2b40      	cmp	r3, #64	; 0x40
 8002712:	d058      	beq.n	80027c6 <HAL_TIM_ConfigClockSource+0x13a>
 8002714:	2b40      	cmp	r3, #64	; 0x40
 8002716:	d86f      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002718:	2b30      	cmp	r3, #48	; 0x30
 800271a:	d064      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x15a>
 800271c:	2b30      	cmp	r3, #48	; 0x30
 800271e:	d86b      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002720:	2b20      	cmp	r3, #32
 8002722:	d060      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002724:	2b20      	cmp	r3, #32
 8002726:	d867      	bhi.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
 8002728:	2b00      	cmp	r3, #0
 800272a:	d05c      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x15a>
 800272c:	2b10      	cmp	r3, #16
 800272e:	d05a      	beq.n	80027e6 <HAL_TIM_ConfigClockSource+0x15a>
 8002730:	e062      	b.n	80027f8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6818      	ldr	r0, [r3, #0]
 8002736:	683b      	ldr	r3, [r7, #0]
 8002738:	6899      	ldr	r1, [r3, #8]
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f000 f96a 	bl	8002a1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002754:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	609a      	str	r2, [r3, #8]
      break;
 800275e:	e04f      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6818      	ldr	r0, [r3, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	6899      	ldr	r1, [r3, #8]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685a      	ldr	r2, [r3, #4]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	68db      	ldr	r3, [r3, #12]
 8002770:	f000 f953 	bl	8002a1a <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002782:	609a      	str	r2, [r3, #8]
      break;
 8002784:	e03c      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6818      	ldr	r0, [r3, #0]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	6859      	ldr	r1, [r3, #4]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	461a      	mov	r2, r3
 8002794:	f000 f8ca 	bl	800292c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	2150      	movs	r1, #80	; 0x50
 800279e:	4618      	mov	r0, r3
 80027a0:	f000 f921 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 80027a4:	e02c      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	6859      	ldr	r1, [r3, #4]
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	461a      	mov	r2, r3
 80027b4:	f000 f8e8 	bl	8002988 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2160      	movs	r1, #96	; 0x60
 80027be:	4618      	mov	r0, r3
 80027c0:	f000 f911 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 80027c4:	e01c      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	6859      	ldr	r1, [r3, #4]
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f8aa 	bl	800292c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2140      	movs	r1, #64	; 0x40
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 f901 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 80027e4:	e00c      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4619      	mov	r1, r3
 80027f0:	4610      	mov	r0, r2
 80027f2:	f000 f8f8 	bl	80029e6 <TIM_ITRx_SetConfig>
      break;
 80027f6:	e003      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	73fb      	strb	r3, [r7, #15]
      break;
 80027fc:	e000      	b.n	8002800 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80027fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002810:	7bfb      	ldrb	r3, [r7, #15]
}
 8002812:	4618      	mov	r0, r3
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002822:	bf00      	nop
 8002824:	370c      	adds	r7, #12
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr

0800282c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002864:	b480      	push	{r7}
 8002866:	b085      	sub	sp, #20
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a2b      	ldr	r2, [pc, #172]	; (8002924 <TIM_Base_SetConfig+0xc0>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d007      	beq.n	800288c <TIM_Base_SetConfig+0x28>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002882:	d003      	beq.n	800288c <TIM_Base_SetConfig+0x28>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	4a28      	ldr	r2, [pc, #160]	; (8002928 <TIM_Base_SetConfig+0xc4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d108      	bne.n	800289e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002892:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	4313      	orrs	r3, r2
 800289c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	4a20      	ldr	r2, [pc, #128]	; (8002924 <TIM_Base_SetConfig+0xc0>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d007      	beq.n	80028b6 <TIM_Base_SetConfig+0x52>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ac:	d003      	beq.n	80028b6 <TIM_Base_SetConfig+0x52>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	4a1d      	ldr	r2, [pc, #116]	; (8002928 <TIM_Base_SetConfig+0xc4>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d108      	bne.n	80028c8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	4313      	orrs	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	695b      	ldr	r3, [r3, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a0d      	ldr	r2, [pc, #52]	; (8002924 <TIM_Base_SetConfig+0xc0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d103      	bne.n	80028fc <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	691a      	ldr	r2, [r3, #16]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	691b      	ldr	r3, [r3, #16]
 8002906:	f003 0301 	and.w	r3, r3, #1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <TIM_Base_SetConfig+0xb6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f023 0201 	bic.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	611a      	str	r2, [r3, #16]
  }
}
 800291a:	bf00      	nop
 800291c:	3714      	adds	r7, #20
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr
 8002924:	40012c00 	.word	0x40012c00
 8002928:	40000400 	.word	0x40000400

0800292c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	f023 0201 	bic.w	r2, r3, #1
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002956:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	4313      	orrs	r3, r2
 8002960:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f023 030a 	bic.w	r3, r3, #10
 8002968:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	4313      	orrs	r3, r2
 8002970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	693a      	ldr	r2, [r7, #16]
 8002976:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	697a      	ldr	r2, [r7, #20]
 800297c:	621a      	str	r2, [r3, #32]
}
 800297e:	bf00      	nop
 8002980:	371c      	adds	r7, #28
 8002982:	46bd      	mov	sp, r7
 8002984:	bc80      	pop	{r7}
 8002986:	4770      	bx	lr

08002988 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002988:	b480      	push	{r7}
 800298a:	b087      	sub	sp, #28
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0210 	bic.w	r2, r3, #16
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	031b      	lsls	r3, r3, #12
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	693a      	ldr	r2, [r7, #16]
 80029d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	621a      	str	r2, [r3, #32]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b085      	sub	sp, #20
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	6078      	str	r0, [r7, #4]
 80029ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80029fe:	683a      	ldr	r2, [r7, #0]
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f043 0307 	orr.w	r3, r3, #7
 8002a08:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68fa      	ldr	r2, [r7, #12]
 8002a0e:	609a      	str	r2, [r3, #8]
}
 8002a10:	bf00      	nop
 8002a12:	3714      	adds	r7, #20
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bc80      	pop	{r7}
 8002a18:	4770      	bx	lr

08002a1a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b087      	sub	sp, #28
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
 8002a26:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a34:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	431a      	orrs	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	697a      	ldr	r2, [r7, #20]
 8002a4c:	609a      	str	r2, [r3, #8]
}
 8002a4e:	bf00      	nop
 8002a50:	371c      	adds	r7, #28
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	e041      	b.n	8002af4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a96:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4a14      	ldr	r2, [pc, #80]	; (8002b00 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d009      	beq.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d004      	beq.n	8002ac8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10c      	bne.n	8002ae2 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ace:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	68ba      	ldr	r2, [r7, #8]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68ba      	ldr	r2, [r7, #8]
 8002ae0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bc80      	pop	{r7}
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	40012c00 	.word	0x40012c00
 8002b04:	40000400 	.word	0x40000400

08002b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bc80      	pop	{r7}
 8002b18:	4770      	bx	lr

08002b1a <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b1a:	b480      	push	{r7}
 8002b1c:	b083      	sub	sp, #12
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b22:	bf00      	nop
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bc80      	pop	{r7}
 8002b2a:	4770      	bx	lr

08002b2c <__errno>:
 8002b2c:	4b01      	ldr	r3, [pc, #4]	; (8002b34 <__errno+0x8>)
 8002b2e:	6818      	ldr	r0, [r3, #0]
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	2000004c 	.word	0x2000004c

08002b38 <__libc_init_array>:
 8002b38:	b570      	push	{r4, r5, r6, lr}
 8002b3a:	2600      	movs	r6, #0
 8002b3c:	4d0c      	ldr	r5, [pc, #48]	; (8002b70 <__libc_init_array+0x38>)
 8002b3e:	4c0d      	ldr	r4, [pc, #52]	; (8002b74 <__libc_init_array+0x3c>)
 8002b40:	1b64      	subs	r4, r4, r5
 8002b42:	10a4      	asrs	r4, r4, #2
 8002b44:	42a6      	cmp	r6, r4
 8002b46:	d109      	bne.n	8002b5c <__libc_init_array+0x24>
 8002b48:	f000 f8f6 	bl	8002d38 <_init>
 8002b4c:	2600      	movs	r6, #0
 8002b4e:	4d0a      	ldr	r5, [pc, #40]	; (8002b78 <__libc_init_array+0x40>)
 8002b50:	4c0a      	ldr	r4, [pc, #40]	; (8002b7c <__libc_init_array+0x44>)
 8002b52:	1b64      	subs	r4, r4, r5
 8002b54:	10a4      	asrs	r4, r4, #2
 8002b56:	42a6      	cmp	r6, r4
 8002b58:	d105      	bne.n	8002b66 <__libc_init_array+0x2e>
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
 8002b5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b60:	4798      	blx	r3
 8002b62:	3601      	adds	r6, #1
 8002b64:	e7ee      	b.n	8002b44 <__libc_init_array+0xc>
 8002b66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b6a:	4798      	blx	r3
 8002b6c:	3601      	adds	r6, #1
 8002b6e:	e7f2      	b.n	8002b56 <__libc_init_array+0x1e>
 8002b70:	08002d74 	.word	0x08002d74
 8002b74:	08002d74 	.word	0x08002d74
 8002b78:	08002d74 	.word	0x08002d74
 8002b7c:	08002d78 	.word	0x08002d78

08002b80 <malloc>:
 8002b80:	4b02      	ldr	r3, [pc, #8]	; (8002b8c <malloc+0xc>)
 8002b82:	4601      	mov	r1, r0
 8002b84:	6818      	ldr	r0, [r3, #0]
 8002b86:	f000 b85f 	b.w	8002c48 <_malloc_r>
 8002b8a:	bf00      	nop
 8002b8c:	2000004c 	.word	0x2000004c

08002b90 <free>:
 8002b90:	4b02      	ldr	r3, [pc, #8]	; (8002b9c <free+0xc>)
 8002b92:	4601      	mov	r1, r0
 8002b94:	6818      	ldr	r0, [r3, #0]
 8002b96:	f000 b80b 	b.w	8002bb0 <_free_r>
 8002b9a:	bf00      	nop
 8002b9c:	2000004c 	.word	0x2000004c

08002ba0 <memset>:
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	4402      	add	r2, r0
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d100      	bne.n	8002baa <memset+0xa>
 8002ba8:	4770      	bx	lr
 8002baa:	f803 1b01 	strb.w	r1, [r3], #1
 8002bae:	e7f9      	b.n	8002ba4 <memset+0x4>

08002bb0 <_free_r>:
 8002bb0:	b538      	push	{r3, r4, r5, lr}
 8002bb2:	4605      	mov	r5, r0
 8002bb4:	2900      	cmp	r1, #0
 8002bb6:	d043      	beq.n	8002c40 <_free_r+0x90>
 8002bb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bbc:	1f0c      	subs	r4, r1, #4
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	bfb8      	it	lt
 8002bc2:	18e4      	addlt	r4, r4, r3
 8002bc4:	f000 f8aa 	bl	8002d1c <__malloc_lock>
 8002bc8:	4a1e      	ldr	r2, [pc, #120]	; (8002c44 <_free_r+0x94>)
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	4610      	mov	r0, r2
 8002bce:	b933      	cbnz	r3, 8002bde <_free_r+0x2e>
 8002bd0:	6063      	str	r3, [r4, #4]
 8002bd2:	6014      	str	r4, [r2, #0]
 8002bd4:	4628      	mov	r0, r5
 8002bd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002bda:	f000 b8a5 	b.w	8002d28 <__malloc_unlock>
 8002bde:	42a3      	cmp	r3, r4
 8002be0:	d90a      	bls.n	8002bf8 <_free_r+0x48>
 8002be2:	6821      	ldr	r1, [r4, #0]
 8002be4:	1862      	adds	r2, r4, r1
 8002be6:	4293      	cmp	r3, r2
 8002be8:	bf01      	itttt	eq
 8002bea:	681a      	ldreq	r2, [r3, #0]
 8002bec:	685b      	ldreq	r3, [r3, #4]
 8002bee:	1852      	addeq	r2, r2, r1
 8002bf0:	6022      	streq	r2, [r4, #0]
 8002bf2:	6063      	str	r3, [r4, #4]
 8002bf4:	6004      	str	r4, [r0, #0]
 8002bf6:	e7ed      	b.n	8002bd4 <_free_r+0x24>
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b10b      	cbz	r3, 8002c02 <_free_r+0x52>
 8002bfe:	42a3      	cmp	r3, r4
 8002c00:	d9fa      	bls.n	8002bf8 <_free_r+0x48>
 8002c02:	6811      	ldr	r1, [r2, #0]
 8002c04:	1850      	adds	r0, r2, r1
 8002c06:	42a0      	cmp	r0, r4
 8002c08:	d10b      	bne.n	8002c22 <_free_r+0x72>
 8002c0a:	6820      	ldr	r0, [r4, #0]
 8002c0c:	4401      	add	r1, r0
 8002c0e:	1850      	adds	r0, r2, r1
 8002c10:	4283      	cmp	r3, r0
 8002c12:	6011      	str	r1, [r2, #0]
 8002c14:	d1de      	bne.n	8002bd4 <_free_r+0x24>
 8002c16:	6818      	ldr	r0, [r3, #0]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4401      	add	r1, r0
 8002c1c:	6011      	str	r1, [r2, #0]
 8002c1e:	6053      	str	r3, [r2, #4]
 8002c20:	e7d8      	b.n	8002bd4 <_free_r+0x24>
 8002c22:	d902      	bls.n	8002c2a <_free_r+0x7a>
 8002c24:	230c      	movs	r3, #12
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	e7d4      	b.n	8002bd4 <_free_r+0x24>
 8002c2a:	6820      	ldr	r0, [r4, #0]
 8002c2c:	1821      	adds	r1, r4, r0
 8002c2e:	428b      	cmp	r3, r1
 8002c30:	bf01      	itttt	eq
 8002c32:	6819      	ldreq	r1, [r3, #0]
 8002c34:	685b      	ldreq	r3, [r3, #4]
 8002c36:	1809      	addeq	r1, r1, r0
 8002c38:	6021      	streq	r1, [r4, #0]
 8002c3a:	6063      	str	r3, [r4, #4]
 8002c3c:	6054      	str	r4, [r2, #4]
 8002c3e:	e7c9      	b.n	8002bd4 <_free_r+0x24>
 8002c40:	bd38      	pop	{r3, r4, r5, pc}
 8002c42:	bf00      	nop
 8002c44:	200000fc 	.word	0x200000fc

08002c48 <_malloc_r>:
 8002c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c4a:	1ccd      	adds	r5, r1, #3
 8002c4c:	f025 0503 	bic.w	r5, r5, #3
 8002c50:	3508      	adds	r5, #8
 8002c52:	2d0c      	cmp	r5, #12
 8002c54:	bf38      	it	cc
 8002c56:	250c      	movcc	r5, #12
 8002c58:	2d00      	cmp	r5, #0
 8002c5a:	4606      	mov	r6, r0
 8002c5c:	db01      	blt.n	8002c62 <_malloc_r+0x1a>
 8002c5e:	42a9      	cmp	r1, r5
 8002c60:	d903      	bls.n	8002c6a <_malloc_r+0x22>
 8002c62:	230c      	movs	r3, #12
 8002c64:	6033      	str	r3, [r6, #0]
 8002c66:	2000      	movs	r0, #0
 8002c68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002c6a:	f000 f857 	bl	8002d1c <__malloc_lock>
 8002c6e:	4921      	ldr	r1, [pc, #132]	; (8002cf4 <_malloc_r+0xac>)
 8002c70:	680a      	ldr	r2, [r1, #0]
 8002c72:	4614      	mov	r4, r2
 8002c74:	b99c      	cbnz	r4, 8002c9e <_malloc_r+0x56>
 8002c76:	4f20      	ldr	r7, [pc, #128]	; (8002cf8 <_malloc_r+0xb0>)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	b923      	cbnz	r3, 8002c86 <_malloc_r+0x3e>
 8002c7c:	4621      	mov	r1, r4
 8002c7e:	4630      	mov	r0, r6
 8002c80:	f000 f83c 	bl	8002cfc <_sbrk_r>
 8002c84:	6038      	str	r0, [r7, #0]
 8002c86:	4629      	mov	r1, r5
 8002c88:	4630      	mov	r0, r6
 8002c8a:	f000 f837 	bl	8002cfc <_sbrk_r>
 8002c8e:	1c43      	adds	r3, r0, #1
 8002c90:	d123      	bne.n	8002cda <_malloc_r+0x92>
 8002c92:	230c      	movs	r3, #12
 8002c94:	4630      	mov	r0, r6
 8002c96:	6033      	str	r3, [r6, #0]
 8002c98:	f000 f846 	bl	8002d28 <__malloc_unlock>
 8002c9c:	e7e3      	b.n	8002c66 <_malloc_r+0x1e>
 8002c9e:	6823      	ldr	r3, [r4, #0]
 8002ca0:	1b5b      	subs	r3, r3, r5
 8002ca2:	d417      	bmi.n	8002cd4 <_malloc_r+0x8c>
 8002ca4:	2b0b      	cmp	r3, #11
 8002ca6:	d903      	bls.n	8002cb0 <_malloc_r+0x68>
 8002ca8:	6023      	str	r3, [r4, #0]
 8002caa:	441c      	add	r4, r3
 8002cac:	6025      	str	r5, [r4, #0]
 8002cae:	e004      	b.n	8002cba <_malloc_r+0x72>
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	42a2      	cmp	r2, r4
 8002cb4:	bf0c      	ite	eq
 8002cb6:	600b      	streq	r3, [r1, #0]
 8002cb8:	6053      	strne	r3, [r2, #4]
 8002cba:	4630      	mov	r0, r6
 8002cbc:	f000 f834 	bl	8002d28 <__malloc_unlock>
 8002cc0:	f104 000b 	add.w	r0, r4, #11
 8002cc4:	1d23      	adds	r3, r4, #4
 8002cc6:	f020 0007 	bic.w	r0, r0, #7
 8002cca:	1ac2      	subs	r2, r0, r3
 8002ccc:	d0cc      	beq.n	8002c68 <_malloc_r+0x20>
 8002cce:	1a1b      	subs	r3, r3, r0
 8002cd0:	50a3      	str	r3, [r4, r2]
 8002cd2:	e7c9      	b.n	8002c68 <_malloc_r+0x20>
 8002cd4:	4622      	mov	r2, r4
 8002cd6:	6864      	ldr	r4, [r4, #4]
 8002cd8:	e7cc      	b.n	8002c74 <_malloc_r+0x2c>
 8002cda:	1cc4      	adds	r4, r0, #3
 8002cdc:	f024 0403 	bic.w	r4, r4, #3
 8002ce0:	42a0      	cmp	r0, r4
 8002ce2:	d0e3      	beq.n	8002cac <_malloc_r+0x64>
 8002ce4:	1a21      	subs	r1, r4, r0
 8002ce6:	4630      	mov	r0, r6
 8002ce8:	f000 f808 	bl	8002cfc <_sbrk_r>
 8002cec:	3001      	adds	r0, #1
 8002cee:	d1dd      	bne.n	8002cac <_malloc_r+0x64>
 8002cf0:	e7cf      	b.n	8002c92 <_malloc_r+0x4a>
 8002cf2:	bf00      	nop
 8002cf4:	200000fc 	.word	0x200000fc
 8002cf8:	20000100 	.word	0x20000100

08002cfc <_sbrk_r>:
 8002cfc:	b538      	push	{r3, r4, r5, lr}
 8002cfe:	2300      	movs	r3, #0
 8002d00:	4d05      	ldr	r5, [pc, #20]	; (8002d18 <_sbrk_r+0x1c>)
 8002d02:	4604      	mov	r4, r0
 8002d04:	4608      	mov	r0, r1
 8002d06:	602b      	str	r3, [r5, #0]
 8002d08:	f7fe fabe 	bl	8001288 <_sbrk>
 8002d0c:	1c43      	adds	r3, r0, #1
 8002d0e:	d102      	bne.n	8002d16 <_sbrk_r+0x1a>
 8002d10:	682b      	ldr	r3, [r5, #0]
 8002d12:	b103      	cbz	r3, 8002d16 <_sbrk_r+0x1a>
 8002d14:	6023      	str	r3, [r4, #0]
 8002d16:	bd38      	pop	{r3, r4, r5, pc}
 8002d18:	200004b0 	.word	0x200004b0

08002d1c <__malloc_lock>:
 8002d1c:	4801      	ldr	r0, [pc, #4]	; (8002d24 <__malloc_lock+0x8>)
 8002d1e:	f000 b809 	b.w	8002d34 <__retarget_lock_acquire_recursive>
 8002d22:	bf00      	nop
 8002d24:	200004b8 	.word	0x200004b8

08002d28 <__malloc_unlock>:
 8002d28:	4801      	ldr	r0, [pc, #4]	; (8002d30 <__malloc_unlock+0x8>)
 8002d2a:	f000 b804 	b.w	8002d36 <__retarget_lock_release_recursive>
 8002d2e:	bf00      	nop
 8002d30:	200004b8 	.word	0x200004b8

08002d34 <__retarget_lock_acquire_recursive>:
 8002d34:	4770      	bx	lr

08002d36 <__retarget_lock_release_recursive>:
 8002d36:	4770      	bx	lr

08002d38 <_init>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr

08002d44 <_fini>:
 8002d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d46:	bf00      	nop
 8002d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d4a:	bc08      	pop	{r3}
 8002d4c:	469e      	mov	lr, r3
 8002d4e:	4770      	bx	lr
